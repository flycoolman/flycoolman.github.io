[{"authors":["admin"],"categories":null,"content":"Hey, My name is Hongwei Li, a software engineer and network engineer. This site is a hub of my documents for learning, experience. I hope you find something awesome, useful and helpful. Feel free to follow me on GitHub, send me a message on Twitter, or drop me an email.\n","date":1596585600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1599350400,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/author/hongwei-li/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/hongwei-li/","section":"authors","summary":"Hey, My name is Hongwei Li, a software engineer and network engineer. This site is a hub of my documents for learning, experience. I hope you find something awesome, useful and helpful.","tags":null,"title":"Hongwei Li","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"/talk/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example/","section":"talk","summary":"An example talk using Academic's Markdown slides feature.","tags":[],"title":"Example Talk","type":"talk"},{"authors":["Hongwei Li"],"categories":["Linux","System"],"content":"This document preassumes that you are familiar with VirtualBox, Vagrant on Linux.\nPrerequisites  VirtualBox Vagrant  What to Build  3 Virtual Machines 3 MySQL instances running on the 3 VMs Employees Sample Database Data replication  IP Settings  Master - 192.168.0.201 Slave-1 - 192.168.0.202 Slave-2 - 192.168.0.203  Vagrantfiles   Vagrantfile-Master  Vagrantfile-Slave-1  Vagrantfile-Slave-2  Steps Boot up Virtual Machines  Use \u0026lsquo;vagrant up\u0026rsquo; to boot up 3 virtual machines. Use \u0026lsquo;vagrant halt\u0026rsquo; to power off the VMs Open VirtualBox GUI and change the MAC addresses of the 3 VMs\nMake sure the 3 VMs have different MAC addresses  Install MySQL Server Install MySQL server on the 3 VMs separately.\nThe guide How To Install MySQL on CentOS 8 can be referenced.\nsudo dnf install mysql-server sudo systemctl start mysqld.service sudo systemctl status mysqld sudo systemctl enable mysqld sudo mysql_secure_installation mysqladmin -u root -p version mysql -u root -p  Configure MySQL Server on Master VM  Edit MySQL configuration file \u0026lsquo;/etc/my.cnf\u0026rsquo;. Add the below configuration.   [mysqld]\nlog-bin=mysql-bin # Optinal\nserver-id=1　# Must\nbind-address = 0.0.0.0 # Must\n  Restart MySQL server service  System command:\nsudo systemctl restart mysqld   Create user for syncing data  MySQL commands:\nCREATE USER 'repl'@'192.168.0.%' IDENTIFIED BY '123456'; GRANT REPLICATION SLAVE ON *.* TO 'repl'@'192.168.0.%'; FLUSH PRIVILEGES;   Check master status  Configure MySQL Server on Slave VM  Edit MySQL configuration file \u0026lsquo;/etc/my.cnf\u0026rsquo;. Add the below configuration.   [mysqld]\nserver-id=2\n  Restart MySQL server service  System command:\nsudo systemctl restart mysqld   Configure syncronization  MySQL command:\nchange master to master_host='192.168.0.201', master_user='repl', master_password='123456', master_log_file='mysql-bin.000001', master_log_pos=155; start slave;   Check slave status  Both Slave_IO_Running and Slave_SQL_Running should be \u0026lsquo;Yes\u0026rsquo;.\n Same configuration and steps on Slave-2 VM, except the server-id=3.   Import the \u0026lsquo;Employees Sample Database\u0026rsquo;  Sync folder   Note that when you vagrant ssh into your machine, you\u0026rsquo;re in /home/vagrant. /home/vagrant is a different directory from the synced /vagrant directory.    By default, Vagrant only syncs the folders on vagrant up or vagrant reload.\nThe tool rsync can be used for data syncronization.    Download the \u0026lsquo;Employees Sample Database\u0026rsquo;  Download the zip file from Employees DB on GitHub, unzip the file and put the unzipped folder into the master VM folder of the host machine.\n Reload the master VM  Here we use the simple way, just reload the master VM.\n Import the database  On master VM:\ncd test_db-master/ mysql -u root -p -t \u0026lt; employees.sql   Validating the Employee Data  time mysql -u root -p -t \u0026lt; test_employees_sha.sql\n Check data on slaves  Now you can see all the data has been replicated on the slave servers.\nErrors Slave_IO_Running: No Possible reasons:\n Forget to restart mysqld service Forget to bind address.  Solution:\n Restart mysqld service Use netstat to check the status, i.e.  Links  Synced Folders\nHow To Install MySQL on CentOS 8\nEmployees Sample Database\nMySQL Cluster COnfiguration\nHow To Import SQL File Did you find this page helpful? Consider sharing it 🙌 ","date":1596585600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596672000,"objectID":"a7b339d2cfa9706a95dadf7d9038d2cd","permalink":"/linux/set-up-mysql-master-slave-cluster/","publishdate":"2020-08-05T00:00:00Z","relpermalink":"/linux/set-up-mysql-master-slave-cluster/","section":"linux","summary":"This guide covers how to set up MySQL cluster by VirtualBox and Vagrant. This can be helpful for development and test.","tags":["MySQL","Linux","VirtualBox","Vagrant","CentOS"],"title":"Set Up MySQL Cluster","type":"linux"},{"authors":["Hongwei Li"],"categories":["Basic","Web Development"],"content":"The website has been up and running for a while. Today I want to update a document on another machine. The steps below describe how to set up the environment on the machine.\nSteps  Install Hugo Extended version Gitclone the repository Delete the \u0026lsquo;public\u0026rsquo; folder Update the submodule Checkout the branch \u0026lsquo;master\u0026rsquo; Work on the document Add, Commit and Push as before  Step 1: Install Hugo Extended version wget https://github.com/gohugoio/hugo/releases/download/v0.74.3/hugo_extended_0.74.3_Linux-64bit.deb sudo apt install ./hugo_extended_0.74.3_Linux-64bit.deb  Step 2: Gitclone the repository git clone https://github.com/flycoolman/academic-kickstart.git  Step 3: Delete the \u0026lsquo;public\u0026rsquo; folder cd academic-kickstart/ rm -rf public  Step 4: Update the submodule git submodule update --init --recursive  Step 5: Checkout the branch \u0026lsquo;master\u0026rsquo; cd public git checkout master  Step 6: Work on the document blahblahblah...  Step 7: Build the website cd academic-kickstart/ hugo  Step 8: Add, Commit and Push as before cd public git add . git commit -m \u0026quot;blahblah...\u0026quot; git push cd .. git add . git commit -m \u0026quot;blahblah...\u0026quot; git push  ALL SET!\nErrors and Tricks Error 1: Unable to locate template for shortcode  hongwei@HP840G1:~/Documents/academic-kickstart$ hugo server\nBuilding sites … ERROR 2020/08/04 07:51:50 Unable to locate template for shortcode \u0026ldquo;fragment\u0026rdquo; in page \u0026ldquo;slides/example/index.md\u0026rdquo;\nERROR 2020/08/04 07:51:50 Unable to locate template for shortcode \u0026ldquo;alert\u0026rdquo; in page \u0026ldquo;talk/example/index.md\u0026rdquo;\nERROR 2020/08/04 07:51:50 Unable to locate template for shortcode \u0026ldquo;alert\u0026rdquo; in page \u0026ldquo;publication/preprint/index.md\u0026rdquo;\nERROR 2020/08/04 07:51:50 Unable to locate template for shortcode \u0026ldquo;alert\u0026rdquo; in page \u0026ldquo;post/build-a-free-website-in-minutes-part-1/index.md\u0026rdquo;\n Solution\nInstall Hugo Extended version.\nError 2: failed to extract shortcode  hongwei@HP840G1:~/Documents/academic-kickstart$ hugo server\nBuilt in 11 ms\nError: Error building site: \u0026ldquo;/home/hongwei/Documents/academic-kickstart/content/home/demo.md:61:1\u0026rdquo;: failed to extract shortcode: template for shortcode \u0026ldquo;alert\u0026rdquo; not found\n Solution\nIf the Hugo Extended version has been installed, update the git submodule, see Step 4 above.\nError 3: \u0026lsquo;public\u0026rsquo; already exists  hongwei@HP840G1:~/Documents/academic-kickstart$ git submodule update \u0026ndash;init \u0026ndash;recursive\nSubmodule \u0026lsquo;public\u0026rsquo; (https://github.com/flycoolman/flycoolman.github.io.git) registered for path \u0026lsquo;public\u0026rsquo;\nSubmodule \u0026lsquo;themes/academic\u0026rsquo; (https://github.com/gcushen/hugo-academic.git) registered for path \u0026lsquo;themes/academic\u0026rsquo;\nfatal: destination path \u0026lsquo;/home/hongwei/Documents/academic-kickstart/public\u0026rsquo; already exists and is not an empty directory.\nfatal: clone of \u0026lsquo;https://github.com/flycoolman/flycoolman.github.io.git' into submodule path \u0026lsquo;/home/hongwei/Documents/academic-kickstart/public\u0026rsquo; failed\n Solution\nDelete the \u0026lsquo;public\u0026rsquo; folder, and update the git submodule again.\nError 4: forgot to check out before working on document  hongwei@HP840G1:~/Documents/academic-kickstart/public$ git status\nHEAD detached from f82be3e\nnothing to commit, working tree clean\n  hongwei@HP840G1:~/Documents/academic-kickstart/public$ git push\nfatal: You are not currently on a branch.\nTo push the history leading to the current (detached HEAD)\nstate now, use\ngit push origin HEAD:\n  hongwei@HP840G1:~/Documents/academic-kickstart/public$ git branch\n (HEAD detached from f82be3e)\nmaster    hongwei@HP840G1:~/Documents/academic-kickstart/public$ git checkout master\nWarning: you are leaving 1 commit behind, not connected to\nany of your branches:\n1090675 revise Upgrade to VirtualBox 6.1 and Vagrant 2.9.9 on Ubuntu 18.04\nIf you want to keep it by creating a new branch, this may be a good time\nto do so with:\ngit branch  1090675\nSwitched to branch \u0026lsquo;master\u0026rsquo;\nYour branch is up to date with \u0026lsquo;origin/master\u0026rsquo;.\n Solution\ngit branch temp 1090675 git push --set-upstream origin temp git checkout temp git push  Merge the branch temp to master\ngit checkout master git pull git branch --merged git branch -vv git branch -d temp  Did you find this page helpful? Consider sharing it 🙌 ","date":1596499200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598054400,"objectID":"1051b3fdf48a6997b9263b7d257e9969","permalink":"/post/build-a-free-website-in-minutes-part-5/","publishdate":"2020-08-04T00:00:00Z","relpermalink":"/post/build-a-free-website-in-minutes-part-5/","section":"post","summary":"Learn how to create the environment on another machine.","tags":["Hugo","Web Development","Static Website","Github Pages","Academic"],"title":"Build A Free Website In Minutes - Part 5","type":"post"},{"authors":["Hongwei Li"],"categories":["Java","Shardingsphere","Database"],"content":"Set Up Shardingsphere Development Environment This document used the official release version to set up and verify development environment. This way could help to rule out any unstable issues of source code and to focus the issues on environment.\nPrerequisites  Linux (Ubuntu 18.04) Source code 4.1.1 Eclipse IntelliJ IDEA   Choose the proper IDE (Eclipse or IntelliJ IDEA), even No IDE   Java Development Environment (No IDE) Install JDK 8 sudo apt install openjdk-8-jdk $ java -version openjdk version \u0026quot;1.8.0_252\u0026quot; OpenJDK Runtime Environment (build 1.8.0_252-8u252-b09-1~18.04-b09) OpenJDK 64-Bit Server VM (build 25.252-b09, mixed mode)  Install Maven (Optional) sudo apt install maven $ mvn -version Apache Maven 3.6.0 Maven home: /usr/share/maven Java version: 1.8.0_252, vendor: Private Build, runtime: /usr/lib/jvm/java-8-openjdk-amd64/jre Default locale: en_US, platform encoding: UTF-8 OS name: \u0026quot;linux\u0026quot;, version: \u0026quot;5.4.0-42-generic\u0026quot;, arch: \u0026quot;amd64\u0026quot;, family: \u0026quot;unix\u0026quot;  Unzip Source Code   Download Source Code\n  Unzip the source code\n unzip apache-shardingsphere-4.1.1-src.zip    Change file permissions\n chmod -R 755 apache-shardingsphere-4.1.1-src-release/    Build and Test Based the Github page Build Apache ShardingSphere, there is a script to do the build\n./mvnw clean install -Prelease   Make sure all the tests pass   Issues and Tricks  Lombok in the project not support Java 11\nIf Java 11 is set as default, this may cause the error below for Lombok does not support Java 11.   Solution\nUse Java 8.\n Multiple Java version installed\nIf multiple versions of Java are installed on the system, such as Java 11 and Java 8, in the mean time, Java 11 is set as default, the above error will cause the build failure. Even the default JDK is changed to Java 8 by update-alternatives \u0026ndash;config java, the above issue may still be there.  Solution\nUninstall all the JDKs by the command\nsudo apt-get remove openjdk*  and reinstall JDK 8.\nEclipse Import the Project Follow the steps below to import the project.\nImport projects\u0026hellip; or File \u0026mdash;\u0026gt; Import\u0026hellip;  The import is done by m2e plugin.\nThe warning shown below can be ignored.\nmaven-remote-resources-plugin (goal \u0026ldquo;process\u0026rdquo;) is ignored by m2e.   Build and Test Build and test as separate steps, i.e.\n Run As \u0026mdash;\u0026gt; Maven clean Run As \u0026mdash;\u0026gt; Maven build Run As \u0026mdash;\u0026gt; Maven test Run As \u0026mdash;\u0026gt; Maven install  Or define the goals at one time, i.e. Run As \u0026mdash;\u0026gt; Maven build\u0026hellip; \u0026mdash;\u0026gt; Goals: (clean install)  Specific module can be chosen and do the same build.\nMaven will build the dependencies automatically.   Issues and Tricks  Too many files with unapproved license\nWhen doing \u0026lsquo;install\u0026rsquo;, the below error occurs. No issue with \u0026lsquo;build\u0026rsquo; and \u0026lsquo;test\u0026rsquo;, but with \u0026lsquo;install\u0026rsquo;   [INFO] BUILD FAILURE Too many files with unapproved license\n Solution\nUse or check out clean source code, then do \u0026lsquo;install\u0026rsquo;.\n Build failed with 8 threads\nWhen setting 8 threads for build, the build failed.  Solution\nSet build threads as 1.\nIntelliJ IDEA Import the Project Follow the steps below to import the project.\nOn the Welcome window, select Import Project, then select the project POM file in the next window.  The errors and warnings of the POM file analysis can be ignored.   Build and Test As there are errors in the POM file, the tool window of Maven lifecyle may not show up automatically.\nTo add Maven support, right click on the project name in the project view, then select Add Framework Support\u0026hellip;.\nIn the Maven window, different phase of lifecyle of project or module can be chosen to build.\n Specific module can be chosen and do the build.\nMaven will build the dependencies automatically.   Links  Maven - Build Life Cycle\nIntroduction to the Build Lifecycle\nDid you find this page helpful? Consider sharing it 🙌 ","date":1596326400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1599350400,"objectID":"6935f293305b4d3f67eb45f653166f3e","permalink":"/coding/java/shardingsphere-dev-env-setup/","publishdate":"2020-08-02T00:00:00Z","relpermalink":"/coding/java/shardingsphere-dev-env-setup/","section":"coding","summary":"This documents wrote down the experience of setting up development environment for Shardingsphere.","tags":["Java","Shardingsphere","Database"],"title":"Set Up Shardingsphere Development Environment","type":"coding"},{"authors":["Hongwei Li"],"categories":["Java","Spring"],"content":"Inversion of Control (IoC) A real system might have dozens of services and components. To make a loosely coupled application, the way is to plug in the plugins (components and services) at some point. So the core problem is how to assemble the plugins into an application. Then frameworks aim to resolve the problem. Usually Inversion of Control is used in frameworks, so does Spring Framework. That\u0026rsquo;s why Inversion of Control (IoC) is the core technology of Spring Framework.\nInversion of Control (IoC) vs. Traditional Control   Traditional Control\nIn traditional programming, the custom code that expresses the purpose of the program calls into reusable libraries to take care of generic tasks.\nI.e.\nthe custom object instantiates its dependent objects, then uses the objects.\n  Inversion of Control (IoC)\nIoC inverts the flow of control as compared to traditional control flow. In IoC, custom-written portions of a computer program receive the flow of control from a generic framework. Usually it is the framework that calls into the custom, or task-specific, code.\nI.e.\nthe custom object receives the instantiated dependent objects from framework.\n  What Can IoC Serve IoC as a design guideline, is used to increase modularity of the program and make it extensible. It serves the following purposes:\n To decouple the execution of a task from implementation. To make every module focus on what it is designed for. To free modules from assumptions about how and what other systems do, and instead rely on contracts. To prevent side effects on other modules when replacing a module.  Spring Implementation of IoC Principle IoC is also known as dependency injection (DI). It is a process whereby objects define their dependencies (that is, the other objects they work with) only through constructor arguments, arguments to a factory method, or properties that are set on the object instance after it is constructed or returned from a factory method. The container then injects those dependencies when it creates the bean. This process is fundamentally the inverse (hence the name, Inversion of Control) of the bean itself controlling the instantiation or location of its dependencies by using direct construction of classes or a mechanism such as the Service Locator pattern.\nThis is common characteristic of frameworks, IoC manages java objects:\n from instantiation to destruction through its BeanFactory. Java components that are instantiated by the IoC container are called beans, and the IoC container manages a bean\u0026rsquo;s scope, lifecycle events, and any AOP features for which it has been configured and coded.   In Spring framework, the IoC Container does that job of injecting dependancies (DI) and not us, The flow of control is reversed, (Framework to Application) it is IoC with DI.   Spring IoC Container Central to the Spring Framework is its inversion of control (IoC) container, which provides a consistent means of configuring and managing Java objects using reflection. The container is responsible for managing object lifecycles of specific objects: creating these objects, calling their initialization methods, and configuring these objects by wiring them together.\nThe interface org.springframework.context.ApplicationContext represents the Spring IoC container and is responsible for instantiating, configuring, and assembling the aforementioned beans. The container gets its instructions on what objects to instantiate, configure, and assemble by reading configuration metadata.\n  Representation - org.springframework.context.ApplicationContext Responsibilities - instantiating, configuring, and assembling Beans Tool: configuration metadata    Types of IoC Containers The org.springframework.beans and org.springframework.context packages provide the basis for the Spring Framework’s IoC container.\nThe BeanFactory interface provides an advanced configuration mechanism capable of managing objects of any nature.\nThe ApplicationContext interface builds on top of the BeanFactory (it is a sub-interface) and adds other functionality such as easier integration with Spring’s AOP features, message resource handling (for use in internationalization), event propagation, and application-layer specific contexts such as the WebApplicationContext for use in web applications.\n  BeanFactory container\n The BeanFactory is the actual representation of the Spring IoC container that is responsible for containing and otherwise managing the aforementioned beans. The BeanFactory interface is the central IoC container interface in Spring. The BeanFactory API provides the underlying basis for Spring’s IoC functionality. Its specific contracts are mostly used in integration with other parts of Spring and related third-party frameworks.    ApplicationContext container\nBecause an ApplicationContext includes all the functionality of a BeanFactory, it is generally recommended over a plain BeanFactory, except for scenarios where full control over bean processing is needed.\n    In short, the BeanFactory provides the configuration framework and basic functionality, and the ApplicationContext adds more enterprise-specific functionality. The ApplicationContext is a complete superset of the BeanFactory. You should use an ApplicationContext unless you have a good reason for not doing so, with GenericApplicationContext and its subclass AnnotationConfigApplicationContext as the common implementations for custom bootstrapping.    Dependency Injection (DI) Inversion of Control is too generic a term, and thus people find it confusing. As a result with a lot of discussion with various IoC advocates, the name was settled on Dependency Injection.\nDependency injection generally means passing a dependent object as a parameter to a method, rather than having the method create the dependent object. What it means in practice is that the method does not have a direct dependency on a particular implementation; any implementation that meets the requirements can be passed as a parameter.\n The Spring IoC Container is the leading dependency injection framework.   Dependency Lookup vs. Dependency Injection Objects can be obtained by means of either dependency lookup or dependency injection.\n Dependency lookup is a pattern where a caller asks the container object for an object with a specific name or of a specific type. Dependency injection is a pattern where the container passes objects by name to other objects, via either constructors, properties, or factory methods.  The Styles of DI Dependency Injection can be done by:\n  Constructor-based dependency injection\nConstructor-based DI is accomplished by the container invoking a constructor with a number of arguments, each representing a dependency.\n public class SimpleMovieLister { // the SimpleMovieLister has a dependency on a MovieFinder private MovieFinder movieFinder; // a constructor so that the Spring container can inject a MovieFinder public SimpleMovieLister(MovieFinder movieFinder) { this.movieFinder = movieFinder; } // business logic that actually uses the injected MovieFinder is omitted... }    Setter-based dependency injection\nSetter-based DI is accomplished by the container calling setter methods on your beans after invoking a no-argument constructor or a no-argument static factory method to instantiate your bean.\n public class SimpleMovieLister { // the SimpleMovieLister has a dependency on the MovieFinder private MovieFinder movieFinder; // a setter method so that the Spring container can inject a MovieFinder public void setMovieFinder(MovieFinder movieFinder) { this.movieFinder = movieFinder; } // business logic that actually uses the injected MovieFinder is omitted... }    Constructor-based or Setter-based DI  Constructor-based and setter-based DI can be mixed Constructors for mandatory dependencies and setter methods or configuration methods for optional dependencies  Why\n Constructor injection lets you implement application components as immutable objects and ensures that required dependencies are not null. Furthermore, constructor-injected components are always returned to the client (calling) code in a fully initialized state. Setter injection should primarily only be used for optional dependencies that can be assigned reasonable default values within the class. Otherwise, not-null checks must be performed everywhere the code uses the dependency. One benefit of setter injection is that setter methods make objects of that class amenable to reconfiguration or re-injection later.   Use the DI style that makes the most sense for a particular class.   IoC vs. DI  Interchangable\nIoC and DI are used interchangeably. Process and Result\nIoC is achieved through DI. DI is the process of providing the dependencies and IoC is the end result of DI. One to Many\nDI is a specific type of IoC and is not the only way to achieve IoC. There are other ways as well, such as:  Service Locator pattern Template method design pattern Strategy design pattern      IoC basically facilitates having different components designed and coded separately and later used together by defining their relation with DI. By DI, the responsibility of creating objects is shifted from our application code to the Spring container; this phenomenon is called IoC.    Links  The IoC Container\nInversion of Control Containers and the Dependency Injection pattern\nSpring Framework\nWhat is Dependency Injection and Inversion of Control in Spring Framework?\nSpring – Inversion of Control vs Dependency Injection\nSpring – IoC Containers\nInversion of control\nWhat is Dependency Injection and Inversion of Control in Spring Framework?\nInterface BeanFactory\nInterface ApplicationContext\nThe BeanFactory\nDid you find this page helpful? Consider sharing it 🙌 ","date":1596240000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598745600,"objectID":"d5cf26ea5db4620f0e302da8f272b7c8","permalink":"/coding/java/ioc-di/","publishdate":"2020-08-01T00:00:00Z","relpermalink":"/coding/java/ioc-di/","section":"coding","summary":"A summary of Spring Inversion of Control and Dependency Injection.","tags":["Java","Spring","IoC","DI"],"title":"Inversion of Control and Dependency Injection","type":"coding"},{"authors":["Hongwei Li"],"categories":["Python","Linux"],"content":"Prerequisites  Linux host machine (i.e. Ubuntu 18.04) Vagrant (i.e. 2.9.9) VirtualBox (i.e. 6.1.12)   The version numbers are just for my environment.\nFind the original log of my setup here.   Overview The steps are:\n Use Vagrant to boot up a VM Install GUI on the VM Install Docker on the VM Install SVN Check out the branch Set up database Set up virtual environment Run the tests Start the Development Server Mailserver and Rsync Data  Step 1: Use Vagrant to boot up a VM Put the below Vagrantfile into working directory and execute \u0026lsquo;Vagrant up\u0026rsquo;. Vagrantfile\nStep 2: Install GUI on the VM Ssh to the VM,\nvagrant ssh  then use the below commands to intall GUI on the VM.\nsudo yum -y groupinstall \u0026quot;GNOME Desktop\u0026quot; echo \u0026quot;exec gnome-session\u0026quot; \u0026gt;\u0026gt; ~/.xinitrc systemctl set-default graphical.target  Use command\nstartx  in VirtualBox console to start the GUI.\nStep 3: Install Docker on the VM Install docker and start the service.\nsudo yum -y install docker sudo systemctl status docker sudo systemctl start docker sudo systemctl enable docker  Create user group \u0026lsquo;docker\u0026rsquo; and add you into the group.\nsudo groupadd docker sudo usermod -aG docker $(whoami) sudo usermod -aG docker vagrant  Reevaluate the group and restart the docker service.\nlogout sudo systemctl restart docker  Check if you can run docker commands without sudo.\ndocker info  Step 4: Install SVN Add the repository and install SVN.\nsudo vim /etc/yum.repos.d/wandisco-svn.repo   [WandiscoSVN] name=Wandisco SVN Repo baseurl=http://opensource.wandisco.com/centos/$releasever/svn-1.8/RPMS/$basearch/ enabled=1 gpgcheck=0\n sudo yum remove subversion* sudo yum clean all sudo yum install subversion svn --version  Step 5: Check out the branch UTF-8 settings:\nexport LC_ALL=C sudo vi .bashrc  Add below to the file ~/.bashrc\n LANG=en_US.UTF-8 export LANG\n Change SELinux settings, so that docker image can access your home directory.\nchcon -Rt svirt_sandbox_file_t /home/vagrant/  Checkout the branch\nmkdir -p ietf cd ietf svn co https://svn.tools.ietf.org/svn/tools/ietfdb/personal/flycoolman/7.10.1.dev0  Step 6: Set up database cd 7.10.1.dev0/ ./docker/setupdb  Step 7: Set up virtual environment ./docker/run   rsyslog error can be ignored!\n[FAIL] rsyslogd is not running \u0026hellip; failed!   In virtual environment of the container\npip install --upgrade -r requirements.txt ./ietf/manage.py migrate   The below operation might be needed if the migration fails.\nsudo cp docker/settings_local.py ietf/  Then run the migrate command again.\n  Step 8: Run the tests In the virtual environment to run the tests:\n./ietf/manage.py test \u0026ndash;settings=settings_sqlitetest\n Make sure that one of the following commands runs to completion without errors.   Step 9: Start the Development Server ./ietf/manage.py runserver 0.0.0.0:8000 \u0026amp;  Test the access to datatracker.\nStep 10: Mailserver and Rsync Data Go to the original page for details about:\n  (Optional) Run the mailserver  Manually Edit or rsync Datatracker Data Directories  Setup Complete For other workflow things, please refer to the original setup guide.\nLinks  How To Install and Use Docker on CentOS 7 How to fix docker: Got permission denied while trying to connect to the Docker daemon socket How to Install Subversion (SVN) 1.8.19 on CentOS/RHEL 7/6/5 Sprint Coder Setup\nHow to install a GUI on top of CentOS 7\nSprintCoderSetupTroubleshooting\nUpgrade to VirtualBox 6.1 and Vagrant 2.9.9 on Ubuntu 18.04\nDid you find this page helpful? Consider sharing it 🙌 ","date":1595808000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1595889600,"objectID":"7bee0e7f57f79baabed0c8f4a56d989b","permalink":"/coding/python/ietf-datatracker-environment-setup/","publishdate":"2020-07-27T00:00:00Z","relpermalink":"/coding/python/ietf-datatracker-environment-setup/","section":"coding","summary":"This guide describes the steps of setting up codesprints development environment for IETF Datatracker.","tags":["Python","Django","IETF"],"title":"IETF Datatracker Environment Setup","type":"coding"},{"authors":["Hongwei Li"],"categories":["Java","Spring"],"content":"Spring Beans  The objects that are managed by Spring IoC container   The objects that form the backbone of your application and that are managed by the Spring IoC container are called beans. A bean is an object that is instantiated, assembled, and otherwise managed by a Spring IoC container. These beans are created with the configuration metadata that you supply to the container, for example, in the form of XML  definitions.\nIn Spring, the objects that form the backbone of your application and that are managed by the Spring IoC container are called beans. A bean is an object that is instantiated, assembled, and otherwise managed by a Spring IoC container. Otherwise, a bean is simply one of many objects in your application. Beans, and the dependencies among them, are reflected in the configuration metadata used by a container.\nSpring Bean is nothing special, any object in the Spring framework that we initialize through Spring container is called Spring Bean. Any normal Java POJO class can be a Spring Bean if it’s configured to be initialized via container by providing configuration metadata information.\nSpring IoC Container   Representation - org.springframework.context.ApplicationContext Responsibilities - instantiating, configuring, and assembling Beans Tool: configuration metadata    The interface org.springframework.context.ApplicationContext represents the Spring IoC container and is responsible for instantiating, configuring, and assembling the aforementioned beans. The container gets its instructions on what objects to instantiate, configure, and assemble by reading configuration metadata.\nConfiguration Metadata  This configuration metadata represents how you as an application developer tell the Spring container to instantiate, configure, and assemble the objects in your application. The configuration metadata is represented in XML, Java annotations, or Java code. It allows you to express the objects that compose your application and the rich interdependencies between such objects. Spring configuration consists of at least one and typically more than one bean definition that the container must manage. Consumed by Spring IoC container  Spring Bean Scopes 7 scopes (Spring 4.2.x) are supported out of the box. You can also create a custom scope.\n Singleton – Only one instance of the bean will be created for each container. This is the default scope for the spring beans. While using this scope, make sure bean doesn’t have shared instance variables otherwise it might lead to data inconsistency issues. Prototype – A new instance will be created every time the bean is requested. Request – This is same as prototype scope, however it’s meant to be used for web applications. A new instance of the bean will be created for each HTTP request. Session – A new bean will be created for each HTTP session by the container. Global-session – This is used to create global session beans for Portlet applications. Application - Scopes a single bean definition to the lifecycle of a ServletContext. Only valid in the context of a web-aware Spring ApplicationContext. Websocket - Scopes a single bean definition to the lifecycle of a WebSocket. Only valid in the context of a web-aware Spring ApplicationContext.   As of Spring 3.0, a thread scope is available, but is not registered by default.     As a rule, use the prototype scope for all stateful beans and the singleton scope for stateless beans. The client code must clean up prototype-scoped objects and release expensive resources that the prototype bean(s) are holding.    5 of the above are available only if you use a web-aware ApplicationContext\n request session globalSession application websocket  Spring Singleton vs Singleton Pattern Spring’s concept of a singleton bean differs from the Singleton pattern as defined in the Gang of Four (GoF) patterns book. The GoF Singleton hard-codes the scope of an object such that one and only one instance of a particular class is created per ClassLoader.\nThe scope of the Spring singleton is best described as per container and per bean. This means that if you define one bean for a particular class in a single Spring container, then the Spring container creates one and only one instance of the class defined by that bean definition.\nSpring Bean Lifecycle Lifecycle Overview The lifecycle of any object means when \u0026amp; how it is born, how it behaves throughout its life, and when \u0026amp; how it dies. The lifecycle of Spring Beans is not different from normal beans or objects. The below picture shows the overview of the lifecycle of objects, or Spring Beans.\nAs the Spring Beans are managed by Spring IoC containers. This makes the application developers not able to control the full lifecycle of Spring Beans. But Spring provides ways to add customizations into the lifecycle of Spring Beans, such as aware interfaces and callback methods, which are added in the below picture to show the lifecycle. Aware Interfaces   BeanNameAware\nThe BeanNameAware interface is implemented by beans that need access to its name defined in the Spring container.\n import org.springframework.beans.factory.BeanNameAware; public class BeanNameAwareImpl implements BeanNameAware { @Override public void setBeanName(String s) { System.out.println(\u0026quot;Bean Name: \u0026quot; + s); } }    BeanFactoryAware\nBeans might need access to the bean factory that created it, say to call any service from the bean factory.\n import org.springframework.beans.BeansException; import org.springframework.beans.factory.BeanFactory; import org.springframework.beans.factory.BeanFactoryAware; public class BeanFactoryAwareImpl implements BeanFactoryAware { @Override public void setBeanFactory(BeanFactory beanFactory) throws BeansException { System.out.println(beanFactory.getBean(\u0026quot;fooBean\u0026quot;)); } }    ApplicationContextAware\nIn Spring beans, you might require access to the ApplicationContext. For example, if your bean needs to look up some other beans. Similarly, if your bean needs access to some application file resource in your bean or even publish some application events, you need access to the ApplicationContext.\n import org.springframework.beans.BeansException; import org.springframework.context.ApplicationContext; import org.springframework.context.ApplicationContextAware; public class ApplicationContextAwareImpl implements ApplicationContextAware { @Override public void setApplicationContext(ApplicationContext applicationContext) throws BeansException { FooBean userBean = (FooBean) applicationContext.getBean(\u0026quot;fooBean\u0026quot;); System.out.println(\u0026quot;User Id: \u0026quot; + fooBean.getFooBeanId() + \u0026quot; Bean Name :\u0026quot; + fooBean.getName()); } }    For more aware interfaces and details, go to the link Interface Aware.\nLifecycle Callbacks Callback Methods  InitializingBean and DisposableBean callback interfaces are not recommended.    Initialization callbacks\n3 options:  Annotation-based\n@PostConstruct annotation or specify a POJO initialization method XML-based\ninit-method attribute to specify the name of the method that has a void no-argument signature Java Config\ninitMethod attribute of @Bean     Destruction callbacks\n3 options:  Annotation-based\n@PreDestroy annotation or specify a generic method that is supported by bean definitions XML-Based\ndestroy-method attribute on the \u0026lt;bean/\u0026gt; Java Config\ndestroyMethod attribute of @Bean     Startup and shutdown callbacks\nThe Lifecycle interface defines the essential methods for any object that has its own lifecycle requirements (e.g. starts and stops some background process)  Callback Examples   XML-based: Custom init() and destroy() methods\nThe default init and destroy methods in bean configuration file can be defined in two ways:\n Bean local definition applicable to a single bean Global definition applicable to all beans defined in beans context  beans.xml\nLocal definition\n \u0026lt;beans\u0026gt; \u0026lt;bean id=\u0026quot;demoBean\u0026quot; class=\u0026quot;com.flycoolman.callbackdemo.DemoBean\u0026quot; init-method=\u0026quot;customInit\u0026quot; destroy-method=\u0026quot;customDestroy\u0026quot;\u0026gt;\u0026lt;/bean\u0026gt; \u0026lt;/beans\u0026gt;  Global definition\n \u0026lt;beans default-init-method=\u0026quot;customInit\u0026quot; default-destroy-method=\u0026quot;customDestroy\u0026quot;\u0026gt; \u0026lt;bean id=\u0026quot;demoBean\u0026quot; class=\u0026quot;com.flycoolman.callbackdemo.DemoBean\u0026quot;\u0026gt;\u0026lt;/bean\u0026gt; \u0026lt;/beans\u0026gt;  DemoBean.java\n package com.flycoolman.callbackdemo; public class DemoBean { public void customInit() { System.out.println(\u0026quot;Method customInit() invoked...\u0026quot;); } public void customDestroy() { System.out.println(\u0026quot;Method customDestroy() invoked...\u0026quot;); } }    Annotation-based: @PostConstruct and @PreDestroy\n  @PostConstruct annotated method will be invoked after the bean has been constructed using default constructor and just before it’s instance is returned to requesting object.\n  @PreDestroy annotated method is called just before the bean is about be destroyed inside bean container.\n package com.flycoolman.callbackdemo; import javax.annotation.PostConstruct; import javax.annotation.PreDestroy; public class DemoBean { @PostConstruct public void customInit() { System.out.println(\u0026quot;Method customInit() invoked...\u0026quot;); } @PreDestroy public void customDestroy() { System.out.println(\u0026quot;Method customDestroy() invoked...\u0026quot;); } }      Java Config\n public class Foo { public void init() { // initialization logic } public void cleanup() { // destruction logic } } @Configuration public class AppConfig { @Bean(initMethod = \u0026quot;init\u0026quot;, destroyMethod = \u0026quot;cleanup\u0026quot;) public Foo foo() { return new Foo(); }    Multiple Lifecycle Mechanisms/Execution Orders Multiple lifecycle mechanisms configured for the same bean, with different initialization methods, are called as follows:\n Methods annotated with @PostConstruct afterPropertiesSet() as defined by the InitializingBean callback interface A custom configured init() method  Destroy methods are called in the same order:\n Methods annotated with @PreDestroy destroy() as defined by the DisposableBean callback interface A custom configured destroy() method  What is Callback From Wikipedia\nIn computer programming, a callback, also known as a \u0026ldquo;call-after\u0026rdquo; function, is any executable code that is passed as an argument to other code; that other code is expected to call back (execute) the argument at a given time. This execution may be immediate as in a synchronous callback, or it might happen at a later time as in an asynchronous callback. Programming languages support callbacks in different ways, often implementing them with\n subroutines, lambda expressions, blocks, or function pointers.  For Java\nIn object-oriented programming languages without function-valued arguments, such as in Java before its 1.7 version, callbacks can be simulated by passing an instance of an abstract class or interface, of which the receiver will call one or more methods, while the calling end provides a concrete implementation. Something like below (from Stackoverflow)\npublic class Test { public static void main(String[] args) throws Exception { new Test().doWork(new Callback() { // implementing class @Override public void call() { System.out.println(\u0026quot;callback called\u0026quot;); } }); } public void doWork(Callback callback) { System.out.println(\u0026quot;doing work\u0026quot;); callback.call(); } public interface Callback { void call(); } }  Spring Bean Instantiation   Instantiation with a constructor\n \u0026lt;bean id=\u0026quot;exampleBean\u0026quot;/\u0026gt;    Instantiation with a static factory method\n \u0026lt;bean id=\u0026quot;exampleBean\u0026quot; factory-method=\u0026quot;createInstance\u0026quot;/\u0026gt;    Instantiation using an instance factory method\n \u0026lt;bean id=\u0026quot;myFactoryBean\u0026quot; class=\u0026quot;...\u0026quot;\u0026gt; \u0026lt;bean id=\u0026quot;exampleBean\u0026quot; factory-bean=\u0026quot;myFactoryBean\u0026quot; factory-method=\u0026quot;createInstance\u0026quot;\u0026gt;\u0026lt;/bean\u0026gt;    For more details, go to the link Instantiating beans.\nSpring Bean Configuration/Container Configuration XML-based XML-based configuration metadata shows these beans configured as  elements inside a top-level  element.\n  Bean Configuration with Property\n \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;beans xmlns=\u0026quot;http://www.springframework.org/schema/beans\u0026quot; xmlns:xsi=\u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot; xsi:schemaLocation=\u0026quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\u0026quot;\u0026gt; \u0026lt;!-- services --\u0026gt; \u0026lt;bean id=\u0026quot;petStore\u0026quot; class=\u0026quot;org.springframework.samples.jpetstore.services.PetStoreServiceImpl\u0026quot;\u0026gt; \u0026lt;property name=\u0026quot;accountDao\u0026quot; ref=\u0026quot;accountDao\u0026quot;/\u0026gt; \u0026lt;property name=\u0026quot;itemDao\u0026quot; ref=\u0026quot;itemDao\u0026quot;/\u0026gt; \u0026lt;!-- additional collaborators and configuration for this bean go here --\u0026gt; \u0026lt;/bean\u0026gt; \u0026lt;!-- more bean definitions for services go here --\u0026gt; \u0026lt;/beans\u0026gt;    Multiple Bean Configuration\n \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;beans xmlns=\u0026quot;http://www.springframework.org/schema/beans\u0026quot; xmlns:xsi=\u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot; xsi:schemaLocation=\u0026quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\u0026quot;\u0026gt; \u0026lt;bean id=\u0026quot;accountDao\u0026quot; class=\u0026quot;org.springframework.samples.jpetstore.dao.jpa.JpaAccountDao\u0026quot;\u0026gt; \u0026lt;!-- additional collaborators and configuration for this bean go here --\u0026gt; \u0026lt;/bean\u0026gt; \u0026lt;bean id=\u0026quot;itemDao\u0026quot; class=\u0026quot;org.springframework.samples.jpetstore.dao.jpa.JpaItemDao\u0026quot;\u0026gt; \u0026lt;!-- additional collaborators and configuration for this bean go here --\u0026gt; \u0026lt;/bean\u0026gt; \u0026lt;!-- more bean definitions for data access objects go here --\u0026gt; \u0026lt;/beans\u0026gt;    Multiple XML Files\n \u0026lt;beans\u0026gt; \u0026lt;import resource=\u0026quot;services.xml\u0026quot;/\u0026gt; \u0026lt;import resource=\u0026quot;resources/messageSource.xml\u0026quot;/\u0026gt; \u0026lt;import resource=\u0026quot;/resources/themeSource.xml\u0026quot;/\u0026gt; \u0026lt;bean id=\u0026quot;bean1\u0026quot; class=\u0026quot;...\u0026quot;/\u0026gt; \u0026lt;bean id=\u0026quot;bean2\u0026quot; class=\u0026quot;...\u0026quot;/\u0026gt; \u0026lt;/beans\u0026gt;    Annotation-based Spring 2.5 introduced support for annotation-based configuration metadata.\n Annotation injection is performed before XML injection, thus the latter configuration will override the former for properties wired through both approaches.     Implicit Registeration\n \u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt; \u0026lt;beans xmlns=\u0026quot;http://www.springframework.org/schema/beans\u0026quot; xmlns:xsi=\u0026quot;http://www.w3.org/2001/XMLSchema-instance\u0026quot; xmlns:context=\u0026quot;http://www.springframework.org/schema/context\u0026quot; xsi:schemaLocation=\u0026quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\u0026quot;\u0026gt; \u0026lt;context:annotation-config/\u0026gt; \u0026lt;/beans\u0026gt;     context:annotation-config/ only looks for annotations on beans in the same application context in which it is defined.\nThis means that, if you put context:annotation-config/ in a WebApplicationContext for a DispatcherServlet, it only checks for @Autowired beans in your controllers, and not your services.     Annotate the Method\n public class SimpleMovieLister { private MovieFinder movieFinder; @Autowired public void setMovieFinder(MovieFinder movieFinder) { this.movieFinder = movieFinder; } // ... }     @Autowired annotation can be applied to setter methods, constructors, methods with arbitrary names and/or multiple arguments, fields, etc.   For more details, go to the link Annotation-based container configuration\nJava-based (JavaConfig)   JavaConfig Overview\nStarting with Spring 3.0, many features provided by the Spring JavaConfig project became part of the core Spring Framework. Thus you can define beans external to your application classes by using Java rather than XML files. To use these new features, see the @Configuration, @Bean, @Import and @DependsOn annotations.\nJava configuration typically uses @Bean annotated methods within a @Configuration class.\nSpring JavaConfig is a product of the Spring community that provides a pure-Java approach to configuring the Spring IoC Container. While JavaConfig aims to be a feature-complete option for configuration, it can be (and often is) used in conjunction with the more well-known XML-based configuration approach.\n  @Bean Annotation\nThe @Bean annotation is used to indicate that a method instantiates, configures and initializes a new object to be managed by the Spring IoC container. For those familiar with Spring’s  XML configuration the @Bean annotation plays the same role as the  element. You can use @Bean annotated methods with any Spring @Component, however, they are most often used with @Configuration beans.\n  @Configuration Annotation\nAnnotating a class with @Configuration indicates that its primary purpose is as a source of bean definitions. Furthermore, @Configuration classes allow inter-bean dependencies to be defined by simply calling other @Bean methods in the same class. The simplest possible @Configuration class would read as follows:\n @Configuration public class AppConfig { @Bean public MyService myService() { return new MyServiceImpl(); } }    For more details, go to the link Java-based container configuration\nLinks  Spring Core Technologies - beans definition\n初识Spring —— Bean的装配（一）\n初识Spring —— Bean的装配（二）\nWhat in the world are Spring beans?\nSpring注入Bean的几种方式\nBeans, BeanFactory和ApplicationContext\nSpring IoC and Bean\nSpring Context and Bean Lifecycle callbacks: practical examples of usage\nwhat do you mean by callbacks?\nSpring Bean Lifecycle: Using Spring Aware Interfaces\nBean life cycle in Java Spring\nCallback (computer programming)\nSpring – Bean Life Cycle\nSpring Bean Lifecycle\nDid you find this page helpful? Consider sharing it 🙌 ","date":1595808000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598572800,"objectID":"53205723b49d19de04f4f98913288f9f","permalink":"/coding/java/spring-beans/","publishdate":"2020-07-27T00:00:00Z","relpermalink":"/coding/java/spring-beans/","section":"coding","summary":"A summary of Spring Beans.","tags":["Java","Spring"],"title":"Spring Beans","type":"coding"},{"authors":["Hongwei Li"],"categories":["Linux","System"],"content":"I needed to set up a development environment for this week\u0026rsquo;s IETF code sprint. As this was a very short term project, I would like to set up the environment in a VM. Instead of downloading Linux image, install it on VirtualBox or KVM, Vagrant is handy to use, particularly for development environment. I was thinking to get some new exeperience. Then CentOS 8 came up, as I have been using CentOS 7, but no CentOS 8 experience. And also I wanted the environment with GUI, so that I dould test my code on the VM directly.\nWhy to upgrade VirtualBox and Vagrant I had VirtualBox and Vagrant on my machine(Ubuntu 18.04). So it was straight forward to boot up CentOS 8 by changing the Vagrantfile.\n # -*- mode: ruby -*-\n# vi: set ft=ruby :\nVagrant.configure(\u0026ldquo;2\u0026rdquo;) do |config|\nconfig.vm.box = \u0026ldquo;centos/8\u0026rdquo;\nconfig.vm.box_check_update = false\nconfig.vm.hostname = \u0026ldquo;centos8\u0026rdquo;\nconfig.vm.provider \u0026ldquo;virtualbox\u0026rdquo; do |vb|\n# Display the VirtualBox GUI when booting the machine\nvb.gui = true\nvb.memory = \u0026ldquo;4096\u0026rdquo;\nvb.cpus = 4\nend\nend\n  Vagrantfile   After\n Vagrant up\n I could vagrant ssh to the VM and there was terminal on VirtualBox console. Everything worked well until the GUI was installed and started. I could not get into the GUI of CentOS.\nI guessed to upgrade the VirtualBox might resolve the issue, because I had VirtualBox 5.2. The latest version of VirtualBox is 6.1. So I started upgrading VirutalBox.\nUpgrade VirtualBox 6.1 To install the latest version of VirtualBox, the usual way is to download the .DEB binary package simply from VirtualBox downloads page\nwget https://download.virtualbox.org/virtualbox/6.1.12/virtualbox-6.1_6.1.12-139181~Ubuntu~bionic_amd64.deb  Install the package by dpkg\ndpkg -i virtualbox-6.1_6.1.12-139181~Ubuntu~bionic_amd64.deb sudo apt install -f  or apt\nsudo apt install ./virtualbox-6.1_6.1.12-139181~Ubuntu~bionic_amd64.deb  Upgrade Vagrant 2.9.9 To support VirtualBox 6.1, I also have to upgrade Vagrant to 2.9.9. Again download the DEB package from Vagrant release website and install with dpkg or apt.\ncurl -O https://releases.hashicorp.com/vagrant/2.2.9/vagrant_2.2.9_x86_64.deb sudo apt install ./vagrant_2.2.9_x86_64.deb  To verify that the installation was successful, run the following command which prints the Vagrant version:\nvagrant --version  Install Virtualbox-dkms When VirtualBox is upgraded, the old virtual machines might fail to open. Some error information like below:\n Failed to open a session for the virtual machine xxxxxxx.\nThe VM session was closed before any attempt to power it on.\nResult Code: NS_ERROR_FAILURE (0x80004005)\nComponent: SessionMachine\nInterface: ISession {7844aa05-b02e-4cdd-a04f-ade4a762e6b7}\n Even running the command \u0026lsquo;sudo /sbin/vboxconfig\u0026rsquo; can\u0026rsquo;t resolve the issue. the dkms package needs to be reinstalled.\ndpkg -l | grep virtualbox-dkms sudo apt-get purge virtualbox-dkms \u0026amp;\u0026amp; sudo apt-get install dkms sudo /sbin/vboxconfig  Install VirtualBox Extension Pack After the Vagrant and VirtualBox had been upgraded, unfortunately I still couldn\u0026rsquo;t make the CentOS 8 GUI working, even though I tried all the options of \u0026lsquo;Graphics Controller\u0026rsquo;. When I tried to connect the VM by RDP, I got an error message of no VirtualBox Extension Pack. Here is the step to install the VirtualBox Extension Pack.\nStep 1 Go to the virtualbox official website and download the package.\nStep 2 Double click the file, such as\n Oracle_VM_VirtualBox_Extension_Pack-6.1.12\n then follow the wizard to install.\nUnfortunately the RDP did not show me the desktop successfully either.\nInstall Vagrant Plugin vagrant-libvirt As I couldn\u0026rsquo;t make the CentOS 8 GUI working on VirtualBox with Vagrant, then I moved to Libvirt with Vagrant. But When I did \u0026lsquo;vagrant up\u0026rsquo;, got the below error.\nIt seemed that the libvirt plugin was not installed, because I installed Vagrant by DEB package, not apt. To install Vagrant Plugin vagrant-libvert, please follow the Vagrant Libvirt Provider on GitHub.\nStep 1 The packages for building needs to be installed.\napt-get build-dep vagrant ruby-libvirt apt-get install qemu libvirt-bin ebtables dnsmasq-base apt-get install libxslt-dev libxml2-dev libvirt-dev zlib1g-dev ruby-dev  Step 2 Install the plugin. vagrant plugin install vagrant-libvirt\nNon-exist Box Error I even tried some pre-built box with GUI, but the box was gone when I used the new version Vagrant.\nTerminal Mode  Bad news - I have not made the CentOS 8 GUI working on VM through Vagrant with either VirtualBox or Libvirt.   The pictures below show the successful terminal.\n The username and password for console are vagrant and vagrant.   Links  How to Install Vagrant on Ubuntu 18.04\nInstall GNOME | How to enable GUI mode | RHEL CentOS 8\nHow to install a GUI on top of CentOS 7\nRun CentOS 8 VM using Vagrant on KVM / VirtualBox / VMWare / Parallels\nDid you find this page helpful? Consider sharing it 🙌 ","date":1595462400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596499200,"objectID":"5c744afba73e60771366b4c5746fa7ff","permalink":"/linux/ubuntu-18.04-upgrade-virtualbox-vagrant/","publishdate":"2020-07-23T00:00:00Z","relpermalink":"/linux/ubuntu-18.04-upgrade-virtualbox-vagrant/","section":"linux","summary":"This guide covers how to install VirtualBox 6.1 and Vagrant 2.9.9.","tags":["Linux","VirtualBox","Vagrant","CentOS"],"title":"Upgrade to VirtualBox 6.1 and Vagrant 2.9.9 on Ubuntu 18.04","type":"linux"},{"authors":["Hongwei Li"],"categories":["Linux","System"],"content":"Symptom After the upgrade from Python 3.6 to Python 3.8:\n Ubuntu Software Center not working Can\u0026rsquo;t start terminal by Ctl+Alt+t Can\u0026rsquo;t start terminal or software Error Message - A problem occured when checking for the updates  Root cause After the Python 3 upgrade, I changed the Update-alternatives configuration. Fortunately I remembered it!\nSolution Start terminal in right click menu and change back to the original configuration of update-alternatives, as below:\nDid you find this page helpful? Consider sharing it 🙌 ","date":1595203200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1595289600,"objectID":"18250f7549931ecbbd7f97d18d19ea2b","permalink":"/linux/ubuntu-18.04-system-python-3-upgrade/","publishdate":"2020-07-20T00:00:00Z","relpermalink":"/linux/ubuntu-18.04-system-python-3-upgrade/","section":"linux","summary":"Change to update-alternatives broke Ubuntu system.","tags":["Linux","Update-alternatives","Python 3"],"title":"Ubuntu 18.04 System Python 3 Upgrade","type":"linux"},{"authors":["Hongwei Li"],"categories":["Java"],"content":"Java Beans Software Components\nJavaBeans are classes that encapsulate many objects into a single object. They are serializable, have a zero-argument constructor, and allow access to properties using getter and setter methods.\n  a Java classs serializable zero-argument constructor getter and setter    A bean is a Java class with method names that follow the JavaBeans guidelines. A bean builder tool uses introspection to examine the bean class. Based on this inspection, the bean builder tool can figure out the bean\u0026rsquo;s properties, methods, and events.\nAlmost any code can be packaged as a bean.\nThe power of JavaBeans is that you can use software components without having to write them or understand their implementation.\nJava Beans Example import java.io.Serializable; public class Car implements Serializable { //Private Properties private String color; private Boolean isCar; //Zero-argument Constructor public Car(){} //Getter and Setter public void setColor(String color) { this.color = color; } public String getColor() { return color; } public void setCar(Boolean car) { isCar = car; } //'is' for Boolean getter public Boolean isCar() { return isCar; } }  Bean Properties   Read and write property has getter and setter A read-only property has a getter method but no setter A write-only property has a setter method only Boolean property using is instead of get     Indexed Properties\nan array instead of a single value Bound Properties\nPropertyChangeListeners Constrained Properties\nVetoableChangeListeners  Bean Methods Any public method that is not part of a property definition is a bean method.\nBean Events  A bean class can fire off any type of event Method names with a specific pattern Can be used in wiring components together  BeanInfo A BeanInfo is a class that changes how your bean appears in a builder tool.\nBean Persistence Serialization A bean has the property of persistence when its properties, fields, and state information are saved to and retrieved from storage.\nAll beans must persist. To persist, must implement either of below:\n java.io.Serializable java.io.Externalizable  Any class is serializable as long as that class or a parent class implements the java.io.Serializable interface.\nExamples:\n Component String Date Vector Hashtable  Not serializable:\n Image Thread Socket InputStream  Controlling Serialization:\n Automatic serialization Customized serialization Customized file format  Long Term Persistence Long-term persistence is a model that enables beans to be saved in XML format.\nLinks  JavaBeans\nOracle\u0026rsquo;s JavaBeans tutorials\nJavaBeans specification\n初识Spring —— Bean的装配（一）\nDid you find this page helpful? Consider sharing it 🙌 ","date":1594944000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1598054400,"objectID":"1c55861fb60fd1b0ed7cd16a20839fe3","permalink":"/coding/java/javabeans/","publishdate":"2020-07-17T00:00:00Z","relpermalink":"/coding/java/javabeans/","section":"coding","summary":"A summary of Java Beans.","tags":["Java"],"title":"Java Beans","type":"coding"},{"authors":["Hongwei Li"],"categories":["Basic","Web Development"],"content":"We have the website up and running in Part-3. If you have not completed that part, please do so before continuing this part.\nPersonalize Academic website This part will include the following sections:\n Choose the right theme Set the site title Set the copyright Set the site icon Select the sections Set Google Analytics Configure the Menu Add dropdown menu Add your content  Choose the right theme Check out the available themes and choose a design you love. Set the configuration in file \u0026lsquo;site_root/config/_default/params.toml\u0026rsquo;. I leave the default as is.\ntheme = \u0026quot;minimal\u0026quot;   Replace the \u0026lsquo;site_root\u0026rsquo; with your site root directory.   Set the site title Set the title in file \u0026lsquo;site_root/config/_default/config.toml\u0026rsquo;. In my case, the \u0026lsquo;flycoolman\u0026rsquo; is used.\ntitle = \u0026quot;flycoolman\u0026quot;  Set the copyright Set the copyright in file \u0026lsquo;site_root/config/_default/config.toml\u0026rsquo;, i.e.\ncopyright = \u0026quot;\u0026amp;copy;{year} flycoolman.com All Rights Reserved\u0026quot;  Set the site icon Save your icon image named icon.png and place the image in your root assets/images/ folder, creating the assets and images folders if they don’t already exist.\nSelect the sections All the sections of the demo home page in the folder \u0026lsquo;site_root/content/home\u0026rsquo;. See the picture below:\nThere is a setting called \u0026lsquo;active\u0026rsquo; in each file/section, just set the value to \u0026lsquo;false\u0026rsquo;, if you don\u0026rsquo;t want it in your home page.\nSet Google Analytics Set the Google Analytics in file \u0026lsquo;site_root/config/_default/params.toml\u0026rsquo; with your Google Analytics Tracking ID.\ngoogle_analytics = \u0026quot;UA-123456789-6\u0026quot;   There are many parameters in the file \u0026lsquo;params.toml\u0026rsquo;, set the ones that you want. They are self-explained   Configure the Menu The Menu on Navigation bar can be configured by change the settings in file \u0026lsquo;site_root/config/_default/menus.toml\u0026rsquo;, i.e.\n Remove current one by deleting or commenting out the corresponding item Rename current one by changing the value of \u0026lsquo;name\u0026rsquo; Add new one by adding additional part of \u0026lsquo;[[main]]\u0026rsquo; Rearrange the order by changing the value of \u0026lsquo;weight\u0026rsquo;  Add dropdown menu To create a dropdown sub-menu, add identifier = \u0026ldquo;something\u0026rdquo; to the parent item and parent = \u0026ldquo;something\u0026rdquo; to the child item. The pictures below show how to add dropdown menu in file \u0026lsquo;site_root/config/_default/menus.toml\u0026rsquo;.\nAdd your content Go to the folder \u0026lsquo;site_root/content/post/\u0026rsquo;, select one post as template, write your own post. Refer to the links below for markdown syntax.\nAll set! Enjoy writing!\nLinks How-To Academic https://sourcethemes.com/academic/docs/get-started/ https://sourcethemes.com/academic/docs/page-builder/\nHow-To Markdown https://guides.github.com/features/mastering-markdown/ https://www.markdownguide.org/basic-syntax/ https://simplpost.com/markdown.html\nAdd Utterances Comment Engine https://mscipio.github.io/post/utterances-comment-engine/\nDid you find this page helpful? Consider sharing it 🙌 ","date":1594857600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594857600,"objectID":"959a089fea3c45eeae7646ae44558f1f","permalink":"/post/build-a-free-website-in-minutes-part-4/","publishdate":"2020-07-16T00:00:00Z","relpermalink":"/post/build-a-free-website-in-minutes-part-4/","section":"post","summary":"Learn how to create a static website by Hugo, GitHub Pages and Academic.","tags":["Hugo","Web Development","Static Website","Github Pages","Academic"],"title":"Build A Free Website In Minutes - Part 4","type":"post"},{"authors":["Hongwei Li"],"categories":["Basic","Web Development"],"content":"In Part-1 and Part-2 we introduced the basic knowledges of the tools to help understand how they work. From this part, we will focus on building our real website.\nPrerequisites   Download and install Git Download and install Hugo Extended Version\nPlease follow the part of \u0026lsquo;Install Hugo Extended Version\u0026rsquo; in Part-2 of this tutorial.  GitHub Repositories GitHub Pages Repository Please follow the guide on GitHub Pages to create the repository correctly.\nAcademic-kickstart Repository Go to the GitHub page of academic-kickstart and fork the repository to your GitHub account. The pictures below show the source of academic-kickstart page and the forked repository in my account.\nAcademic-kickstart source page The forked repository in my account Local Environment Step 1 - git clone \u0026lt;username\u0026gt;.github.io to local git clone https://github.com/your-user-name/your-user-name.github.io.git  Step 2 - git clone academic-kickstart to local git clone https://github.com/your-user-name/academic-kickstart.git  Step 3 - Initialize the theme cd academic-kickstart/ git submodule update --init --recursive  Step 4 - Set base url in config.toml In your config.toml file, set baseurl = \u0026ldquo;https://\u0026lt;USERNAME\u0026gt;.github.io/\u0026rdquo;, where \u0026lt;USERNAME\u0026gt; is your Github username. Stop Hugo if it’s running and delete the public directory if it exists (by typing rm -r public/).\nvi config.toml  The example for my site Step 5 - Add .github.io repository into Academic-kickstart Add .github.io repository as a submodule in a folder named \u0026lsquo;public\u0026rsquo;, replacing with your Github username.\ncd academic-kickstart/ git submodule add -f -b master https://github.com/your-user-name/your-user-name.github.io.git public  Step 6 - Remove initial index file Delete the \u0026lsquo;index.html\u0026rsquo; file in the folder of \u0026lsquo;public\u0026rsquo;, if there is one.\ncd public rm index.html  Step 7 - Build your website cd academic-kickstart/ hugo  Step 8 - Deploy to GitHub Add everything to your local git repository and push it up to your remote repository on GitHub.\ncd academic-kickstart/ cd public git add . git comment -m \u0026quot;Initial commit\u0026quot; git push cd academic-kickstart/ git add . git comment -m \u0026quot;Initial commit\u0026quot; git push  Whilst running the above commands you may be prompted for your GitHub username and password.\nOnce uploading is finished, access https://\u0026lt;USERNAME\u0026gt;.github.io in your browser, substituting with your GitHub username. You will see a page like below:\nBuild Academic Demo Like Site To initialise your site with the demo content, copy the contents of the themes/academic/exampleSite/ folder to your website root folder, overwriting existing files if necessary. The exampleSite folder contains an example config file and content to help you get started.\nStep 1 - Replace the content cd academic-kickstart/ cp -av themes/academic/exampleSite/* .  Step 2 - Build the site cd academic-kickstart/ hugo  Step 3 - Deploy to GitHub cd academic-kickstart/ cd public git add . git comment -m \u0026quot;Initial commit\u0026quot; git push cd academic-kickstart/ git add . git comment -m \u0026quot;Initial commit\u0026quot; git push  Once uploading is finished, refresh the page in your browser, the page shows like below picture.\nUp to now, we have an Academic demo-like website up and running. In next part, we will personalize the website.\nDid you find this page helpful? Consider sharing it 🙌 ","date":1594771200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594771200,"objectID":"126430cd432a7a0594468edfd0867ae1","permalink":"/post/build-a-free-website-in-minutes-part-3/","publishdate":"2020-07-15T00:00:00Z","relpermalink":"/post/build-a-free-website-in-minutes-part-3/","section":"post","summary":"Learn how to create a static website by Hugo, GitHub Pages and Academic.","tags":["Hugo","Web Development","Static Website","Github Pages","Academic"],"title":"Build A Free Website In Minutes - Part 3","type":"post"},{"authors":["Hongwei Li"],"categories":["Basic","Web Development"],"content":"To learn more about prerequisites and tools, please check out the Part-1 of this series.\nHugo Theme Step 1 - Create a new site hugo new site hello-theme  Step 2 - Download the ananke theme wget https://github.com/budparr/gohugo-theme-ananke/archive/master.zip  Step 3 - Extract that .zip file to get a “gohugo-theme-ananke-master” directory unzip master.zip  Step 4 - Rename that directory to “ananke”, and move it into the “themes/” directory mv gohugo-theme-ananke-master/ ananke/ mv ananke/ themes/ananke  Step 5 - Add the theme to the site configuration echo 'theme = \u0026quot;ananke\u0026quot;' \u0026gt;\u0026gt; config.toml  Step 6 - Add some content and change the header of the post to say draft: false hugo new posts/hello-hugo-theme-post.md vi content/posts/hello-hugo-theme-post.md  Step 7 - Check the result hugo server  Hugo Uninstall Use the below command to remove the package of Hugo\nsudo apt-get remove --auto-remove hugo   Reading package lists\u0026hellip; Done\nBuilding dependency tree\nReading state information\u0026hellip; Done\nThe following packages will be REMOVED:\nhugo\n0 upgraded, 0 newly installed, 1 to remove and 0 not upgraded.\nAfter this operation, 44.5 MB disk space will be freed.\nDo you want to continue? [Y/n] y\n(Reading database \u0026hellip; 252044 files and directories currently installed.)\nRemoving hugo (0.73.0) \u0026hellip;\ndpkg: warning: while removing hugo, directory \u0026lsquo;/usr/local/bin\u0026rsquo; not empty so not removed\n  As Academic requires Hugo extended version, that\u0026rsquo;s the reason that the standard version is uninstalled.   Hello Academic  Academic is a site builder, it is a hugo site itself.   Install Hugo Extended Version wget https://github.com/gohugoio/hugo/releases/download/v0.73.0/hugo_extended_0.73.0_Linux-64bit.deb sudo dpkg -i hugo_extended_0.73.0_Linux-64bit.deb hugo version  The output below shows the information of Hugo extended version.\n Hugo Static Site Generator v0.73.0-428907CC/extended linux/amd64 BuildDate: 2020-06-23T16:40:09Z\n Install Academic  This linke provides the different ways to install Academic. In this part, the Install with ZIP way is used.\nStep 1 - Download and extract Academic Kickstart wget https://github.com/sourcethemes/academic-kickstart/archive/master.zip unzip master.zip rm master.zip  Step 2 - Download and extract the Academic theme files from the hugo-academic-master folder to the themes/academic/ folder in Academic Kickstart wget https://github.com/gcushen/hugo-academic/archive/master.zip unzip master.zip rm master.zip\nStep 3 - Copy the hugo-academic-master folder to the themes/academic/ folder in Academic Kickstart cp -r hugo-academic-master/* academic-kickstart-master/themes/academic/  Step 4 - Check the result cd academic-kickstart-master/ hugo server  In next part, we will install everything in GitHub.\nDid you find this page helpful? Consider sharing it 🙌 ","date":1594684800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594771200,"objectID":"99b2f681b738219aa0f211441b70b44b","permalink":"/post/build-a-free-website-in-minutes-part-2/","publishdate":"2020-07-14T00:00:00Z","relpermalink":"/post/build-a-free-website-in-minutes-part-2/","section":"post","summary":"Learn how to create a static website by Hugo, GitHub Pages and Academic.","tags":["Hugo","Web Development","Static Website","Github Pages","Academic"],"title":"Build A Free Website In Minutes - Part 2","type":"post"},{"authors":["Hongwei Li"],"categories":["Basic","Web Development"],"content":"When I create this website, I find that there are no documents to walk me through each step from \u0026lsquo;Hello World\u0026rsquo; to deployment till customization. This makes me have the idea to create one and help others to understand the whole process. In this tutorial, we will use the tools GitHub Pages, Hugo and Academic.\nThis is the Part-1 of this series.\nPrerequisites Before contiduing this tutorial, you should have the basic knowledge of the following items:\n Git GitHub HTTP HTTPS DNS   If you are familiar with these and just want to build your website quickly, you can jump to Part-3.   Tools GitHub Pages  GitHub Pages is a static site hosting service that takes HTML, CSS, and JavaScript files straight from a repository on GitHub, optionally runs the files through a build process, and publishes a website.\nHugo  Hugo is a fast and modern static site generator written in Go.\nAcademic  Academic is a website builder for Hugo. Build anything with widgets and personalize your site with themes, plugins, and language packs.\nHow to Use the Tools From the brief introduction above, you have known what the tools are. Basically we will use Hugo to generate the website, personalize it with Academic, and deploy it to GitHub Pages. Now let\u0026rsquo;s put hands on it. We will start from \u0026lsquo;Hello World\u0026rsquo;.\nHello World of GitHub Pages Please follow the GitHub Pages Hello World Guide.\nHello World of Hugo Hugo official site has a quick start on macOS. But it may not install the latest version of Hugo, like on Ubuntu 18.04, the Hugo version is quite old if installing by apt. I will introduce the steps on Ubuntu 18.04 here.\nStep 1 - Install mkdir -p temp cd temp/ wget https://github.com/gohugoio/hugo/releases/download/v0.73.0/hugo_0.73.0_Linux-64bit.deb sudo dpkg -i hugo_0.73.0_Linux-64bit.deb hugo version  The output like below\n Hugo Static Site Generator v0.73.0-428907CC linux/amd64 BuildDate: 2020-06-23T16:30:43Z\n Step 2 - New Site sudo rm hugo_0.73.0_Linux-64bit.deb mkdir hugo-sites cd hugo-sites/ hugo new site hello-world  The output like below\n Congratulations! Your new Hugo site is created in /home/hongwei/temp/hugo-sites/hello-world.\nJust a few more steps and you\u0026rsquo;re ready to go:\n Download a theme into the same-named folder. Choose a theme from https://themes.gohugo.io/ or create your own with the \u0026ldquo;hugo new theme \u0026rdquo; command. Perhaps you want to add some content. You can add single files with \u0026ldquo;hugo new /.\u0026rdquo;. Start the built-in live server via \u0026ldquo;hugo server\u0026rdquo;.  Visit https://gohugo.io/ for quickstart guide and full documentation.\n Let\u0026rsquo;s see the structure of the directory\ncd hello-world tree  The output like below\nLet\u0026rsquo;s check the result\nhugo server  Now go to http://127.0.0.1:1313, you get a blank page.\nStep 3 - Hello World To ask the website to say \u0026lsquo;Hello World\u0026rsquo;, we need to add content and template.\nAdd a file named _index.md in the fold of content\ncd content/ vi _index.md  The file content\n ---\ntitle: Hello, World!\ndescription: |\nMy personal site.\n---\nWelcome to my personal site.\n Add a html template file named index.html in the fold of layouts\ncd .. cd layouts/ vi index.html cd ..  To check the result\nhugo server  Now you get the \u0026lsquo;Hello World\u0026rsquo; page.\nTo customize the website, we will discuss Hugo theme and Academic in Part-2.\nDid you find this page helpful? Consider sharing it 🙌 ","date":1594425600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1594684800,"objectID":"85a4ed785d3315b4539f9eb99f21fddb","permalink":"/post/build-a-free-website-in-minutes-part-1/","publishdate":"2020-07-11T00:00:00Z","relpermalink":"/post/build-a-free-website-in-minutes-part-1/","section":"post","summary":"Learn how to create a static website by Hugo, GitHub Pages and Academic.","tags":["Hugo","Web Development","Static Website","Github Pages","Academic"],"title":"Build A Free Website In Minutes - Part 1","type":"post"},{"authors":["Hongwei Li"],"categories":null,"content":" Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Academic  Academic | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click  PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \n A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}   Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions?  Ask\n Documentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Academic's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"/project/external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"/project/internal-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Internal Project","type":"project"},{"authors":["Hongwei Li","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":["Hongwei Li","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example conference paper","type":"publication"}]