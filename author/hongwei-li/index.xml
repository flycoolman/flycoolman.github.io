<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hongwei Li | flycoolman</title>
    <link>/author/hongwei-li/</link>
      <atom:link href="/author/hongwei-li/index.xml" rel="self" type="application/rss+xml" />
    <description>Hongwei Li</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>©2020 flycoolman.com All Rights Reserved</copyright><lastBuildDate>Sat, 31 Oct 2020 23:59:59 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu42a5118afc49636e6fda7ce5d4b48056_3366_512x512_fill_lanczos_center_2.png</url>
      <title>Hongwei Li</title>
      <link>/author/hongwei-li/</link>
    </image>
    
    <item>
      <title>Checked vs Unchecked Exceptions in Java</title>
      <link>/coding/java/checked-vs-unchecked-exceptions-in-java/</link>
      <pubDate>Sat, 31 Oct 2020 23:59:59 +0000</pubDate>
      <guid>/coding/java/checked-vs-unchecked-exceptions-in-java/</guid>
      <description>&lt;h2 id=&#34;checked-vs-unchecked-exceptions-in-java&#34;&gt;Checked vs Unchecked Exceptions in Java&lt;/h2&gt;
&lt;h3 id=&#34;exception-in-java&#34;&gt;Exception in Java&lt;/h3&gt;
&lt;h4 id=&#34;what-is-an-exception&#34;&gt;What is an Exception?&lt;/h4&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt; An exception is an event, which occurs during the execution of a program, that disrupts the normal flow of the program&amp;rsquo;s instructions.&lt;br&gt;
The general meaning of an exception is the breaching of predefined assumption of the application.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;In Java, all errors and exceptions are represented with &lt;strong&gt;Throwable&lt;/strong&gt; class. When an error occurs within a method, the method creates an object (of any subtype of Throwable) and hands it off to the runtime system. The object, called an &lt;strong&gt;exception object&lt;/strong&gt;, contains information about the error, including its type and the state of the program when the error occurred. Creating an exception object and handing it to the runtime system is called &lt;strong&gt;throwing an exception&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id=&#34;call-stack&#34;&gt;Call Stack&lt;/h4&gt;
&lt;p&gt;After a method throws an exception, the runtime system attempts to find something to handle it. The set of possible &amp;ldquo;somethings&amp;rdquo; to handle the exception is the ordered list of methods that had been called to get to the method where the error occurred. The list of methods is known as the &lt;strong&gt;call stack&lt;/strong&gt; (see the next figure).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./exceptions-callstack.gif&#34; alt=&#34;exceptions-callstack&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;exception-handler&#34;&gt;Exception Handler&lt;/h4&gt;
&lt;p&gt;The runtime system searches the call stack for a method that contains a block of code that can handle the exception. This block of code is called an exception handler. The search begins with the method in which the error occurred and proceeds through the call stack in the reverse order in which the methods were called. When an appropriate handler is found, the runtime system passes the exception to the handler. An exception handler is considered appropriate if the type of the exception object thrown matches the type that can be handled by the handler.&lt;/p&gt;
&lt;p&gt;The exception handler chosen is said to catch the exception. If the runtime system exhaustively searches all the methods on the call stack without finding an appropriate exception handler, as shown in the next figure, the runtime system (and, consequently, the program) terminates.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./Searching-the-call-stack-for-the-exception-handler.gif&#34; alt=&#34;Searching-the-call-stack-for-the-exception-handler&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;exception-handling&#34;&gt;Exception Handling&lt;/h4&gt;
&lt;p&gt;When an exception object is created in application, there are two choices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Either handle it within method&lt;/li&gt;
&lt;li&gt;Or pass it to the caller method to handle.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In reality, there are 3 basic options to react when a exception occurs at runtime:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ignore the exception&lt;/strong&gt; and let it move up the call stack to another catch block for the exception.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Catch the exception and perform required action&lt;/strong&gt; for your application. If you can not recover from the exception, rethrow it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Catch the exception and wrap it with another exception&lt;/strong&gt; which is more relevant for your application. Exception wrapping is used to avoid breaking the layer abstraction caught in the exception. You can assign the original exception to the InnerException property of the Exception object you throw. This enables the original exception to be wrapped inside a new exception (which is more relevant for your application). To understand the wrapping of an exception lets consider a method that caught an exception called IOException. You can wrap the original exception (IOException) with a application level exception called LoadingException or FailtoLoadInfoException, as examples, rather than alerting the lower-level IOException to the user.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    If an exception is not handled in the application, then it will be propagated to JVM and JVM will usually terminate the program itself.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;exception-hierarchy-in-java&#34;&gt;Exception Hierarchy in Java&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./exception-hierarchy-java.png&#34; alt=&#34;exception-hierarchy-java&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The terms &amp;ldquo;exception&amp;rdquo; and &amp;ldquo;error&amp;rdquo; are not the same.&lt;br&gt;
Whether should a general error in application be handled as Error or Exception in Java, depends on &lt;strong&gt;the context&lt;/strong&gt; in the application.&lt;/p&gt;
&lt;p&gt;In Java, exceptions are broadly categorized into two sections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Checked exceptions&lt;/strong&gt;&lt;br&gt;
Checked Exceptions are subclasses of java.lang.&lt;strong&gt;Exception&lt;/strong&gt;, i.e. IOException, SQLException, ClassNotFoundException, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Unchecked exceptions&lt;/strong&gt;.&lt;br&gt;
Unchecked Exceptions are subclasses of java.lang.&lt;strong&gt;RuntimeException&lt;/strong&gt;, i.e. NullPointerException, NumberFormatException, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;Errors&lt;/strong&gt; are serious runtime environment problems that are almost certainly not recoverable, i.e. OutOfMemoryError, LinkageError, and StackOverflowError. They generally crash you program or part of program. Only a good logging practice will help you in determining the exact causes of errors.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;checked-exceptions&#34;&gt;Checked Exceptions&lt;/h3&gt;
&lt;p&gt;The exceptions that are checked at &lt;strong&gt;compile time&lt;/strong&gt; (A.K.A.compile-time exceptions). If some code within a method throws a checked exception, then the method must either handle the exception by using &lt;strong&gt;try-catch block&lt;/strong&gt; or it must specify the exception using &lt;strong&gt;throws&lt;/strong&gt; keyword.&lt;/p&gt;
&lt;p&gt;Generally, checked exceptions denote error scenarios which are outside the immediate control of the program. They occur usually interacting with outside resources/network resources e.g. database problems, network connection errors, missing files etc.&lt;/p&gt;
&lt;h3 id=&#34;unchecked-exceptions&#34;&gt;Unchecked Exceptions&lt;/h3&gt;
&lt;p&gt;The exceptions that are &lt;strong&gt;not&lt;/strong&gt; checked at &lt;strong&gt;compiled time&lt;/strong&gt;.&lt;br&gt;
These are exceptions that do not need to be declared in a throws clause. JVM simply doesn’t force you to handle them as they are mostly generated at runtime due to programmatic errors.&lt;/p&gt;
&lt;h3 id=&#34;checked-vs-unchecked-exceptions&#34;&gt;Checked vs Unchecked Exceptions&lt;/h3&gt;
&lt;h4 id=&#34;class-definition&#34;&gt;Class definition&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Checked exceptions are subclasses of Exception class. All other Exceptions and Throwable are unchecked exceptions.&lt;/li&gt;
&lt;li&gt;RuntimeException, Error, and their subclasses are unchecked Exceptions. (From 
&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/exceptions/runtime.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Unchecked Exceptions — The Controversy&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;As the javadoc for Throwable says: &amp;ldquo;Throwable and any subclass of Throwable that is not also a subclass of either RuntimeException or Error are regarded as checked exceptions&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;compiler-check&#34;&gt;Compiler check&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Checked exceptions are forced by compiler and used to indicate exceptional conditions that are out of the control of the program (for example, I/O errors).&lt;/li&gt;
&lt;li&gt;Unchecked exceptions are occurred during runtime and used to indicate programming errors (for example, a null pointer).&lt;/li&gt;
&lt;li&gt;Compiler checks each method call and deceleration to determine whether the method throws checked exception.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;contract&#34;&gt;Contract&lt;/h4&gt;
&lt;p&gt;There&amp;rsquo;s also an important bit of information in the Java Language Specification:&lt;br&gt;
The checked exception classes named in the throws clause are part of the contract between the implementor and user of the method or constructor.&lt;/p&gt;
&lt;h4 id=&#34;experience-when-and-how&#34;&gt;Experience: When and How&lt;/h4&gt;
&lt;p&gt;The below statements are some experiences of developers. These can provide a feel on the use of checked and unchecked exceptions, though they are not so accurate or absolutely correct. In reality, this all depends on the app and specific context. Just feel it&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Checked exceptions ideally should never be used for programming errors, but absolutely should be used for resource errors and for flow control in such cases.
Throw only those exceptions which a method can not handle by any mean. Method should first try to handle it as soon as it encounters. Throw the exception only if it is not possible to handle inside method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Checked exceptions can be used when a method cannot do what its name says it does. e.g. A method named prepareSystem() which pre-populate configuration files and do some configuration using them, can declare throwing FileNotFoundException which implies that method uses configuration files from file system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rule is if a client can reasonably be expected to recover from an exception, make it a checked exception. If a client cannot do anything to recover from the exception, make it an unchecked exception.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The only time it is normally legal to shut down an application is during startup. For example, if a configuration file is missing and the application cannot do anything sensible without it, then it is legal to shut down the application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Myself, I prefer using checked exceptions as I can.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you are an API Developer (back-end developer), use checked exceptions, otherwise, use Runtime exceptions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;My rules are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if statements for business logic errors (like your code)&lt;/li&gt;
&lt;li&gt;cheched exceptions for environment errors where the application can recover&lt;/li&gt;
&lt;li&gt;uncheched exception for environment errors where there is no recovery&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Line is not always clear, but for me usually RuntimeException = programming errors, checked exceptions = external errors. This is very rough categorization though. Like others say, checked exceptions force you to handle, or at least think for a very tiny fraction of time, about it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In general I use the following rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In my components &amp;amp; libraries I only catch an exception if I intend to handle it or do something based on it. Or if I want to provide additional contextual information in an exception.&lt;/li&gt;
&lt;li&gt;I use a general try catch at the application entry point, or the highest level possible. If an exception gets here I just log it and let it fail. Ideally exceptions should never get here.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;In Effective Java by Joshua Bloch:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use checked expections for recoverable conditions and runtime exceptions for programming errors (Item 58 in 2nd edition).&lt;/li&gt;
&lt;li&gt;Avoid unnecessary use of checked exceptions (Item 59)&lt;/li&gt;
&lt;li&gt;Use exceptions only for exceptional conditions (Item 57). As others have pointed out, this case may not warrant an exception at all. Consider returning false (or perhaps a status object with details about what happened) if there is not enough credit.&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;the-controversy&#34;&gt;The Controversy&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Checked exceptions are a controversial issue in general, and in Java in particular.&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Some say checked exceptions should be eliminated completely, given the verbosity, tediousness and error-proneness they introduce.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some believe the decision to have these two types of exceptions has its plus(es). It forces the developer to think that an exception is likely to happen in this situation, so he must take measures. The API declares that it will throw exceptions and the developer sees this compile-time. It enforces compile-time safety. You should not wait until the code goes to production to discover that something might fail. Javadoc? Well, a good option to say that, but I bet no one will read the javadoc until the exception actually happens.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fundamentally the only difference between checked exceptions and unchecked exceptions is that the compiler forces you to document checked exceptions. You should be documenting any exceptions your code can throw anyway; I can&amp;rsquo;t see why anyone would be against this being statically checkable to prevent it from being stale or from any exceptions being missed out. Exceptions are part of your API whether checked or not; checked just ensures you declare your API accurately.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Like every other trade, there is a trade-off. The advantage of having the compiler do the checks means that there is no way to accidentally leak exceptions (and humans do make mistakes). If the calling code does not handle the exception, it has to leak it explicitly. This is exactly the same trade-off we get from loosely-typed vs strongly-typed languages.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;
&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/exceptions/runtime.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Unchecked Exceptions — The Controversy&lt;/a&gt;&lt;br&gt;
Because the Java programming language does not require methods to catch or to specify unchecked exceptions (RuntimeException, Error, and their subclasses), programmers may be tempted to write code that throws only unchecked exceptions or to make all their exception subclasses inherit from RuntimeException. Both of these shortcuts allow programmers to write code without bothering with compiler errors and without bothering to specify or to catch any exceptions. Although this may seem convenient to the programmer, it sidesteps the intent of the catch or specify requirement and can cause problems for others using your classes.&lt;/p&gt;
&lt;p&gt;Why did the designers decide to force a method to specify all uncaught checked exceptions that can be thrown within its scope? Any Exception that can be thrown by a method is part of the method&amp;rsquo;s public programming interface. Those who call a method must know about the exceptions that a method can throw so that they can decide what to do about them. These exceptions are as much a part of that method&amp;rsquo;s programming interface as its parameters and return value.&lt;/p&gt;
&lt;p&gt;The next question might be: &amp;ldquo;If it&amp;rsquo;s so good to document a method&amp;rsquo;s API, including the exceptions it can throw, why not specify runtime exceptions too?&amp;rdquo; Runtime exceptions represent problems that are the result of a programming problem, and as such, the API client code cannot reasonably be expected to recover from them or to handle them in any way. Such problems include arithmetic exceptions, such as dividing by zero; pointer exceptions, such as trying to access an object through a null reference; and indexing exceptions, such as attempting to access an array element through an index that is too large or too small.&lt;/p&gt;
&lt;p&gt;Runtime exceptions can occur anywhere in a program, and in a typical one they can be very numerous. Having to add runtime exceptions in every method declaration would reduce a program&amp;rsquo;s clarity. Thus, the compiler does not require that you catch or specify runtime exceptions (although you can).&lt;/p&gt;
&lt;p&gt;One case where it is common practice to throw a RuntimeException is when the user calls a method incorrectly. For example, a method can check if one of its arguments is incorrectly null. If an argument is null, the method might throw a NullPointerException, which is an unchecked exception.&lt;/p&gt;
&lt;p&gt;Generally speaking, do not throw a RuntimeException or create a subclass of RuntimeException simply because you don&amp;rsquo;t want to be bothered with specifying the exceptions your methods can throw.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the bottom line guideline: If a client can reasonably be expected to recover from an exception, make it a checked exception. If a client cannot do anything to recover from the exception, make it an unchecked exception.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;best-practices&#34;&gt;Best Practices&lt;/h3&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;If a client can reasonably be expected to recover from an exception, make it a checked exception.&lt;/li&gt;
&lt;li&gt;If a client cannot do anything to recover from the exception, make it an unchecked exception.&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;Never swallow the exception in catch block&lt;/li&gt;
&lt;li&gt;Declare the specific checked exceptions that your method can throw&lt;/li&gt;
&lt;li&gt;Do not catch the Exception class, always catch a specific exception class&lt;/li&gt;
&lt;li&gt;Never catch Throwable class&lt;/li&gt;
&lt;li&gt;Never (ever) catch Errors&lt;br&gt;
Errors are problems you will most likely never be able to handle (e.g. OutOfMemory, or other JVM issues)&lt;/li&gt;
&lt;li&gt;Always correctly wrap the exceptions in custom exceptions so that stack trace is not lost&lt;/li&gt;
&lt;li&gt;Either log the exception or throw it but never do the both&lt;/li&gt;
&lt;li&gt;Never throw any exception from finally block&lt;/li&gt;
&lt;li&gt;Always catch only those exceptions that you can actually handle&lt;/li&gt;
&lt;li&gt;Catch exceptions and handle them, don&amp;rsquo;t just throw them up the stack&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t use printStackTrace() statement or similar&lt;br&gt;
Chances are one of your users will get one of those stack traces eventually, and have exactly zero knowledge as to what to do with it.&lt;/li&gt;
&lt;li&gt;Pass all relevant information to exceptions to make them informative as much as possible&lt;br&gt;
At least rethrow an exception that explains what was happening at the time and has the caught exception inside of it.&lt;/li&gt;
&lt;li&gt;Always log exceptions for the sake of maintainability&lt;br&gt;
When starting seeing bugs, the log will assist in pointing you to the place your bug has likely started.&lt;/li&gt;
&lt;li&gt;Always include all information about an exception in single log message&lt;/li&gt;
&lt;li&gt;Use finally blocks instead of catch blocks if you are not going to handle exception&lt;/li&gt;
&lt;li&gt;Remember &amp;ldquo;Throw early catch late&amp;rdquo; principle&lt;/li&gt;
&lt;li&gt;Always clean up after handling the exception&lt;/li&gt;
&lt;li&gt;Throw only relevant exception from a method&lt;/li&gt;
&lt;li&gt;Never use exceptions for flow control in your program&lt;/li&gt;
&lt;li&gt;Validate user input to catch adverse conditions very early in request processing&lt;/li&gt;
&lt;li&gt;Always terminate the thread which it is interrupted&lt;/li&gt;
&lt;li&gt;Use template methods for repeated try-catch&lt;/li&gt;
&lt;li&gt;Document all exceptions in your application in javadoc&lt;/li&gt;
&lt;li&gt;Do something useful with the errors (logs, restarts, recoveries, etc)&lt;/li&gt;
&lt;li&gt;Use one big handler at the higher-level to manage any or all of the weird conditions arising in the code that aren&amp;rsquo;t caught at a low-level&lt;/li&gt;
&lt;li&gt;Think about validation check vs exception&lt;br&gt;
Throwing an exception is a expensive process.
&lt;ul&gt;
&lt;li&gt;NullPointerException&lt;br&gt;
Catching a NullPointerException should replaced with a graceful null-check.&lt;/li&gt;
&lt;li&gt;NumberFormatException&lt;br&gt;
Catching a NumberFormatException explicitly to avoid possible introduction of error prone code to handle different number formats.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Avoid exception handling inside loops&lt;br&gt;
If it is truly necessary implement a try/catch block arround the entire loop.&lt;/li&gt;
&lt;li&gt;Adopt a standard way of handling exceptions through try/catch/finally blocks&lt;br&gt;
This is the recommended approach to handle exceptions in managed code. Finally blocks ensure that resources are closed in the event of an exception.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Be respectful of the language and how it traditionally manages such issues. For example, don&amp;rsquo;t bring a C mindset into a Java world.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;faq&#34;&gt;FAQ&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Is RuntimeException an unchecked exception?&lt;/strong&gt;&lt;br&gt;
Yes, exactly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Why do people add class Exception in the throws clause?&lt;/strong&gt;&lt;br&gt;
Most often because people are lazy to consider what to catch and what to rethrow. Throwing Exception is a &lt;strong&gt;bad practice&lt;/strong&gt; and should be avoided.&lt;br&gt;
But it&amp;rsquo;s common when implementing frameworks, let users of the framework be able to throw any exception, e.g. the signature of the Callable interface in JSE.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Should I bubble up the exact exception or mask it using Exception?&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Yes&lt;/strong&gt; and &lt;strong&gt;No&lt;/strong&gt;.&lt;br&gt;
&lt;strong&gt;Yes&lt;/strong&gt; for bubble up the exact exception and always declare the most precise exception possible, or a list of such.&lt;br&gt;
&lt;strong&gt;No&lt;/strong&gt; for mask any exception.&lt;br&gt;
The exceptions you declare your method as capable of throwing are a part of the contract between your method and the caller. Throwing &amp;ldquo;FileNotFoundException&amp;rdquo; means that something wrong with the file, either the file name isn&amp;rsquo;t valid or the file is not there. Throwing Exception causes very difficult to find the root cuase.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Why bubble up?&lt;/strong&gt;&lt;br&gt;
Should the error be handled sooner better?&lt;br&gt;
What it means is to bubble it up to the top most responsible layer that controls the logic flow and oversees the business logic for the application. It would be impossible, for example, for the database layer to communicate to the client that something critical is missing or unresponsive. When it bubbles up to the top most server layer then it is straight forward to refresh the client&amp;rsquo;s view with a critical error message.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;How to handle exception?&lt;/strong&gt;&lt;br&gt;
Basically it depends on context of the application, such as where this code is and what you want to happen. Here are some examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If it is in the UI layer - catch it and show a warning.&lt;/li&gt;
&lt;li&gt;If it&amp;rsquo;s in the service layer - don&amp;rsquo;t catch it at all - let it bubble. Just don&amp;rsquo;t swallow the exception.&lt;/li&gt;
&lt;li&gt;If an exception occurs in most of the cases you should choose one of these:
&lt;ul&gt;
&lt;li&gt;log it and return&lt;/li&gt;
&lt;li&gt;rethrow it (declare it to be thrown by the method)&lt;/li&gt;
&lt;li&gt;construct a new exception by passing the current one in constructor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Why did the designers decide to force a method to specify all uncaught checked exceptions that can be thrown within its scope?&lt;/strong&gt;&lt;br&gt;
Any Exception that can be thrown by a method is part of the method&amp;rsquo;s public programming interface. Those who call a method must know about the exceptions that a method can throw so that they can decide what to do about them. These exceptions are as much a part of that method&amp;rsquo;s programming interface as its parameters and return value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;If it&amp;rsquo;s so good to document a method&amp;rsquo;s API, including the exceptions it can throw, why not specify runtime exceptions too?&lt;/strong&gt;&lt;br&gt;
Runtime exceptions represent problems that are the result of a programming problem, and as such, the API client code cannot reasonably be expected to recover from them or to handle them in any way. Such problems include arithmetic exceptions, such as dividing by zero; pointer exceptions, such as trying to access an object through a null reference; and indexing exceptions, such as attempting to access an array element through an index that is too large or too small.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;wrapping-exceptions&#34;&gt;Wrapping Exceptions&lt;/h3&gt;
&lt;p&gt;wrapping exceptions (checked or otherwise) has several benefits that are worth the cost:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It encourages you to think about the failure modes for the code you write.&lt;/strong&gt; Basically, you have to consider the exceptions that the code you call may throw, and in turn you&amp;rsquo;ll consider the exceptions you&amp;rsquo;ll throw for the code that calls yours.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It gives you the opportunity to add additional debugging information into the exception chain.&lt;/strong&gt; For instance, if you have a method that throws an exception on a duplicate username, you might wrap that exception with one that includes additional information about the circumstances of the failure (for example, the IP of the request that provided the dupe username) that wasn&amp;rsquo;t available to the lower-level code. The cookie trail of exceptions may help you debug a complex problem (it certainly has for me).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It lets you become implementation-independent from the lower level code.&lt;/strong&gt; If you&amp;rsquo;re wrapping exceptions and need to swap out Hibernate for some other ORM, you only have to change your Hibernate-handling code. All the other layers of code will still be successfully using the wrapped exceptions and will interpret them in the same way, even though the underlying circumstances have changed. Note that this applies even if Hibernate changes in some way (ex: they switch exceptions in a new version); it&amp;rsquo;s not just for wholesale technology replacement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It encourages you use different classes of exceptions to represent different situations.&lt;/strong&gt; For example, you may have a DuplicateUsernameException when the user tries to reuse a username, and a DatabaseFailureException when you can&amp;rsquo;t check for dupe usernames due to a broken DB connection. This, in turn, lets you answer your question (&amp;ldquo;how do I recover?&amp;quot;) in flexible and powerful ways. If you get a DuplicateUsernameException, you may decide to suggest a different username to the user. If you get a DatabaseFailureException, you may let it bubble up to the point where it displays a &amp;ldquo;down for maintenance&amp;rdquo; page to the user and send off a notification email to you. Once you have custom exceptions, you have customizeable responses &amp;ndash; and that&amp;rsquo;s a good thing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;exception-management-architecture&#34;&gt;Exception Management Architecture&lt;/h3&gt;
&lt;p&gt;The exception management architecture of an application should be capable of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Detecting exceptions&lt;/li&gt;
&lt;li&gt;Performing code clean up&lt;/li&gt;
&lt;li&gt;Wrapping one exception inside another&lt;/li&gt;
&lt;li&gt;Replacing one exception with another&lt;/li&gt;
&lt;li&gt;Logging and reporting error information&lt;/li&gt;
&lt;li&gt;Generating events that can be monitored externally to assist system operation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At the beginning of the design you must plan for a consist and robust exception management architecture. It should be well encapsulated and abstract the details of logging and reporting throughout all of your application.&lt;/p&gt;
&lt;p&gt;Once you embrace exceptions, you should find that it makes your code simpler and clearer, by moving your error handling code away from your core logic. Aim to have lots of statements in a single try block.&lt;/p&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/6115896/understanding-checked-vs-unchecked-exceptions-in-java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Understanding checked vs unchecked exceptions in Java&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://techblog.bozho.net/checked-and-unchecked-exceptions-in-java/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CHECKED AND UNCHECKED EXCEPTIONS IN JAVA&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/409563/best-practices-for-exception-management-in-java-or-c-sharp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Best practices for exception management in Java or C#&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://web.archive.org/web/20081207002838/http://www.dotnetjunkies.ddj.com/Article/197E493F-BA73-45A2-B39A-4EA282A2E562.dcik&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Best Practices: Exception Management&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/exceptions/runtime.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Unchecked Exceptions — The Controversy&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/exceptions/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lesson: Exceptions&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://howtodoinjava.com/java/exception-handling/checked-vs-unchecked-exceptions-in-java/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Checked vs Unchecked Exceptions&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.artima.com/intv/solid.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Failure and Exceptions&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://howtodoinjava.com/best-practices/java-exception-handling-best-practices/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Top 20 Java Exception Handling Best Practices&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/33497/how-do-i-recover-from-an-unchecked-exception#33564&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How do I recover from an unchecked exception?&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/27578/when-to-choose-checked-and-unchecked-exceptions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;When to choose checked and unchecked exceptions&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Manacher&#39;s Algorithm</title>
      <link>/coding/python/manachers-algorithm/</link>
      <pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate>
      <guid>/coding/python/manachers-algorithm/</guid>
      <description>&lt;h2 id=&#34;algorithm-description&#34;&gt;Algorithm Description&lt;/h2&gt;
&lt;p&gt;To find a longest palindrome in a string in linear time, an algorithm may take advantage of the following characteristics or observations about a palindrome and a sub-palindrome:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The left side of a palindrome is a mirror image of its right side.&lt;/li&gt;
&lt;li&gt;(Case 1) A third palindrome whose center is within the right side of a first palindrome will have exactly the same length as a second palindrome anchored at the mirror center on the left side, if the second palindrome is within the bounds of the first palindrome by at least one character (not meeting the left bound of the first palindrome). Such as &amp;ldquo;dacabacad&amp;rdquo;, the whole string is the first palindrome, &amp;ldquo;aca&amp;rdquo; in the left side as second palindrome, &amp;ldquo;aca&amp;rdquo; in the right side as third palindrome. In this case, the second and third palindrome have exactly the same length.&lt;/li&gt;
&lt;li&gt;(Case 2) If the second palindrome meets or extends beyond the left bound of the first palindrome, then the distance from the center of the second palindrome to the left bound of the first palindrome is exactly equal to the distance from the center of the third palindrome to the right bound of the first palindrome.&lt;/li&gt;
&lt;li&gt;To find the length of the third palindrome under Case 2, the next character after the right outermost character of the first palindrome would then be compared with its mirror character about the center of the third palindrome, until there is no match or no more characters to compare.&lt;/li&gt;
&lt;li&gt;(Case 3) Neither the first nor second palindrome provides information to help determine the palindromic length of a fourth palindrome whose center is outside the right side of the first palindrome.&lt;/li&gt;
&lt;li&gt;It is therefore desirable to have a palindrome as a reference (i.e., the role of the first palindrome) that possesses characters farthest to the right in a string when determining from left to right the palindromic length of a substring in the string (and consequently, the third palindrome in Case 2 and the fourth palindrome in Case 3 could replace the first palindrome to become the new reference).&lt;/li&gt;
&lt;li&gt;Regarding the time complexity of palindromic length determination for each character in a string: there is no character comparison for Case 1, while for Cases 2 and 3 only the characters in the string beyond the right outermost character of the reference palindrome are candidates for comparison (and consequently Case 3 always results in a new reference palindrome while Case 2 does so only if the third palindrome is actually longer than its guaranteed minimum length).&lt;/li&gt;
&lt;li&gt;For even-length palindromes, the center is at the boundary of the two characters in the middle.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;
&lt;p&gt;Manacher&amp;rsquo;s algorithm fills in a table P[i] which contains how far the palindrome centered at i extends. If P[5]=3, then three characters on either side of position five are part of the palindrome. The algorithm takes advantage of the fact that if you&amp;rsquo;ve found a long palindrome, you can fill in values of P on the right side of the palindrome quickly by looking at the values of P on the left side, since they should mostly be the same.&lt;/p&gt;
&lt;p&gt;Simply put:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;makes either odd length or even lenght as odd length only by adding a special character, which is not in the original string, to the both sides of each character in original string.&lt;/li&gt;
&lt;li&gt;utilize the mirroring charateristic of a palindrome and a sub-palindrome to fill the table p[i].&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To simplify the desciption, define:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String &lt;strong&gt;S&lt;/strong&gt; is the original string with inserted special characters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;C&lt;/strong&gt; is the center position of panlindrome &lt;strong&gt;sub(C)&lt;/strong&gt; of string S.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;L&lt;/strong&gt; is the leftmost position of sub(C).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;R&lt;/strong&gt; is the rightmost position of sub(C).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;P[i]&lt;/strong&gt; is the array to store the length of panlindrome, which has center position x.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;i&lt;/strong&gt; is the position that needs to calculate the length of panlindrom, that is to calculate &lt;strong&gt;P[i]&lt;/strong&gt; of &lt;strong&gt;sub(i)&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;j&lt;/strong&gt; is the mirroring position of i about center position C.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;P[j]&lt;/strong&gt; is the calculated/known lenght of panlindrome &lt;strong&gt;sub(j)&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;odd--even-----odd-only&#34;&gt;Odd + Even &amp;mdash;&amp;gt; Odd only&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;aba   ---&amp;gt;  #a#b#a#
abba  ---&amp;gt;  #a#b#b#a#
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;mirroring&#34;&gt;Mirroring&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;i and j are mirroring about C&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sub(i) and sub(j) are mirroring about C&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  C - j = i - C  ---&amp;gt; j = 2 * C - i
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./mirroring.png&#34; alt=&#34;mirroring&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-cases&#34;&gt;3 Cases&lt;/h3&gt;
&lt;h4 id=&#34;case-1-i--r-and-j-pj--l&#34;&gt;Case 1: i &amp;lt; R and j-P[j] &amp;gt; L&lt;/h4&gt;
&lt;p&gt;i &amp;lt; R and j-P[j] &amp;gt; L  means  whole sub(j) within left side of sub(C)&lt;br&gt;
&lt;img src=&#34;./case-1.png&#34; alt=&#34;case-1&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;j - P[j] &amp;gt; L   ---&amp;gt;   R - i &amp;gt; P[j]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Based on mirroring:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;P[i] = P[j] 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;case-2-i--r-and-j-pj--l&#34;&gt;Case 2: i &amp;lt; R and j-P[j] &amp;lt;= L&lt;/h4&gt;
&lt;p&gt;leftmost side of sub(j) is at or outside of leftmost of sub(C)
&lt;img src=&#34;./case-2.png&#34; alt=&#34;case-2&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;j - P[j] &amp;lt;= L   ---&amp;gt;   R - i &amp;lt;= P[j]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From the picture, we can see P[i] is at least R - i&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;P[i] &amp;gt;= R - i   ---&amp;gt;   P[i] = R - i as initial value of P[i] and do calculation for the part outside R and update P[i] 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Code for case 1 and case 2:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From programming convenience perspective, here make case 1 and case 2 in 1 situation i &amp;lt; R.&lt;br&gt;
length is the intermidiate variable of P[i].&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if i &amp;lt; R:
    j = 2 * C - i
    length = min(P[j], R - i)
while i + length &amp;lt; len(s) and i - length &amp;gt;= 0:
    if s[i + length] != s[i - length]:
        break
    length += 1    
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;case-3-i--r&#34;&gt;Case 3: i &amp;gt;= R&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;./case-3.png&#34; alt=&#34;case-3&#34;&gt;&lt;/p&gt;
&lt;p&gt;No shortcuts for this situation other than brute force.&lt;br&gt;
Calculate from length of 1 at the position i as the center.&lt;br&gt;
length is the intermidiate variable of P[i].&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code for case 3:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;length = 1
while i + length &amp;lt; len(s) and i - length &amp;gt;= 0:
    if s[i + length] != s[i - length]:
        break
    length += 1
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;full-implementation&#34;&gt;Full Implementation&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;def longestPalindrome(self, s: str) -&amp;gt; str:
    if not s:
        return
    
    # Using manacher&#39;s algorithm
    # abba =&amp;gt; #a#b#b#a#
    # s: original string
    # t: transformed string
    t = []
    for c in s:
        t.append(&#39;#&#39;)
        t.append(c)
    t.append(&#39;#&#39;)
    
    n = len(t)
    # p: P[i] table
    p = [0] * n
    p[0] = 1
    
    mid, longest = 0, 1
    for i in range(1, n):
        length = 1
        if mid + longest &amp;gt; i:
            mirror = mid - (i - mid)
            length = min(p[mirror], mid + longest - i)
    
        while i + length &amp;lt; len(t) and i - length &amp;gt;= 0:
            if t[i + length] != t[i - length]:
                break;
            length += 1
        
        if length &amp;gt; longest:
            longest = length
            mid = i
        
        p[i] = length
    
    # remove the extra #
    longest = longest - 1
    start = (mid - 1) // 2 - (longest - 1) // 2
    return s[start:start + longest]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;time-complexition&#34;&gt;Time Complexition&lt;/h2&gt;
&lt;p&gt;O(N)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For case 1: no comparison&lt;/li&gt;
&lt;li&gt;For case 2: take the example in below picture, i&amp;rsquo; is the following position of i.&lt;br&gt;
Even there is comparison for range X, but for the following any i&amp;rsquo;, no comparison again for range X&amp;rsquo;. So ther is no repeated comparison for the whole process.&lt;br&gt;
&lt;img src=&#34;./time-complexity.png&#34; alt=&#34;time-complexity&#34;&gt;&lt;/li&gt;
&lt;li&gt;For case 3: similar to case 2.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So the time complexity is O(N).&lt;/p&gt;
&lt;h2 id=&#34;space-complexition&#34;&gt;Space Complexition&lt;/h2&gt;
&lt;p&gt;O(N)&lt;br&gt;
Array P to store the lengths of sub-panlindrome strings.&lt;/p&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Longest_palindromic_substring#Manacher%27s_algorithm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Manacher&amp;rsquo;s algorithm&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.felix021.com/blog/read.php?2040&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Manacher&amp;rsquo;s ALGORITHM&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.jiuzhang.com/solution/longest-palindromic-substring/#tag-lang-python&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Longest Palindromic Substring&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://cp-algorithms.com/string/manacher.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Manacher&amp;rsquo;s Algorithm - Finding all sub-palindromes in O(N)&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
</description>
    </item>
    
    <item>
      <title>Kubernetes Best Practices</title>
      <link>/devops/kubernetes-best-practices/</link>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
      <guid>/devops/kubernetes-best-practices/</guid>
      <description>&lt;h2 id=&#34;kubernetes-best-practices&#34;&gt;Kubernetes Best Practices&lt;/h2&gt;
&lt;h3 id=&#34;best-practices-for-image-management&#34;&gt;Best Practices for Image Management&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Build your images you base them on only well-known and trusted image providers.&lt;/li&gt;
&lt;li&gt;Some combination of the semantic version and the SHA hash of the commit where the image was built is a good practice for naming images (e.g., v1.0.1-bfeda01f).&lt;/li&gt;
&lt;li&gt;It is a bad idea for production usage because latest is clearly being mutated every time a new image is built.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;deploying-services-best-practices&#34;&gt;Deploying Services Best Practices&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Most services should be deployed as &lt;strong&gt;Deployment resources&lt;/strong&gt;. Deployments create identical replicas for redundancy and scale.&lt;/li&gt;
&lt;li&gt;Deployments can be exposed using a Service, which is effectively a load balancer. A Service can be exposed either within a cluster (the default) or externally. If you want to expose an HTTP application, you can use an Ingress controller to add things like request routing and SSL.&lt;/li&gt;
&lt;li&gt;Eventually you will want to &lt;strong&gt;parameterize&lt;/strong&gt; your application to make its configuration more reusable in different environments. Packaging tools like 
&lt;a href=&#34;https://helm.sh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Helm&lt;/a&gt; are the best choice for this kind of parameterization.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;setting-up-a-development-environment-best-practices&#34;&gt;Setting Up a Development Environment Best Practices&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Think about developer experience in three phases: onboarding, developing, and testing. Make sure that the development environment you build supports all three of these phases.&lt;/li&gt;
&lt;li&gt;When building a development cluster, you can choose between one large cluster and a cluster per developer. There are pros and cons to each, but generally a single large cluster is a better approach.&lt;/li&gt;
&lt;li&gt;When you add users to a cluster, add them with their own identity and access to their own namespace. Use resource limits to restrict how much of the cluster they can use.&lt;/li&gt;
&lt;li&gt;When managing namespaces, think about how you can reap old, unused resources. Developers will have bad hygiene about deleting unused things. Use automation to clean it up for them.&lt;/li&gt;
&lt;li&gt;Think about cluster-level services like logs and monitoring that you can set up for all users. Sometimes, cluster-level dependencies like databases are also useful to set up on behalf of all users using templates like Helm charts.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;best-practices-for-monitoring-logging-and-alerting&#34;&gt;Best Practices for Monitoring, Logging, and Alerting&lt;/h3&gt;
&lt;p&gt;Following are the best practices that you should adopt regarding monitoring, logging, and alerting.&lt;/p&gt;
&lt;h4 id=&#34;monitoring&#34;&gt;Monitoring&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Monitor nodes and all Kubernetes components for utilization, saturation, and error rates, and monitor applications for rate, errors, and duration.&lt;/li&gt;
&lt;li&gt;Use black-box monitoring to monitor for symptoms and not predictive health of a system.&lt;/li&gt;
&lt;li&gt;Use white-box monitoring to inspect the system and its internals with instrumentation.&lt;/li&gt;
&lt;li&gt;Implement time-series-based metrics to gain high-precision metrics that also allow you to gain insight within the behavior of your application.&lt;/li&gt;
&lt;li&gt;Utilize monitoring systems like Prometheus that provide key labeling for high dimensionality; this will give a better signal to symptoms of an impacting issue.&lt;/li&gt;
&lt;li&gt;Use average metrics to visualize subtotals and metrics based on factual data. Utilize sum metrics to visualize the distribution across a specific metric.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;logging&#34;&gt;Logging&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You should use logging in combination with metrics monitoring to get the full picture of how your environment is operating.&lt;/li&gt;
&lt;li&gt;Be cautious of storing logs for more than 30 to 45 days and, if needed, use cheaper resources for long-term archiving.&lt;/li&gt;
&lt;li&gt;Limit usage of log forwarders in a sidecar pattern, as they will utilize a lot more resources. Opt for using a DaemonSet for the log forwarder and sending logs to STDOUT.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;alerting&#34;&gt;Alerting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Be cautious of alert fatigue because it can lead to bad behaviors in people and processes.&lt;/li&gt;
&lt;li&gt;Always look at incrementally improving upon alerting and accept that it will not always be perfect.&lt;/li&gt;
&lt;li&gt;Alert for symptoms that affect your SLO and customers and not for transient issues that don’t need immediate human attention.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;It’s a good practice to monitor your cluster from a “utility cluster” to avoid a production issue also affecting your monitoring system.&lt;/li&gt;
&lt;li&gt;Black-box monitoring gives you symptoms.&lt;/li&gt;
&lt;li&gt;White-box monitoring gives you &amp;ldquo;Why&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;USE&lt;/strong&gt; and &lt;strong&gt;RED&lt;/strong&gt; methods are complementary to each other given that the USE method focuses on the infrastructure components and the RED method focuses on monitoring the end-user experience for the application.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cAdvisor&lt;/strong&gt; and &lt;strong&gt;metrics server&lt;/strong&gt; are used to provide detailed metrics on resource usage, &lt;strong&gt;kube-state-metrics&lt;/strong&gt; is focused on identifying conditions on Kubernetes objects deployed to your cluster.&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;best-practices-for-configmaps-and-secrets&#34;&gt;Best Practices for ConfigMaps and Secrets&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;To support dynamic changes to your application without having to redeploy new versions of the pods, mount your ConfigMaps/Secrets as a volume and configure your application with a file watcher to detect the changed file data and reconfigure itself as needed.&lt;/li&gt;
&lt;li&gt;ConfigMap/Secrets must exist in the namespace for the pods that will consume them prior to the pod being deployed. The optional flag can be used to prevent the pods from not starting if the ConfigMap/Secret is not present.&lt;/li&gt;
&lt;li&gt;Use an admission controller to ensure specific configuration data or to prevent deployments that do not have specific configuration values set. An example would be if you require all production Java workloads to have certain JVM properties set in production environments. There is an alpha API called PodPresets that will allow ConfigMaps and secrets to be applied to all pods based on an annotation, without needing to write a custom admission controller.&lt;/li&gt;
&lt;li&gt;If you’re using Helm to release applications into your environment, you can use a life cycle hook to ensure the ConfigMap/Secret template is deployed before the Deployment is applied.&lt;/li&gt;
&lt;li&gt;Some applications require their configuration to be applied as a single file such as a JSON or YAML file. ConfigMap/Secrets allows an entire block of raw data by using the | symbol.&lt;/li&gt;
&lt;li&gt;If the application uses system environment variables to determine its configuration, you can use the injection of the ConfigMap data to create an environment variable mapping into the pod. There are two main ways to do this: mounting every key/value pair in the ConfigMap as a series of environment variables into the pod using envFrom and then using configMapRef or secretRef, or assigning individual keys with their respective values using the configMapKeyRef or secretKeyRef.&lt;/li&gt;
&lt;li&gt;If you’re using the configMapKeyRef or secretKeyRef method, be aware that if the actual key does not exist, this will prevent the pod from starting.&lt;/li&gt;
&lt;li&gt;If you’re loading all of the key/value pairs from the ConfigMap/Secret into the pod using envFrom, any keys that are considered invalid environment values will be skipped; however, the pod will be allowed to start. The event for the pod will have an event with reason InvalidVariableNames and the appropriate message about which key was skipped. The following code is an example of a Deployment with a ConfigMap and Secret reference as an environment variable&lt;/li&gt;
&lt;li&gt;If there is a need to pass command-line arguments to your containers, environment variable data can be sourced using $(ENV_KEY) interpolation syntax.&lt;/li&gt;
&lt;li&gt;When consuming ConfigMap/Secret data as environment variables, it is very important to understand that updates to the data in the ConfigMap/Secret will not update in the pod and will require a pod restart either through deleting the pods and letting the ReplicaSet controller create a new pod, or triggering a Deployment update, which will follow the proper application update strategy as declared in the Deployment specification.&lt;/li&gt;
&lt;li&gt;It is easier to assume that all changes to a ConfigMap/Secret require an update to the entire deployment; this ensures that even if you’re using environment variables or volumes, the code will take the new configuration data. To make this easier, you can use a CI/CD pipeline to update the name property of the ConfigMap/Secret and also update the reference in the deployment, which will then trigger an update through normal Kubernetes update strategies of your deployment. We will explore this in the following example code. If you’re using Helm to release your application code into Kubernetes, you can take advantage of an annotation in the Deployment template to check the sha256 checksum of the ConfigMap/Secret. This triggers Helm to update the Deployment using the helm upgrade command when the data within a ConfigMap/Secret is changed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;best-practices-specific-to-secrets&#34;&gt;Best Practices Specific to Secrets&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use 3rd party solutions to allow the use of external storage systems for secret data, such as HashiCorp Vault, Aqua Security, Twistlock, AWS Secrets Manager, Google Cloud KMS, or Azure Key Vault&lt;/li&gt;
&lt;li&gt;Assign an imagePullSecrets to a serviceaccount that the pod will use to automatically mount the secret without having to declare it in the pod.spec.&lt;/li&gt;
&lt;li&gt;Use CI/CD capabilities to get secrets from a secure vault or encrypted store with a Hardware Security Module (HSM) during the release pipeline.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rbac-best-practices&#34;&gt;RBAC Best Practices&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Applications that are developed to run in Kubernetes rarely ever need an RBAC role and role binding associated to it. Only if the application code actually interacts directly with the Kubernetes API directly does the application require RBAC configuration.&lt;/li&gt;
&lt;li&gt;If the application does need to directly access the Kubernetes API to perhaps change configuration depending on endpoints being added to a service, or if it needs to list all of the pods in a specific namespace, the best practice is to create a new service account that is then specified in the pod specification. Then, create a role that has the least amount of privileges needed to accomplish its goal.&lt;/li&gt;
&lt;li&gt;Use an OpenID Connect service that enables identity management and, if needed, two-factor authentication. This will allow for a higher level of identity authentication. Map user groups to roles that have the least amount of privileges needed to accomplish the job.&lt;/li&gt;
&lt;li&gt;Along with the aforementioned practice, you should use Just in Time (JIT) access systems to allow site reliability engineers (SREs), operators, and those who might need to have escalated privileges for a short period of time to accomplish a very specific task. Alternatively, these users should have different identities that are more heavily audited for sign-on, and those accounts should have more elevated privileges assigned by the user account or group bound to a role.&lt;/li&gt;
&lt;li&gt;Specific service accounts should be used for CI/CD tools that deploy into your Kubernetes clusters. This ensures for auditability within the cluster and an understanding of who might have deployed or deleted any objects in a cluster.&lt;/li&gt;
&lt;li&gt;Limit any applications that require watch and list on the Secrets API. This basically allows the application or the person who deployed the pod to view the secrets in that namespace. If an application needs to access the Secrets API for specific secrets, limit using get on any specific secrets that the application needs to read outside of those that it is directly assigned.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Service accounts in Kubernetes are different than user accounts in that they are namespace bound, internally stored in Kubernetes; they are meant to represent processes, not people, and are managed by native Kubernetes controllers.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;best-practices-for-cicd&#34;&gt;Best Practices for CI/CD&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;With CI, focus on automation and providing quick builds. Optimizing the build speed will provide developers quick feedback if their changes have broken the build.&lt;/li&gt;
&lt;li&gt;Focus on providing reliable tests in your pipeline. This will give developers rapid feedback on issues with their code. The faster the feedback loop to developers, the more productive they’ll become in their workflow.&lt;/li&gt;
&lt;li&gt;When deciding on CI/CD tools, ensure that the tools allow you to define the pipeline as code. This will allow you to version-control the pipeline with your application code.&lt;/li&gt;
&lt;li&gt;Ensure that you optimize your images so that you can reduce the size of the image and also reduce the attack surface when running the image in production. Multistage Docker builds allow you to remove packages not needed for the application to run. For example, you might need Maven to build the application, but you don’t need it for the actual running image.&lt;/li&gt;
&lt;li&gt;Avoid using “latest” as an image tag, and utilize a tag that can be referenced back to the buildID or Git commit.&lt;/li&gt;
&lt;li&gt;If you are new to CD, utilize Kubernetes rolling upgrades to start out. They are easy to use and will get you comfortable with deployment. As you become more comfortable and confident with CD, look at utilizing blue/green and canary deployment strategies.&lt;/li&gt;
&lt;li&gt;With CD, ensure that you test how client connections and database schema upgrades are handled in your application.&lt;/li&gt;
&lt;li&gt;Testing in production will help you build reliability into your application, and ensure that you have good monitoring in place. With testing in production, also start at a small scale and limit the blast radius of the experiment.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Including both application code and configuration code, such as a Kubernetes manifest or Helm charts, helps promote good DevOps principles of communication and collaboration. Having both application developers and operation engineers collaborate in a single repository builds confidence in a team to deliver an application to production.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;build-the-smallest-image&#34;&gt;Build the smallest image&lt;/h4&gt;
&lt;p&gt;Build the smallest image possible for your application:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multistage builds&lt;/li&gt;
&lt;li&gt;Distroless base images&lt;/li&gt;
&lt;li&gt;Optimized base images&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;container-image-tagging&#34;&gt;Container Image Tagging&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;BuildID&lt;/li&gt;
&lt;li&gt;Build System-BuildID&lt;/li&gt;
&lt;li&gt;Git Hash&lt;/li&gt;
&lt;li&gt;Githsah-buildID&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;deployment-strategies&#34;&gt;Deployment Strategies&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Rolling updates&lt;/li&gt;
&lt;li&gt;Blue/green deployments&lt;/li&gt;
&lt;li&gt;Canary deployments&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;worldwide-rollout-best-practices&#34;&gt;Worldwide Rollout Best Practices&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Distribute each image around the world. A successful rollout depends on the release bits (binaries, images, etc.) being nearby to where they will be used. This also ensures reliability of the rollout in the presence of networking slowdowns or irregularities. Geographic distribution should be a part of your automated release pipeline for guaranteed consistency.&lt;/li&gt;
&lt;li&gt;Shift as much of your testing as possible to the left by having as much extensive integration and replay testing of your application as possible. You want to start a rollout only with a release that you strongly believe to be correct.&lt;/li&gt;
&lt;li&gt;Begin a release in a canary region, which is a preproduction environment in which other teams or large customers can validate their use of your service before you begin a larger-scale rollout.&lt;/li&gt;
&lt;li&gt;Identify different characteristics of the regions where you are rolling out. Each difference can be one that causes a failure and a full or partial outage. Try to roll out to low-risk regions first.&lt;/li&gt;
&lt;li&gt;Document and practice your response to any problem or process (e.g., a rollback) that you might encounter. Trying to remember what to do in the heat of the moment is a recipe for forgetting something and making a bad problem worse.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;resource-management-best-practices&#34;&gt;Resource Management Best Practices&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Utilize pod anti-affinity to spread workloads across multiple availability zones to ensure high availability for your application.&lt;/li&gt;
&lt;li&gt;If you’re using specialized hardware, such as GPU-enabled nodes, ensure that only workloads that need GPUs are scheduled to those nodes by utilizing taints.&lt;/li&gt;
&lt;li&gt;Use NodeCondition taints to proactively avoid failing or degraded nodes.&lt;/li&gt;
&lt;li&gt;Apply nodeSelectors to your pod specifications to schedule pods to specialized hardware that you have deployed in the cluster.&lt;/li&gt;
&lt;li&gt;Before going to production, experiment with different node sizes to find a good mix of cost and performance for node types.&lt;/li&gt;
&lt;li&gt;If you’re deploying a mix of workloads with different performance characteristics, utilize node pools to have mixed node types in a single cluster.&lt;/li&gt;
&lt;li&gt;Ensure that you set memory and CPU limits for all pods deployed to your cluster.&lt;/li&gt;
&lt;li&gt;Utilize ResourceQuotas to ensure that multiple teams or applications are alotted their fair share of resources in the cluster.&lt;/li&gt;
&lt;li&gt;Implement LimitRange to set default limits and requests for pod specifications that don’t set limits or requests.&lt;/li&gt;
&lt;li&gt;Start with manual cluster scaling until you understand your workload profiles on Kubernetes. You can use autoscaling, but it comes with additional considerations around node spin-up time and cluster scale down.&lt;/li&gt;
&lt;li&gt;Use the HPA for workloads that are variable and that have unexpected spikes in their usage.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;services-in-kubernetes&#34;&gt;Services in Kubernetes&lt;/h3&gt;
&lt;p&gt;Service Types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ClusterIP&lt;/li&gt;
&lt;li&gt;NodePort&lt;/li&gt;
&lt;li&gt;ExternalName&lt;/li&gt;
&lt;li&gt;LoadBalancer&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;services-and-ingress-controllers-best-practices&#34;&gt;Services and Ingress Controllers Best Practices&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Limit the number of services that need to be accessed from outside the cluster. Ideally, most services will be ClusterIP, and only external-facing services will be exposed externally to the cluster.&lt;/li&gt;
&lt;li&gt;If the services that need to be exposed are primarily HTTP/HTTPS-based services, it is best to use an Ingress API and Ingress controller to route traffic to backing services with TLS termination. Depending on the type of Ingress controller used, features such as rate limiting, header rewrites, OAuth authentication, observability, and other services can be made available without having to build them into the applications themselves.&lt;/li&gt;
&lt;li&gt;Choose an Ingress controller that has the needed functionality for secure ingress of your web-based workloads. Standardize on one and use it across the enterprise because many of the specific configuration annotations vary between implementations and prevent the deployment code from being portable across enterprise Kubernetes implementations.&lt;/li&gt;
&lt;li&gt;Evaluate cloud service provider-specific Ingress controller options to move the infrastructure management and load of the ingress out of the cluster, but still allow for Kubernetes API configuration.&lt;/li&gt;
&lt;li&gt;When serving mostly APIs externally, evaluate API-specific Ingress controllers, such as Kong or Ambassador, that have more fine-tuning for API-based workloads. Although NGINX, Traefik, and others might offer some API tuning, it will not be as fine-grained as specific API proxy systems.&lt;/li&gt;
&lt;li&gt;When deploying Ingress controllers as pod-based workloads in Kubernetes, ensure that the deployments are designed for high availability and aggregate performance throughput. Use metrics observability to properly scale the ingress, but include enough cushion to prevent client disruptions while the workload scales.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;network-policy-best-practices&#34;&gt;Network Policy Best Practices&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Start off slow and focus on traffic ingress to pods. Complicating matters with ingress and egress rules can make network tracing a nightmare. As soon as traffic is flowing as expected, you can begin to look at egress rules to further control flow to sensitive workloads. The specification also favors ingress because it defaults many options even if nothing is entered into the ingress rules list.&lt;/li&gt;
&lt;li&gt;Ensure that the network plug-in used either has some of its own interface to the NetworkPolicy API or supports other well-known plug-ins. Example plug-ins include Calico, Cilium, Kube-router, Romana, and Weave Net.&lt;/li&gt;
&lt;li&gt;If the network team is used to having a “default-deny” policy in place, create a network policy such as the following for each namespace in the cluster that will contain workloads to be protected. This ensures that even if another network policy is deleted, no pods are accidentally “exposed”.&lt;/li&gt;
&lt;li&gt;If there are pods that need to be accessed from the internet, use a label to explicitly apply a network policy that allows ingress. Be aware of the entire flow in case the actual IP that a packet is coming from is not the internet, but the internal IP of a load balancer, firewall, or other network device. For example, to allow traffic from all (including external) sources for pods having the allow-internet=true label, do this:&lt;/li&gt;
&lt;li&gt;Try to align application workloads to single namespaces for ease of creating rules because the rules themselves are namespace specific. If cross-namespace communication is needed, try to be as explicit as possible and perhaps use specific labels to identify the flow pattern:&lt;/li&gt;
&lt;li&gt;Have a test bed namespace that has fewer restrictive policies, if any at all, to allow time to investigate the correct traffic patterns needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;service-mesh-best-practices&#34;&gt;Service Mesh Best Practices&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Rate the importance of the key features service meshes offer and determine which current offerings provide the most important features with the least amount of overhead. Overhead here is both human technical debt and infrastructure resource debt. If all that is really required is mutual TLS between certain pods, would it be easier to perhaps find a CNI that offers that integrated into the plug-in?&lt;/li&gt;
&lt;li&gt;Is the need for a cross-system mesh such as multicloud or hybrid scenarios a key requirement? Not all service meshes offer this capability, and if they do, it is a complicated process that often introduces fragility into the environment.&lt;/li&gt;
&lt;li&gt;Many of the service mesh offerings are open source community-based projects, and if the team that will be managing the environment is new to service meshes, commercially supported offerings might be a better option. There are companies that are beginning to offer commercially supported and managed service meshes based on Istio, which can be helpful because it is almost universally agreed upon that Istio is a complicated system to manage.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;podsecuritypolicy-best-practices&#34;&gt;PodSecurityPolicy Best Practices&lt;/h3&gt;
&lt;p&gt;PodSecurityPolicy is complex and can be error prone.&lt;/p&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;Proceed with caution when enabling PodSecurityPolicy because it’s potentially workload blocking if adequate preparation isn’t done at the outset.&lt;/li&gt;
&lt;li&gt;If you are enabling PodSecurityPolicy on an existing cluster with running workloads, you must create all necessary policies, service accounts, roles, and role bindings before enabling the admission controller.&lt;/li&gt;
&lt;li&gt;It’s extremely important to remember that having no PodSecurityPolicies defined will result in an implicit deny. This means that without a policy match for the workload, the pod will not be created.&lt;/li&gt;
&lt;li&gt;You should not enable PodSecurityPolicy on a live cluster without considering the warnings provided in the previous section. Proceed with caution.&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;It all comes down to RBAC. Whether you like it or not, PodSecurityPolicy is determined by RBAC. It’s this relationship that actually exposes all of the shortcomings in your current RBAC policy design. We cannot stress just how important it is to automate your RBAC and PodSecurityPolicy creation and maintenance. Specifically locking down access to service accounts is the key to using policy.&lt;/li&gt;
&lt;li&gt;Understand the policy scope. Determining how your policies will be laid out on your cluster is very important. Your policies can be cluster-wide, namespaced, or workload-specific in scope. There will always be workloads on your cluster that are part of the Kubernetes cluster operations that will need more permissive security privileges, so make sure that you have appropriate RBAC in place to stop unwanted workloads using your permissive policies.&lt;/li&gt;
&lt;li&gt;Do you want to enable PodSecurityPolicy on an existing cluster? Use this handy open source tool to generate policies based on your current resources. This is a great start. From there, you can hone your policies.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;policy-and-governance-for-your-cluster&#34;&gt;Policy and Governance for Your Cluster&lt;/h3&gt;
&lt;p&gt;Learn about &lt;strong&gt;Gatekeeper&lt;/strong&gt;&lt;br&gt;
Gatekeeper is an open source customizable Kubernetes admission webhook for cluster policy and governance. Gatekeeper takes advantage of the OPA constraint framework to enforce custom resource definition (CRD)-based policies. Using CRDs allows for an integrated Kubernetes experience that decouples policy authoring from implementation. Policy templates are referred to as constraint templates, which can be shared and reused across clusters. Gatekeeper enables resource validation and audit functionality. One of the great things about Gatekeeper is that it’s portable, which means that you can implement it on any Kubernetes clusters, and if you are already using OPA, you might be able to port that policy over to Gatekeeper.&lt;/p&gt;
&lt;h3 id=&#34;managing-multiple-clusters-best-practices&#34;&gt;Managing Multiple Clusters Best Practices&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Limit the blast radius of your clusters to ensure cascading failures don’t have a bigger impact on your applications.&lt;/li&gt;
&lt;li&gt;If you have regulatory concerns such as PCI, HIPPA, or HiTrust, think about utilizing multiclusters to ease the complexity of mixing these workloads with general workloads.&lt;/li&gt;
&lt;li&gt;If hard multitenancy is a business requirement, workloads should be deployed to a dedicated cluster.&lt;/li&gt;
&lt;li&gt;If multiple regions are needed for your applications, utilize a Global Load Balancer to manage traffic between clusters.&lt;/li&gt;
&lt;li&gt;You can break out specialized workloads such as HPC into their own individual clusters to ensure that the specialized needs for the workloads are met.&lt;/li&gt;
&lt;li&gt;If you’re deploying workloads that will be spread across multiple regional datacenters, first ensure that there is a data replication strategy for the workload. Multiple clusters across regions can be easy, but replicating data across regions can be complicated, so ensure that there is a sound strategy to handle asynchronous and synchronous workloads.&lt;/li&gt;
&lt;li&gt;Utilize Kubernetes operators like the prometheus-operator or Elasticsearch operator to handle automated operational tasks.&lt;/li&gt;
&lt;li&gt;When designing your multicluster strategy, also consider how you will do service discovery and networking between clusters. Service mesh tools like HashiCorp’s Consul or Istio can help with networking across clusters.&lt;/li&gt;
&lt;li&gt;Be sure that your CD strategy can handle multiple rollouts between regions or multiple clusters.&lt;/li&gt;
&lt;li&gt;Investigate utilizing a GitOps approach to managing multiple cluster operational components to ensure consistency between all clusters in your fleet. The GitOps approach doesn’t always work for everyone’s environment, but you should at least investigate it to ease the operational burden of multicluster environments.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;why-multiple-clusters&#34;&gt;Why Multiple Clusters?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Blast radius&lt;/li&gt;
&lt;li&gt;Compliance&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;Hard multitenancy&lt;/li&gt;
&lt;li&gt;Regional-based workloads&lt;/li&gt;
&lt;li&gt;Specialized workloads&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;multicluster-design-concerns&#34;&gt;Multicluster Design Concerns&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Data replication&lt;/li&gt;
&lt;li&gt;Service discovery&lt;/li&gt;
&lt;li&gt;Network routing&lt;/li&gt;
&lt;li&gt;Operational management&lt;/li&gt;
&lt;li&gt;Continuous deployment&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;managing-multiple-cluster-deployments&#34;&gt;Managing Multiple Cluster Deployments&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Operator&lt;/li&gt;
&lt;li&gt;GitOps&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;multicluster-management-tools&#34;&gt;Multicluster Management Tools&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Rancher&lt;br&gt;
centrally manages multiple Kubernetes clusters in a centrally managed user interface (UI).&lt;/li&gt;
&lt;li&gt;KQueen&lt;br&gt;
multitenant self-service portal for Kubernetes cluster provisioning and focuses on auditing, visibility, and security of multiple Kubernetes clusters.&lt;/li&gt;
&lt;li&gt;Gardener&lt;br&gt;
provide Kubernetes as a Service to your end users&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;kubernetes-federation&#34;&gt;Kubernetes Federation&lt;/h4&gt;
&lt;p&gt;KubeFed is not necessarily about multicluster management, but providing high availability (HA) deployments across multiple clusters. It allows you to combine multiple clusters into a single management endpoint for delivering applications on Kubernetes. For example, if you have a cluster that resides in multiple public cloud environments, you can combine these clusters into a single control plane to manage deployments to all clusters to increase the resiliency of your application.&lt;/p&gt;
&lt;h3 id=&#34;connecting-cluster-and-external-services-best-practices&#34;&gt;Connecting Cluster and External Services Best Practices&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Establish network connectivity between the cluster and on-premises. Networking can be varied between different sites, clouds, and cluster configurations, but first ensure that pods can talk to on-premises machines and vice versa.&lt;/li&gt;
&lt;li&gt;To access services outside of the cluster, you can use selector-less services and directly program in the IP address of the machine (e.g., the database) with which you want to communicate. If you don’t have fixed IP addressess, you can instead use CNAME services to redirect to a DNS name. If you have neither a DNS name nor fixed services, you might need to write a dynamic operator that periodically synchronizes the external service IP addresses with the Kubernetes Service endpoints.&lt;/li&gt;
&lt;li&gt;To export services from Kubernetes, use internal load balancers or NodePort services. Internal load balancers are typically easier to use in public cloud environments where they can be bound to the Kubernetes Service itself. When such load balancers are unavailable, NodePort services can expose the service on all of the machines in the cluster.&lt;/li&gt;
&lt;li&gt;You can achieve connections between Kubernetes clusters through a combination of these two approaches, exposing a service externally that is then consumed as a selector-less service in the other Kubernetes cluster.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;machine-leaning-on-kubernetes-best-practices&#34;&gt;Machine Leaning on Kubernetes Best Practices&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Smart scheduling and autoscaling. Given that most stages of the machine learning workflow are batch by nature, we recommend that you utilize a Cluster Autoscaler. GPU-enabled hardware is costly, and you certainly do not want to be paying for it when it’s not in use. We recommend batching jobs to run at specific times using either taints and tolerations or via a time-specific Cluster Autoscaler. That way, the cluster can scale to the needs of the machine learning workloads when needed, and not a moment sooner. Regarding taints and tolerations, upstream convention is to taint the node with the extended resource as the key. For example, a node with NVIDIA GPUs should be tainted as follows: Key: nvidia.com/gpu, Effect: NoSchedule. Using this method means that you can also utilize the ExtendedResourceToleration admission controller, which will automatically add the appropriate tolerations for such taints to pods requesting extended resources so that the users don’t need to manually add them.&lt;/li&gt;
&lt;li&gt;The truth is that model training is a delicate balance. Allowing things to move faster in one area often leads to bottlenecks in others. It’s an endeavor of constant observation and tuning. As a general rule of thumb, we recommend that you try to make the GPU become the bottleneck because it is the most costly resource. Keep your GPUs saturated. Be prepared to always be on the lookout for bottlenecks, and set up your monitoring to track the GPU, CPU, network, and storage utilization.&lt;/li&gt;
&lt;li&gt;Mixed workload clusters. Clusters that are used to run the day-to-day business services might also be used for the purposes of machine learning. Given the high performance requirements of machine learning workloads, we recommend using a separate node pool that’s tainted to accept only machine learning workloads. This will help protect the rest of the cluster from any impact from the machine learning workloads running on the machine learning node pool. Furthermore, you should consider multiple GPU-enabled node pools, each with different performance characteristics to suit the workload types. We also recommend enabling node autoscaling on the machine learning node pool(s). Use mixed mode clusters only after you have a solid understanding of the performance impact that your machine learning workloads have on your cluster.&lt;/li&gt;
&lt;li&gt;Achieving linear scaling with distributed training. This is the holy grail of distributed model training. Most libraries unfortunately don’t scale in a linear fashion when distributed. There is lots of work being done to make scaling better, but it’s important to understand the costs because this isn’t as simple as throwing more hardware at the problem. In our experience, it’s almost always the model itself and not the infrastructure supporting it that is the source of the bottleneck. It is, however, important to review the utilization of the GPU, CPU, network, and storage before pointing fingers at the model itself. Open source tools such as Horovod seek to improve distributed training frameworks and provide better model scaling.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;building-application-platforms-best-practices&#34;&gt;Building Application Platforms Best Practices&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use admission controllers to limit and modify API calls to the cluster. An admission controller can validate (and reject invalid) Kubernetes resources. A mutating admission controller can automatically modify API resources to add new sidecars or other changes that users might not even need to know about.&lt;/li&gt;
&lt;li&gt;Use kubectl plug-ins to extend the Kubernetes user experience by adding new tools to the familiar existing command-line tool. In rare occasions, a purpose-built tool might be more appropriate.&lt;/li&gt;
&lt;li&gt;When building platforms on top of Kubernetes, think carefully about the users of the platform and how their needs will evolve. Making things simple and easy to use is clearly a good goal, but if this also leads to users that are trapped and unable to be successful without rewriting everything outside of your platform, it will ultimately be a frustrating (and unsuccessful) experience.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;managing-state-and-stateful-applications&#34;&gt;Managing State and Stateful Applications&lt;/h3&gt;
&lt;h4 id=&#34;volume-best-practices&#34;&gt;Volume Best Practices&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Try to limit the use of volumes to pods requiring multiple containers that need to share data, for example adapter or ambassador type patterns. Use the emptyDir for those types of sharing patterns.&lt;/li&gt;
&lt;li&gt;Use hostDir when access to the data is required by node-based agents or services.&lt;/li&gt;
&lt;li&gt;Try to identify any services that write their critical application logs and events to local disk, and if possible change those to stdout or stderr and let a true Kubernetes-aware log aggregation system stream the logs instead of leveraging the volume map.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;kubernetes-storage-best-practices&#34;&gt;Kubernetes Storage Best Practices&lt;/h4&gt;
&lt;p&gt;Cloud native application design principles try to enforce stateless application design as much as possible; however, the growing footprint of container-based services has created the need for data storage persistence. These best practices around storage in Kubernetes in general will help to design an effective approach to providing the required storage implementations to the application design:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If possible, enable the DefaultStorageClass admission plug-in and define a default storage class. Many times, Helm charts for applications that require PersistentVolumes default to a default storage class for the chart, which allows the application to be installed without too much modification.&lt;/li&gt;
&lt;li&gt;When designing the architecture of the cluster, either on-premises or in a cloud provider, take into consideration zone and connectivity between the compute and data layers using the proper labels for both nodes and PersistentVolumes, and using affinity to keep the data and workload as close as possible. The last thing you want is a pod on a node in zone A trying to mount a volume that is attached to a node in zone B.&lt;/li&gt;
&lt;li&gt;Consider very carefully which workloads require state to be maintained on disk. Can that be handled by an outside service like a database system or, if running in a cloud provider, by a hosted service that is API consistent with currently used APIs, say a mongoDB or mySQL as a service?&lt;/li&gt;
&lt;li&gt;Determine how much effort would be involved in modifying the application code to be more stateless.&lt;/li&gt;
&lt;li&gt;While Kubernetes will track and mount the volumes as workloads are scheduled, it does not yet handle redundancy and backup of the data that is stored in those volumes. The CSI specification has added an API for vendors to plug in native snapshot technologies if the storage backend can support it.&lt;/li&gt;
&lt;li&gt;Verify the proper life cycle of the data that volumes will hold. By default the reclaim policy is set to for dynamically provisioned persistentVolumes which will delete the volume from the backing storage provider when the pod is deleted. Sensitive data or data that can be used for forensic analysis should be set to reclaim.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;statefulset-and-operator-best-practices&#34;&gt;StatefulSet and Operator Best Practices&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The decision to use Statefulsets should be taken judiciously because usually stateful applications require much deeper management that the orchestrator cannot really manage well yet (read the “Operators” section for the possible future answer to this deficiency in Kubernetes).&lt;/li&gt;
&lt;li&gt;The headless Service for the StatefulSet is not automatically created and must be created at deployment time to properly address the pods as individual nodes.&lt;/li&gt;
&lt;li&gt;When an application requires ordinal naming and dependable scaling, it does not always mean it requires the assignment of PersistentVolumes.&lt;/li&gt;
&lt;li&gt;If a node in the cluster becomes unresponsive, any pods that are part of a StatefulSet are not not automatically deleted; they instead will enter a Terminating or Unkown state after a grace period. The only way to clear this pod is to remove the node object from the cluster, the kubelet beginning to work again and deleting the pod directly, or an Operator force deleting the pod. The force delete should be the last option and great care should be taken that the node that had the deleted pod does not come back online, because there will now be two pods with the same name in the cluster. You can use kubectl delete pod nginx-0 &amp;ndash;grace-period=0 &amp;ndash;force to force delete the pod.&lt;/li&gt;
&lt;li&gt;Even after force deleting a pod, it might stay in an Unknown state, so a patch to the API server will delete the entry and cause the StatefulSet controller to create a new instance of the deleted pod: kubectl patch pod nginx-0 -p &amp;lsquo;{&amp;lsquo;metadata&amp;rsquo;:{&amp;lsquo;finalizers&amp;rsquo;:null}}&amp;rsquo;.&lt;/li&gt;
&lt;li&gt;If you’re running a complex data system with some type of leader election or data replication confirmation processes, use preStop hook to properly close any connections, force leader election, or verify data synchronization before the pod is deleted using a graceful shutdown process.&lt;/li&gt;
&lt;li&gt;When the application that requires stateful data is a complex data management system, it might be worth a look to determine whether an Operator exists to help manage the more complicated life cycle components of the application. If the application is built in-house, it might be worth investigating whether it would be useful to package the application as an Operator to add additional manageability to the application. Look at the CoreOS Operator SDK for an example.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;replicaset-vs-statefulsets&#34;&gt;ReplicaSet vs. StatefulSets&lt;/h4&gt;
&lt;p&gt;ReplicaSet:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pods in a ReplicaSet are scaled out and assigned random names when scheduled.&lt;/li&gt;
&lt;li&gt;Pods in a ReplicaSet are scaled down in an arbitrary manner.&lt;/li&gt;
&lt;li&gt;Pods in a ReplicaSet are never called directly through their name or IP address but through their association with a Service.&lt;/li&gt;
&lt;li&gt;Pods in a ReplicaSet can be restarted and moved to another node at any time.&lt;/li&gt;
&lt;li&gt;Pods in a ReplicaSet that have a PersistentVolume mapped are linked only by the claim, but any new pod with a new name can take over the claim if needed when - rescheduled.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;StatefulSets:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pods in a StatefulSet are scaled out and assigned sequential names. As the set scales up, the pods get ordinal names, and by default a new pod must be fully - online (pass its liveness and/or readiness probes) before the next pod is added.  -&lt;/li&gt;
&lt;li&gt;Pods in a StatefulSet are scaled down in reverse sequence.  -&lt;/li&gt;
&lt;li&gt;Pods in a StatefulSet can be addressed individually by name behind a headless Service.  -&lt;/li&gt;
&lt;li&gt;Pods in a StatefulSet that require a volume mount must use a defined PersistentVolume template. Volumes claimed by pods in a StatefulSet are not deleted when the StatefulSet is deleted.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;admission-control-best-practices&#34;&gt;Admission Control Best Practices&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Admission plug-in ordering doesn’t matter.&lt;/li&gt;
&lt;li&gt;Don’t mutate the same fields. Configuring multiple mutating admission webhooks also presents challenges.&lt;/li&gt;
&lt;li&gt;Fail open/fail closed. You might recall seeing the failurePolicy field as part of both the mutating and validating webhook configuration resources. This field defines how the API server should proceed in the case where the admission webhooks have access issues or encounter unrecognized errors. You can set this field to either Ignore or Fail. Ignore essentially fails to open, meaning that processing of the request will continue, whereas Fail denies the entire request. This might seem obvious, but the implications in both cases require consideration. Ignoring a critical admission webhook could result in policy that the business relies on not being applied to a resource without the user knowing.&lt;br&gt;
One potential solution to protect against this would be to raise an alert when the API server logs that it cannot reach a given admission webhook. Fail can be even more devastating by denying all requests if the admission webhook is experiencing issues. To protect against this you can scope the rules to ensure that only specific resource requests are set to the admission webhook. As a tenet, you should never have any rules that apply to all resources in the cluster.&lt;/li&gt;
&lt;li&gt;If you have written your own admission webhook, it’s important to remember that user/system requests can be directly affected by the time it takes for your admission webhook to make a decision and respond. All admission webhook calls are configured with a 30-second timeout, after which time the failurePolicy takes effect. Even if it takes several seconds for your admission webhook to make an admit/deny decision, it can severely affect user experience when working with the cluster. Avoid having complex logic or relying on external systems such as databases in order to process the admit/deny logic.&lt;/li&gt;
&lt;li&gt;Scoping admission webhooks. There is an optional field that allows you to scope the namespaces in which the admission webhooks operate on via the NamespaceSelector field. This field defaults to empty, which matches everything, but can be used to match namespace labels via the use of the matchLabels field. We recommend that you always use this field because it allows for an explicit opt-in per namespace.&lt;/li&gt;
&lt;li&gt;The kube-system namespace is a reserved namespace that’s common across all Kubernetes clusters. It’s where all system-level services operate. We recommend never running admission webhooks against the resources in this namespace specifically, and you can achieve this by using the NamespaceSelector field and simply not matching the kube-system namespace. You should also consider it on any system-level namespaces that are required for cluster operation.&lt;/li&gt;
&lt;li&gt;Lock down admission webhook configurations with RBAC. Now that you know about all the fields in the admission webhook configuration, you have probably thought of a really simple way to break access to a cluster. It goes without saying that the creation of both a MutatingWebhookConfiguration and ValidatingWebhookConfiguration is a root-level operation on the cluster and must be locked down appropriately using RBAC. Failure to do so can result in a broken cluster or, even worse, an injection attack on your application workloads.&lt;/li&gt;
&lt;li&gt;Don’t send sensitive data. Admission webhooks are essentially black boxes that accept AdmissionRequests and output AdmissionResponses. How they store and manipulate the request is opaque to the user. It’s important to think about what request payloads you are sending to the admission webhook. In the case of Kubernetes secrets or ConfigMaps, they might contain sensitive information and require strong guarantees about how that information is stored and shared. Sharing these resources with an admission webhook can leak sensitive information, which is why you should scope your resource rules to the minimum resource needed to validate and/or mutate.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;authorization&#34;&gt;Authorization&lt;/h3&gt;
&lt;p&gt;In Kubernetes, the authorization of each request is performed after authentication but before admission.&lt;br&gt;
Unlike admission controllers, if a single authorization module admits the request, the request can proceed. Only for the case in which all modules deny the request will an error be returned to the user.&lt;/p&gt;
&lt;h4 id=&#34;authorization-modules&#34;&gt;Authorization Modules&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Attribute-Based Access Control (ABAC)&lt;br&gt;
Allows authorization policy to be configured via local files&lt;/li&gt;
&lt;li&gt;RBAC&lt;br&gt;
Allows authorization policy to be configured via the Kubernetes API&lt;/li&gt;
&lt;li&gt;Webhook&lt;br&gt;
Allows the authorization of a request to be handled via a remote REST endpoint&lt;/li&gt;
&lt;li&gt;Node&lt;br&gt;
Specialized authorization module that authorizes requests from kubelets&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;authorization-best-practices&#34;&gt;Authorization Best Practices&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Given that the ABAC policies need to be placed on the filesystem of each master node and kept synchronized, we generally recommend against using ABAC in multimaster clusters. The same can be said for the webhook module because the configuration is based on a file and a corresponding flag being present. Furthermore, changes to these policies in the files require a restart of the API server to take effect, which is effectively a control-plane outage in a single master cluster or inconsistent configuration in a multimaster cluster. Given these details, we recommend using only the RBAC module for user authorization because the rules are configured and stored in Kubernetes itself.&lt;/li&gt;
&lt;li&gt;Webhook modules, although powerful, are potentially very dangerous. Given that every request is subject to the authorization process, a failure of a webhook service would be devastating for a cluster. Therefore, we generally recommend not using external authorization modules unless you completely vet and are comfortable with your cluster failure modes if the webhook service becomes unreachable or unavailable.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Please refer to &lt;a href=&#34;https://www.amazon.com/Kubernetes-Best-Practices-Blueprints-Applications/dp/1492056472/ref=sr_1_3?crid=22K492WLGAPTP&amp;amp;dchild=1&amp;amp;keywords=kubernetes+best+practices&amp;amp;qid=1602558033&amp;amp;sprefix=Kubernetes+Best+Practices%2Caps%2C176&amp;amp;sr=8-3&#34;&gt;the book&lt;/a&gt; for details.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.amazon.com/Kubernetes-Best-Practices-Blueprints-Applications/dp/1492056472/ref=sr_1_3?crid=22K492WLGAPTP&amp;amp;dchild=1&amp;amp;keywords=kubernetes&amp;#43;best&amp;#43;practices&amp;amp;qid=1602558033&amp;amp;sprefix=Kubernetes&amp;#43;Best&amp;#43;Practices%2Caps%2C176&amp;amp;sr=8-3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Best Practices: Blueprints for Building Successful Applications on Kubernetes&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>-- Latest and Updated Posts -- </title>
      <link>/post/latest-and-updates/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/post/latest-and-updates/</guid>
      <description>&lt;h2 id=&#34;the-latest-and-updated-posts&#34;&gt;The Latest and Updated Posts&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://flycoolman.com/coding/python&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Coding-Python&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://flycoolman.com/coding/java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Coding-Java&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://flycoolman.com/coding/go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Coding-Go&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://flycoolman.com/coding/javascript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Coding-Javascript&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://flycoolman.com/linux&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linux&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://flycoolman.com/devops&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DevOps | SRE&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://flycoolman.com/networking&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Networking&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://flycoolman.com/courses&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Courses&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>/devops/docker/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/devops/docker/</guid>
      <description>&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;
&lt;h3 id=&#34;what-is-docker&#34;&gt;What is Docker?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; is basically a container engine which uses the Linux Kernel features like &lt;strong&gt;namespaces&lt;/strong&gt; and &lt;strong&gt;control groups&lt;/strong&gt; to create containers on top of an operating system and automates application deployment on the container. Docker uses &lt;strong&gt;Copy-on-write union file system&lt;/strong&gt; for its &lt;strong&gt;backend storage&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;what-is-the-difference-between-a-docker-container-and-a-docker-image&#34;&gt;What is the difference between a docker container and a docker image?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Docker Image&lt;/strong&gt; is a set of files which has no state, whereas &lt;strong&gt;Docker Container&lt;/strong&gt; is the instantiation of Docker Image. In other words, Docker Container is the &lt;strong&gt;run time instance&lt;/strong&gt; of images.&lt;/p&gt;
&lt;h3 id=&#34;what-is-a-container&#34;&gt;What is a container?&lt;/h3&gt;
&lt;p&gt;In 4 bullet points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Containers share the host kernel&lt;/li&gt;
&lt;li&gt;Containers use the kernel ability to group processes for resource control&lt;/li&gt;
&lt;li&gt;Containers ensure isolation through namespaces&lt;/li&gt;
&lt;li&gt;Containers feel like lightweight VMs (lower footprint, faster), but are not Virtual Machines!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;namespaces-and-cgroups----------------docker&#34;&gt;Namespaces and Cgroups  - - - - - - &amp;gt;  Docker&lt;/h3&gt;
&lt;p&gt;Docker makes use of kernel &lt;strong&gt;namespaces&lt;/strong&gt; to provide the &lt;strong&gt;isolated workspace&lt;/strong&gt; called the container.&lt;br&gt;
Docker also makes use of kernel &lt;strong&gt;control groups&lt;/strong&gt; for resource allocation and isolation.&lt;br&gt;
&lt;img src=&#34;./namespace.png&#34; alt=&#34;namespace&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;container-format&#34;&gt;Container Format&lt;/h3&gt;
&lt;p&gt;Docker Engine combines the &lt;strong&gt;namespaces&lt;/strong&gt;, &lt;strong&gt;control groups&lt;/strong&gt; and &lt;strong&gt;UnionFS&lt;/strong&gt; into a wrapper called a container format. The default container format is &lt;strong&gt;libcontainer&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;types-of-containers&#34;&gt;Types of Containers&lt;/h3&gt;
&lt;p&gt;Given the above constructs, containers may be divided into 3 types as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;System Containers&lt;/strong&gt; share rootfs, PID, network, IPC and UTS with host system but live inside a cgroup.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Application Containers&lt;/strong&gt; live inside a cgroup and use namespaces (PID, network, IPC, chroot) for isolation from host system&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pods&lt;/strong&gt; use namespaces for isolation from host system but create sub groups which share PID, network, IPC and UTS except the rootfs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;images--layers&#34;&gt;Images &amp;amp; Layers&lt;/h3&gt;
&lt;p&gt;Each Docker image references a list of &lt;strong&gt;read-only layers&lt;/strong&gt; that represent filesystem differences. Layers are stacked on top of each other to form a base for a container’s rootfs.&lt;br&gt;
One big innovation of the Docker engine was the concept of leveraging Copy-On-Write file systems to significantly speed up the preparation of the rootfs.&lt;/p&gt;
&lt;h3 id=&#34;copy-on-write&#34;&gt;Copy-On-Write&lt;/h3&gt;
&lt;p&gt;When &lt;strong&gt;Docker&lt;/strong&gt; creates a container, it &lt;strong&gt;adds a new, thin, writable layer&lt;/strong&gt; on top of the underlying stack of image layers. This layer is often called the “container layer”.&lt;br&gt;
All changes made to the running container - such as writing new files, modifying existing files, and deleting files - are written to this thin writable container layer.&lt;/p&gt;
&lt;h3 id=&#34;union-file-systems&#34;&gt;Union File Systems&lt;/h3&gt;
&lt;p&gt;Union File Systems provide the following features for storage:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Layering&lt;/li&gt;
&lt;li&gt;Copy-On-Write&lt;/li&gt;
&lt;li&gt;Caching&lt;/li&gt;
&lt;li&gt;Diffing&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dangling-images&#34;&gt;Dangling images&lt;/h3&gt;
&lt;p&gt;Docker images consist of multiple layers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dangling images&lt;/strong&gt; are layers that have no relationship to any tagged images.&lt;/li&gt;
&lt;li&gt;They no longer serve a purpose and consume disk space.&lt;/li&gt;
&lt;li&gt;They can be located by adding the filter flag, &lt;strong&gt;-f&lt;/strong&gt; with a value of &lt;strong&gt;dangling=true&lt;/strong&gt; to the docker images command.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Another description:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An unused image means that it has not been assigned or used in a container. For example, when running docker ps -a - it will list all of your exited and currently running containers. Any images shown being used inside any of containers are a &amp;ldquo;used image&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;On the other hand, a dangling image just means that you&amp;rsquo;ve created the new build of the image, but it wasn&amp;rsquo;t given a new name. So the old images you have becomes the &amp;ldquo;dangling image&amp;rdquo;. Those old images are the ones that are untagged and displays &amp;ldquo;&lt;none&gt;&amp;rdquo; on its name when you run docker images.&lt;/li&gt;
&lt;li&gt;When running &lt;strong&gt;docker system prune -a&lt;/strong&gt;, it will remove both unused and dangling images. Therefore any images being used in a container, whether they have been exited or currently running, will NOT be affected.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-difference-between-copy-and-add-in-a-dockerfile&#34;&gt;The Difference between COPY and ADD in a Dockerfile&lt;/h3&gt;
&lt;p&gt;Sometimes you see &lt;strong&gt;COPY&lt;/strong&gt; or &lt;strong&gt;ADD&lt;/strong&gt; being used in a Dockerfile, but 99% of the time you should be using &lt;strong&gt;COPY&lt;/strong&gt;, here&amp;rsquo;s why.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;COPY&lt;/strong&gt; and &lt;strong&gt;ADD&lt;/strong&gt; are both Dockerfile instructions that serve similar purposes. They let you copy files from a specific location into a Docker image.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;COPY&lt;/strong&gt; takes in a &lt;strong&gt;src&lt;/strong&gt; and &lt;strong&gt;destination&lt;/strong&gt;. It &lt;strong&gt;only&lt;/strong&gt; lets you copy in a local file or directory from your host (the machine building the Docker image) into the Docker image itself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ADD&lt;/strong&gt; lets you do that too, but it also supports &lt;strong&gt;2 other sources&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, you can use a &lt;strong&gt;URL&lt;/strong&gt; instead of a local file / directory.&lt;/li&gt;
&lt;li&gt;Secondly, you can extract a tar file from the source directly into the destination.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In most cases if you’re using a URL, you’re downloading a zip file and are then using the RUN command to extract it. However, you might as well just use RUN with curl instead of ADD here so you chain everything into 1 RUN command to &lt;strong&gt;make a smaller Docker image&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A valid use case for &lt;strong&gt;ADD&lt;/strong&gt; is when you want to extract a local tar file into a specific directory in your Docker image. This is exactly what the Alpine image does with ADD rootfs.tar.gz /.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you’re copying in local files to your Docker image, always use COPY because it’s more explicit.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cmd-vs-entrypoint&#34;&gt;CMD vs. ENTRYPOINT&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Run or execute something when docker starts&lt;/li&gt;
&lt;li&gt;The main purpose of a CMD is to provide defaults for an executing container&lt;/li&gt;
&lt;li&gt;An ENTRYPOINT helps you to configure a container that you can run as an executable&lt;/li&gt;
&lt;li&gt;CMD can be overridden, The ENTRYPOINT instruction works very similarly to CMD in that it is used to specify the command executed when the container is started. However, where it differs is that ENTRYPOINT doesn’t allow you to override the command.&lt;/li&gt;
&lt;li&gt;CMD will be overridden by the ‘docker run …….’ command line, ENTRYPOINT just gets the parameter from ‘docker run …….’ command line&lt;/li&gt;
&lt;li&gt;One important thing to call out about the ENTRYPOINT instruction is that syntax is critical. Technically, ENTRYPOINT supports both the ENTRYPOINT [&amp;ldquo;command&amp;rdquo;] syntax and the ENTRYPOINT command syntax. However, while both of these are supported, they have two different meanings and change how ENTRYPOINT works.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cmd-and-entrypoint-syntax&#34;&gt;CMD and ENTRYPOINT syntax&lt;/h3&gt;
&lt;p&gt;Both CMD and ENTRYPOINT are straight forward but they have a hidden, err, &amp;ldquo;feature&amp;rdquo; that can cause issues if you are not aware. Two different syntaxes are supported for these instructions.&lt;/p&gt;
&lt;p&gt;CMD /bin/echo&lt;br&gt;
or&lt;br&gt;
CMD [&amp;quot;/bin/echo&amp;rdquo;]&lt;br&gt;
This may not look like it would be an issues but the devil in the details will trip you up. If you use the second syntax where the CMD ( or ENTRYPOINT ) is an array, it acts exactly like you would expect. If you use the first syntax without the array, docker pre-pends /bin/sh -c to your command. This has always been in docker as far as I can remember.&lt;/p&gt;
&lt;p&gt;Pre-pending /bin/sh -c can cause some unexpected issues and functionality that is not easily understood if you did not know that docker modified your CMD. Therefore, you should always use the array syntax for both instructions because both will be executed exactly how you intended.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Always use the array syntax when using CMD and ENTRYPOINT.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;docker-commands&#34;&gt;Docker commands&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;docker build&lt;/li&gt;
&lt;li&gt;docker pull&lt;/li&gt;
&lt;li&gt;docker push&lt;/li&gt;
&lt;li&gt;docker images …&lt;/li&gt;
&lt;li&gt;docker commit&lt;/li&gt;
&lt;li&gt;docker exec -it&lt;/li&gt;
&lt;li&gt;docker run -it&lt;/li&gt;
&lt;li&gt;docker system
&lt;ul&gt;
&lt;li&gt;df&lt;/li&gt;
&lt;li&gt;events&lt;/li&gt;
&lt;li&gt;info&lt;/li&gt;
&lt;li&gt;prune&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;docker ps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./docker-commands.png&#34; alt=&#34;docker-commands&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;docker-instructions-in-dockerfile&#34;&gt;Docker instructions in dockerfile&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ENV&lt;/li&gt;
&lt;li&gt;RUN&lt;/li&gt;
&lt;li&gt;CMD&lt;/li&gt;
&lt;li&gt;ENTRYPOINT&lt;/li&gt;
&lt;li&gt;COPY&lt;/li&gt;
&lt;li&gt;ADD&lt;/li&gt;
&lt;li&gt;USER&lt;/li&gt;
&lt;li&gt;WORKDIR&lt;/li&gt;
&lt;li&gt;ARG&lt;/li&gt;
&lt;li&gt;EXPOSE&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dockerfile-best-practices&#34;&gt;Dockerfile Best Practices&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Best practices for writing Dockerfiles&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.docker.com/blog/intro-guide-to-dockerfile-best-practices/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Intro Guide to Dockerfile Best Practices&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://docs.docker.com/develop/dev-best-practices/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker development best practices&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://engineering.bitnami.com/articles/best-practices-writing-a-dockerfile.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Best practices writing a Dockerfile&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://nickjanetakis.com/blog/docker-tip-2-the-difference-between-copy-and-add-in-a-dockerile&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Difference between COPY and ADD in a Dockerfile&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Java Collection</title>
      <link>/coding/java/java-collection/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/coding/java/java-collection/</guid>
      <description>&lt;h1 id=&#34;java-collection&#34;&gt;Java Collection&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Any group of individual objects which are represented as a single unit is known as the collection of the objects.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Collection&lt;/strong&gt; in Java is a framework that provides an architecture to store and manipulate the group of objects.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Collection&lt;/strong&gt; interface (&lt;strong&gt;java.util.Collection&lt;/strong&gt;) and Map interface (&lt;strong&gt;java.util.Map&lt;/strong&gt;) are the two main “root” interfaces of Java collection classes.&lt;/li&gt;
&lt;li&gt;Java Collections can achieve all the operations that you perform on a data such as &lt;strong&gt;searching&lt;/strong&gt;, &lt;strong&gt;sorting&lt;/strong&gt;, &lt;strong&gt;insertion&lt;/strong&gt;, &lt;strong&gt;manipulation&lt;/strong&gt;, and &lt;strong&gt;deletion&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;java-collection-hierarchy&#34;&gt;Java Collection Hierarchy&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;./java-collection-hierarchy.png&#34; alt=&#34;java-collection-hierarchy&#34;&gt;&lt;br&gt;
&lt;img src=&#34;./java-collection-hierarchy-1.png&#34; alt=&#34;java-collection-hierarchy-1&#34;&gt;&lt;br&gt;
&lt;img src=&#34;./java-collection-hierarchy-2.jpg&#34; alt=&#34;java-collection-hierarchy-12&#34;&gt;&lt;/p&gt;
&lt;p&gt;The utility package, (&lt;strong&gt;java.util&lt;/strong&gt;) contains all the classes and interfaces that are required by the collection framework. The collection framework contains an interface named as an iterable interface which provides the iterator to iterate through all the collections. This interface is extended by the main collection interface which acts as a root for the collection framework. All the collections extend this collection interface thereby extending the properties of the iterator and the methods of this interface.&lt;/p&gt;
&lt;h3 id=&#34;iterable-interface&#34;&gt;Iterable Interface&lt;/h3&gt;
&lt;p&gt;This is the root interface for the entire collection framework. The collection interface extends the iterable interface. Therefore, inherently, all the interfaces and classes implement this interface. The main functionality of this interface is to provide an iterator for the collections. Therefore, this interface contains only one abstract method which is the iterator. It returns the&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Iterator iterator();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;list-interface&#34;&gt;List Interface&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This interface is dedicated to the data of the list type in which we can store all the ordered collection of the objects.&lt;/li&gt;
&lt;li&gt;This also allows duplicate data to be present in it.&lt;/li&gt;
&lt;li&gt;It is implemented by various classes like &lt;strong&gt;ArrayList&lt;/strong&gt;, &lt;strong&gt;Vector&lt;/strong&gt;, &lt;strong&gt;Stack&lt;/strong&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;arraylist&#34;&gt;ArrayList&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;ArrayList provides us with &lt;strong&gt;dynamic arrays&lt;/strong&gt; in Java. Though, it may be slower than standard arrays but can be helpful in programs where lots of manipulation in the array is needed. The size of an ArrayList is increased automatically if the collection grows or shrinks if the objects are removed from the collection.&lt;/li&gt;
&lt;li&gt;It is like an array, but there is no size limit.&lt;/li&gt;
&lt;li&gt;Java ArrayList allows us to randomly access the list. ArrayList can not be used for primitive types, like int, char, etc. We will need a wrapper class for such cases.&lt;/li&gt;
&lt;li&gt;The ArrayList class maintains the insertion order and is non-synchronized.&lt;/li&gt;
&lt;li&gt;The elements stored in the ArrayList class can be randomly accessed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;linkedlist&#34;&gt;LinkedList&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;LinkedList is a linear data structure where the elements are not stored in contiguous locations and every element is a separate object with a data part and address part.&lt;/li&gt;
&lt;li&gt;The elements are linked using pointers and addresses. Each element is known as a node.&lt;/li&gt;
&lt;li&gt;It uses a doubly linked list internally to store the elements.&lt;/li&gt;
&lt;li&gt;It can store the duplicate elements.&lt;/li&gt;
&lt;li&gt;It maintains the insertion order and is not synchronized.&lt;/li&gt;
&lt;li&gt;In LinkedList, the manipulation is fast because no shifting is required.&lt;/li&gt;
&lt;li&gt;It can be used as a list, stack or queue.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;vector&#34;&gt;Vector&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Vector uses a dynamic array to store the data elements.&lt;/li&gt;
&lt;li&gt;It may be slower than standard arrays but can be helpful in programs where lots of manipulation in the array is needed.&lt;/li&gt;
&lt;li&gt;The primary difference between a vector and an ArrayList is that a Vector is synchronized and an ArrayList is non-synchronized.&lt;/li&gt;
&lt;li&gt;It is synchronized and contains many methods that are not the part of Collection framework.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;stack&#34;&gt;Stack&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;It implements the last-in-first-out data structure.&lt;/li&gt;
&lt;li&gt;The stack is the subclass of Vector. The stack contains all of the methods of Vector class and also provides its methods like boolean push(), boolean peek(), boolean push(object o), which defines its properties.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Stack is a subclass of Vector and a legacy class. It is thread safe which might be an overhead in an environment where thread safety is not needed.&lt;br&gt;
An alternate to Stack is to use ArrayDequeue which is not thread safe and faster array implementation.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;queue-interface&#34;&gt;Queue Interface&lt;/h3&gt;
&lt;p&gt;A queue interface maintains the FIFO(First In First Out) order similar to a real-world queue line. This interface is dedicated to storing all the elements where the order of the elements matter. There are various classes like &lt;strong&gt;PriorityQueue&lt;/strong&gt;, &lt;strong&gt;Deque&lt;/strong&gt;, &lt;strong&gt;ArrayDeque&lt;/strong&gt;, etc.&lt;/p&gt;
&lt;h4 id=&#34;priority-queue&#34;&gt;Priority Queue&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;A PriorityQueue is used when the objects are supposed to be processed based on the priority.&lt;/li&gt;
&lt;li&gt;It is known that a queue follows the First-In-First-Out algorithm, but sometimes the elements of the queue are needed to be processed according to the priority and this class is used in these cases.&lt;/li&gt;
&lt;li&gt;The PriorityQueue is based on the priority heap.&lt;/li&gt;
&lt;li&gt;The elements of the priority queue are ordered according to the natural ordering, or by a Comparator provided at queue construction time, depending on which constructor is used.&lt;/li&gt;
&lt;li&gt;PriorityQueue doesn&amp;rsquo;t allow null values to be stored in the queue.&lt;/li&gt;
&lt;li&gt;The elements in PriorityQueue must be of Comparable type. String and Wrapper classes are Comparable by default.&lt;/li&gt;
&lt;li&gt;To add user-defined objects in PriorityQueue, you need to implement Comparable interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;deque-interface&#34;&gt;Deque Interface&lt;/h3&gt;
&lt;p&gt;Deque, also known as a double-ended queue, is a data structure where we can add and remove the elements from both the ends of the queue.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This interface extends the queue interface.&lt;/li&gt;
&lt;li&gt;The class which implements this interface is &lt;strong&gt;ArrayDeque&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;arraydeque&#34;&gt;ArrayDeque&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The ArrayDeque class provides the facility of using deque and resizable-array. This is a special kind of array that grows and allows users to add or remove an element from both sides of the queue.&lt;/li&gt;
&lt;li&gt;Array deques have no capacity restrictions and they grow as necessary to support usage.&lt;/li&gt;
&lt;li&gt;ArrayDeque is faster than ArrayList and Stack.&lt;/li&gt;
&lt;li&gt;Unlike Queue, we can add or remove elements from both sides.&lt;/li&gt;
&lt;li&gt;Null elements are not allowed in the ArrayDeque.&lt;/li&gt;
&lt;li&gt;ArrayDeque is not thread safe, in the absence of external synchronization.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;set-interface&#34;&gt;Set Interface&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A set is an unordered collection of objects in which duplicate values cannot be stored.&lt;/li&gt;
&lt;li&gt;This collection is used when we wish to avoid the duplication of the objects and wish to store only the unique objects.&lt;/li&gt;
&lt;li&gt;This set interface is implemented by various classes like &lt;strong&gt;HashSet&lt;/strong&gt;, &lt;strong&gt;TreeSet&lt;/strong&gt;, &lt;strong&gt;LinkedHashSet&lt;/strong&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hashset&#34;&gt;HashSet&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The HashSet class is an inherent implementation of the hash table data structure.&lt;/li&gt;
&lt;li&gt;HashSet stores the elements by using a mechanism called hashing.&lt;/li&gt;
&lt;li&gt;HashSet contains unique elements only.&lt;/li&gt;
&lt;li&gt;HashSet allows null value.&lt;/li&gt;
&lt;li&gt;HashSet class is non synchronized.&lt;/li&gt;
&lt;li&gt;HashSet doesn&amp;rsquo;t maintain the insertion order. Here, elements are inserted on the basis of their hashcode.&lt;/li&gt;
&lt;li&gt;HashSet is the best approach for search operations.&lt;/li&gt;
&lt;li&gt;The initial default capacity of HashSet is 16, and the load factor is 0.75.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./hashset.png&#34; alt=&#34;hashset&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;linkedhashset&#34;&gt;LinkedHashSet&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;LinkedHashSet uses a doubly linked list to store the data and retains the ordering of the elements.&lt;/li&gt;
&lt;li&gt;Like HashSet, It also contains unique elements only.&lt;/li&gt;
&lt;li&gt;It maintains the insertion order.&lt;/li&gt;
&lt;li&gt;It permits null elements.&lt;/li&gt;
&lt;li&gt;LinkedHashSet class is non synchronized.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./linkedhashset.png&#34; alt=&#34;linkedhashset&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;sortedset-interface&#34;&gt;SortedSet Interface&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This interface is very similar to the set interface. The only difference is that this interface has extra methods that maintain the ordering of the elements.&lt;/li&gt;
&lt;li&gt;The sorted set interface extends the set interface and is used to handle the data which needs to be sorted.&lt;/li&gt;
&lt;li&gt;The class which implements this interface is &lt;strong&gt;TreeSet&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;treeset&#34;&gt;TreeSet&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;TreeSet class contains unique elements only like HashSet.&lt;/li&gt;
&lt;li&gt;TreeSet class &lt;strong&gt;doesn&amp;rsquo;t&lt;/strong&gt; allow null element.&lt;/li&gt;
&lt;li&gt;The TreeSet class uses a Tree for storage.&lt;/li&gt;
&lt;li&gt;The ordering of the elements is maintained by a set using their natural ordering whether or not an explicit comparator is provided.&lt;/li&gt;
&lt;li&gt;It can also be ordered by a Comparator provided at set creation time, depending on which constructor is used.&lt;/li&gt;
&lt;li&gt;the access and retrieval time of TreeSet is quite fast.&lt;/li&gt;
&lt;li&gt;The elements in TreeSet stored in ascending order.&lt;/li&gt;
&lt;li&gt;TreeSet class is non synchronized.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./treeset.png&#34; alt=&#34;treeset&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;map-interface&#34;&gt;Map Interface&lt;/h3&gt;
&lt;p&gt;A map is a data structure which supports the key-value pair mapping for the data. This interface doesn’t support duplicate keys because the same key cannot have multiple mappings. A map is useful if there is a data and we wish to perform operations on the basis of the key. This map interface is implemented by various classes like &lt;strong&gt;HashMap&lt;/strong&gt;, &lt;strong&gt;TreeMap&lt;/strong&gt;, etc.&lt;br&gt;
There are two interfaces for implementing Map in java: &lt;strong&gt;Map&lt;/strong&gt; and &lt;strong&gt;SortedMap&lt;/strong&gt;, and three classes: &lt;strong&gt;HashMap&lt;/strong&gt;, &lt;strong&gt;LinkedHashMap&lt;/strong&gt;, and &lt;strong&gt;TreeMap&lt;/strong&gt;. The hierarchy of Java Map is given below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./java-map-hierarchy.png&#34; alt=&#34;java-map-hierarchy&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;hashmap&#34;&gt;HashMap&lt;/h4&gt;
&lt;p&gt;HashMap provides the basic implementation of the Map interface of Java. It stores the data in (Key, Value) pairs. To access a value in a HashMap, we must know its key. HashMap uses a technique called Hashing. Hashing is a technique of converting a large String to small String that represents the same String so that the indexing and search operations are faster. HashSet also uses HashMap internally.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java HashMap contains values based on the key.&lt;/li&gt;
&lt;li&gt;Java HashMap contains only unique keys.&lt;/li&gt;
&lt;li&gt;Java HashMap may have one null key and multiple null values.&lt;/li&gt;
&lt;li&gt;Java HashMap is non synchronized.&lt;/li&gt;
&lt;li&gt;Java HashMap maintains no order.&lt;/li&gt;
&lt;li&gt;The initial default capacity of Java HashMap class is 16 with a load factor of 0.75.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;HashMap implementation&lt;/strong&gt;&lt;br&gt;

&lt;a href=&#34;https://www.javatpoint.com/working-of-hashmap-in-java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Working of HashMap in Java&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It stores the data in the pair of Key and Value.&lt;/li&gt;
&lt;li&gt;HashMap contains an array of the nodes, and the node is represented as a class.&lt;/li&gt;
&lt;li&gt;It uses an array and LinkedList data structure internally for storing Key and Value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;linkedhashmap&#34;&gt;LinkedHashMap&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;LinkedHashMap contains values based on the key.&lt;/li&gt;
&lt;li&gt;LinkedHashMap contains unique elements.&lt;/li&gt;
&lt;li&gt;LinkedHashMap may have one null key and multiple null values.&lt;/li&gt;
&lt;li&gt;LinkedHashMap is non synchronized.&lt;/li&gt;
&lt;li&gt;LinkedHashMap maintains insertion order.&lt;/li&gt;
&lt;li&gt;The initial default capacity of Java HashMap class is 16 with a load factor of 0.75.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;treemap&#34;&gt;TreeMap&lt;/h4&gt;
&lt;p&gt;Java TreeMap class is a &lt;strong&gt;red-black tree&lt;/strong&gt; based implementation. It provides an efficient means of storing key-value pairs in sorted order.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TreeMap contains values based on the key.&lt;/li&gt;
&lt;li&gt;It implements the NavigableMap interface and extends AbstractMap class.&lt;/li&gt;
&lt;li&gt;TreeMap contains only unique elements.&lt;/li&gt;
&lt;li&gt;TreeMap cannot have a null key but can have multiple null values.&lt;/li&gt;
&lt;li&gt;TreeMap is non synchronized.&lt;/li&gt;
&lt;li&gt;TreeMap maintains ascending order.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hashtable&#34;&gt;HashTable&lt;/h3&gt;
&lt;p&gt;Java Hashtable class inherits Dictionary class and implements the Map interface.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Hashtable is an array of a list. Each list is known as a bucket. The position of the bucket is identified by calling the hashcode() method. A Hashtable contains values based on the key.&lt;/li&gt;
&lt;li&gt;Hashtable class contains unique elements.&lt;/li&gt;
&lt;li&gt;Hashtable class doesn&amp;rsquo;t allow null key or value.&lt;/li&gt;
&lt;li&gt;Hashtable class is synchronized.&lt;/li&gt;
&lt;li&gt;The initial default capacity of Hashtable class is 11 whereas loadFactor is 0.75.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;enumset&#34;&gt;EnumSet&lt;/h3&gt;
&lt;p&gt;EnumSet class is the specialized Set implementation for use with enum types. It inherits AbstractSet class and implements the Set interface.&lt;/p&gt;
&lt;h3 id=&#34;enummap&#34;&gt;EnumMap&lt;/h3&gt;
&lt;p&gt;EnumMap class is the specialized Map implementation for enum keys. It inherits Enum and AbstractMap classes.&lt;/p&gt;
&lt;h3 id=&#34;collections-class&#34;&gt;Collections class&lt;/h3&gt;
&lt;p&gt;This class consists exclusively of static methods that operate on or return collections. It contains polymorphic algorithms that operate on collections, &amp;ldquo;wrappers&amp;rdquo;, which return a new collection backed by a specified collection, and a few other odds and ends.&lt;br&gt;
The methods of this class all throw a NullPointerException if the collections or class objects provided to them are null.&lt;/p&gt;
&lt;h4 id=&#34;sorting-in-collection&#34;&gt;Sorting in collection&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;String objects
Collections.sort()&lt;/li&gt;
&lt;li&gt;Wrapper class objects
Collections.sort()&lt;/li&gt;
&lt;li&gt;User-defined class objects&lt;br&gt;
Collections.sort() with user-defined class implements comparable interface (compareTo() method)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;comaprable&#34;&gt;Comaprable&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Java &lt;strong&gt;Comparable interface&lt;/strong&gt; is used to order the objects of the user-defined class.&lt;/li&gt;
&lt;li&gt;This interface is found in &lt;strong&gt;java.lang&lt;/strong&gt; package and contains only one method named compareTo(Object).&lt;/li&gt;
&lt;li&gt;It provides a single sorting sequence only, i.e., you can sort the elements on the basis of single data member only. For example, it may be rollno, name, age or anything else.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;comparetoobject-obj-method&#34;&gt;compareTo(Object obj) method&lt;/h4&gt;
&lt;p&gt;public int compareTo(Object obj): It is used to compare the current object with the specified object. It returns&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;positive integer, if the current object is greater than the specified object.&lt;/li&gt;
&lt;li&gt;negative integer, if the current object is less than the specified object.&lt;/li&gt;
&lt;li&gt;zero, if the current object is equal to the specified object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;comparator&#34;&gt;Comparator&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Java Comparator interface is used to order the objects of a user-defined class.&lt;/li&gt;
&lt;li&gt;This interface is found in &lt;strong&gt;java.util&lt;/strong&gt; package and contains 2 methods &lt;strong&gt;compare(Object obj1,Object obj2)&lt;/strong&gt; and &lt;strong&gt;equals(Object element)&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;It provides multiple sorting sequences, i.e., you can sort the elements on the basis of any data member, for example, rollno, name, age or anything else.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;comparator-implementation&#34;&gt;Comparator Implementation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Non-generic Old Style&lt;/li&gt;
&lt;li&gt;Generic style&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;java-8-comparator-interface&#34;&gt;Java 8 Comparator Interface&lt;/h4&gt;
&lt;p&gt;Java 8 has more comparator methods&lt;/p&gt;
&lt;h3 id=&#34;properties-class&#34;&gt;Properties class&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The properties object contains key and value pair both as a string.&lt;/li&gt;
&lt;li&gt;The java.util.Properties class is the subclass of Hashtable.&lt;/li&gt;
&lt;li&gt;It can be used to get property value based on the property key. The Properties class provides methods to get data from the properties file and store data into the properties file. Moreover, it can be used to get the properties of a system.&lt;/li&gt;
&lt;li&gt;Recompilation is not required if the information is changed from a properties file: If any information is changed from the properties file, you don&amp;rsquo;t need to recompile the java class. It is used to store information which is to be changed frequently.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;a-little-deep-in-queues&#34;&gt;A Little Deep In Queues&lt;/h3&gt;
&lt;h4 id=&#34;the-queue-a-fifo-list&#34;&gt;The queue (a FIFO list)&lt;/h4&gt;
&lt;p&gt;Implementation of a queue&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A queue (of bounded size) can be efficiently implemented in an array.&lt;/li&gt;
&lt;li&gt;A queue can be efficiently implemented using any linked list that supports deletion in the front and insertion at the end in constant time. The first (last) element of the queue is at the front (end) of the linked list.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-stack-a-lifo-list&#34;&gt;The stack (a LIFO list)&lt;/h4&gt;
&lt;p&gt;Implementation of a stack&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A stack (of bounded size) can be efficiently implemented using an array b and an int variable n: The n elements of the stack are in b[0..n-1], with b[0] being the bottom element and b[n-1] being the top element.&lt;/li&gt;
&lt;li&gt;A stack can be efficiently implemented using a linked list. The first element is the top of the stack and the last element is the bottom. It’s easy to push (prepend) an element and pop (remove) the first element in constant time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-deque&#34;&gt;The deque&lt;/h4&gt;
&lt;p&gt;The word deque, usually pronounced deck, is short for double-ended queue. A deque is a list that supports insertion and removal at both ends. Thus, a deque can be used as a queue or as a stack.&lt;/p&gt;
&lt;h4 id=&#34;stacks-queues-and-deques-in-the-java-collection-framework&#34;&gt;Stacks, queues, and deques in the Java Collection framework&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java has interface Deque&lt;E&gt;. It is implemented by classes ArrayDeque&lt;E&gt; (which implements a list in an expandable array) and LinkedList&lt;E&gt;, so these two classes can be used for a queue and for a stack.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both ArrayDeque and LinkedList also implement interface Queue&lt;E&gt;, so you can use this interface to restrict operations to queue operations. For example, create a LinkedList and assign it to a Queue variable.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Queue&amp;lt;E&amp;gt; q= new LinkedList&amp;lt;&amp;gt;();  
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thereafter, use only q for the LinkedList and operations are restricted to queue operations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java also has a class Stack&lt;E&gt;, which implements a stack in an expandable array. However, the Java API would rather you use an ArrayDeque. The problem is that there is no suitable way to restrict the operations of an Array-Deque to stack operations, so we prefer to use class Stack&lt;E&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;some-implementations&#34;&gt;Some Implementations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LinkedList:&lt;/strong&gt; Although mainly known to be a List implementation, this class also implements the Queue interface. This implementation works by linking its elements together and going through that chain when iterating or searching for elements.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ArrayDeque:&lt;/strong&gt; An implementation of both Queue and Deque. It&amp;rsquo;s backed up by an array, which can be increased when the number of elements increase over its current capacity.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DelayQueue:&lt;/strong&gt; Can only contain elements which implement the Delayed interface - elements that become active after a certain time. The DelayQueue will only deliver elements whose delays have expired.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PriorityQueue:&lt;/strong&gt; Orders its elements according to their natural order or a Comparator (if provided). This means it doesn&amp;rsquo;t work using the FIFO principle, but rather returns the element with the highest priority (defined by how they compare to each other).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;non-generic-vs-generic&#34;&gt;Non-generic vs Generic&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java collection framework was non-generic before JDK 1.5. Since 1.5, it is generic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java new generic collection allows you to have only one type of object in a collection. Now it is type safe so typecasting is not required at runtime.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In a generic collection, the type is specified in angular braces.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If trying to add another type of object into generic collection, it gives compile time error.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ArrayList list=new ArrayList();//creating old non-generic arraylist  
  ArrayList&amp;lt;String&amp;gt; list=new ArrayList&amp;lt;String&amp;gt;();//creating new generic arraylist  
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ways-to-iterate-the-elements-of-the-collection-in-java&#34;&gt;Ways to iterate the elements of the collection in Java&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;By Iterator interface.&lt;/li&gt;
&lt;li&gt;By for-each loop.&lt;/li&gt;
&lt;li&gt;By ListIterator interface.&lt;/li&gt;
&lt;li&gt;By for loop.&lt;/li&gt;
&lt;li&gt;By forEach() method.&lt;/li&gt;
&lt;li&gt;By forEachRemaining() method.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;comparison&#34;&gt;Comparison&lt;/h3&gt;
&lt;h4 id=&#34;array-vs-arraylist&#34;&gt;Array vs ArrayList&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Basis&lt;/th&gt;
&lt;th&gt;Array&lt;/th&gt;
&lt;th&gt;ArrayList&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Definition&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;An array is a dynamically-created object. It serves as a container that holds the constant number of values of the same type. It has a contiguous memory location.&lt;/td&gt;
&lt;td&gt;The ArrayList is a class of Java Collections framework. It contains popular classes like Vector, HashTable, and HashMap.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Size&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Array is static in size.&lt;/td&gt;
&lt;td&gt;ArrayList is dynamic in size.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Resizable&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;An array is a fixed-length data structure.&lt;/td&gt;
&lt;td&gt;ArrayList is a variable-length data structure. It can be resized itself when needed.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Initialization&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;It is mandatory to provide the size of an array while initializing it directly or indirectly.&lt;/td&gt;
&lt;td&gt;We can create an instance of ArrayList without specifying its size. Java creates ArrayList of default size.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Performance&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;It performs fast in comparison to ArrayList because of fixed size.&lt;/td&gt;
&lt;td&gt;ArrayList is internally backed by the array in Java. The resize operation in ArrayList slows down the performance.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Primitive/ Generic type&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;An array can store both objects and primitives type.&lt;/td&gt;
&lt;td&gt;We cannot store primitive type in ArrayList. It automatically converts primitive type to object.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Iterating Values&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;We use for loop or for each loop to iterate over an array.&lt;/td&gt;
&lt;td&gt;We use an iterator to iterate over ArrayList.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Type-Safety&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;We cannot use generics along with array because it is not a convertible type of array.&lt;/td&gt;
&lt;td&gt;ArrayList allows us to store only generic/ type, that&amp;rsquo;s why it is type-safe.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Array provides a length variable which denotes the length of an array.&lt;/td&gt;
&lt;td&gt;ArrayList provides the size() method to determine the size of ArrayList.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Adding Elements&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;We can add elements in an array by using the assignment operator.&lt;/td&gt;
&lt;td&gt;Java provides the add() method to add elements in the ArrayList.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Single/ Multi-Dimensional&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Array can be multi-dimensional.&lt;/td&gt;
&lt;td&gt;ArrayList is always single-dimensional.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;arraylist-vs-linkedlist&#34;&gt;ArrayList vs LinkedList&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ArrayList&lt;/th&gt;
&lt;th&gt;LinkedList&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ArrayList internally uses a dynamic array to store the elements.&lt;/td&gt;
&lt;td&gt;LinkedList internally uses a doubly linked list to store the elements.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Manipulation with ArrayList is slow because it internally uses an array. If any element is removed from the array, all the bits are shifted in memory.&lt;/td&gt;
&lt;td&gt;Manipulation with LinkedList is faster than ArrayList because it uses a doubly linked list, so no bit shifting is required in memory.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;An ArrayList class can act as a list only because it implements List only.&lt;/td&gt;
&lt;td&gt;LinkedList class can act as a list and queue both because it implements List and Deque interfaces.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ArrayList is better for storing and accessing data.&lt;/td&gt;
&lt;td&gt;LinkedList is better for manipulating data.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;arraylist-vs-vector&#34;&gt;ArrayList vs Vector&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ArrayList&lt;/th&gt;
&lt;th&gt;Vector&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ArrayList is not synchronized.&lt;/td&gt;
&lt;td&gt;Vector is synchronized.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ArrayList increments 50% of current array size if the number of elements exceeds from its capacity.&lt;/td&gt;
&lt;td&gt;Vector increments 100% means doubles the array size if the total number of elements exceeds than its capacity.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ArrayList is not a legacy class. It is introduced in JDK 1.2.&lt;/td&gt;
&lt;td&gt;Vector is a legacy class.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ArrayList is fast because it is non-synchronized.&lt;/td&gt;
&lt;td&gt;Vector is slow because it is synchronized, i.e., in a multithreading environment, it holds the other threads in runnable or non-runnable state until current thread releases the lock of the object.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ArrayList uses the Iterator interface to traverse the elements.&lt;/td&gt;
&lt;td&gt;A Vector can use the Iterator interface or Enumeration interface to traverse the elements.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;list-vs-set&#34;&gt;List vs Set&lt;/h4&gt;
&lt;p&gt;A list can contain duplicate elements whereas Set contains unique elements only.&lt;/p&gt;
&lt;h4 id=&#34;hashmap-vs-linkedhashmap-vs-treemap&#34;&gt;HashMap vs LinkedHashMap vs TreeMap&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;A Map doesn&amp;rsquo;t allow duplicate keys, but you can have duplicate values.&lt;/li&gt;
&lt;li&gt;HashMap and LinkedHashMap allow null keys and values, but TreeMap doesn&amp;rsquo;t allow any null key or value.&lt;/li&gt;
&lt;li&gt;A Map can&amp;rsquo;t be traversed, so you need to convert it into Set using keySet() or entrySet() method.&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Class&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HashMap&lt;/td&gt;
&lt;td&gt;HashMap is the implementation of Map, but it doesn&amp;rsquo;t maintain any order.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LinkedHashMap&lt;/td&gt;
&lt;td&gt;LinkedHashMap is the implementation of Map. It inherits HashMap class. It maintains insertion order.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TreeMap&lt;/td&gt;
&lt;td&gt;TreeMap is the implementation of Map and SortedMap. It maintains ascending order.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;HashMap&lt;/th&gt;
&lt;th&gt;TreeMap&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HashMap can contain one null key.&lt;/td&gt;
&lt;td&gt;TreeMap cannot contain any null key.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HashMap maintains no order.&lt;/td&gt;
&lt;td&gt;TreeMap maintains ascending order.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;hashmap-vs-hashtable&#34;&gt;HashMap vs Hashtable&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;HashMap&lt;/th&gt;
&lt;th&gt;Hashtable&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HashMap and Hashtable both are used to store data in key and value form. Both are using hashing technique to store unique keys.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1) HashMap is non synchronized. It is not-thread safe and can&amp;rsquo;t be shared between many threads without proper synchronization code.&lt;/td&gt;
&lt;td&gt;Hashtable is synchronized. It is thread-safe and can be shared with many threads.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2) HashMap allows one null key and multiple null values.&lt;/td&gt;
&lt;td&gt;Hashtable doesn&amp;rsquo;t allow any null key or value.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3) HashMap is fast.&lt;/td&gt;
&lt;td&gt;Hashtable is slow.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4) We can make the HashMap as synchronized by calling this code  &lt;br&gt; Map m = Collections.synchronizedMap(hashMap);&lt;/td&gt;
&lt;td&gt;Hashtable is internally synchronized and can&amp;rsquo;t be unsynchronized.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5) HashMap is traversed by Iterator.&lt;/td&gt;
&lt;td&gt;Hashtable is traversed by Enumerator and Iterator.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6) Iterator in HashMap is fail-fast.&lt;/td&gt;
&lt;td&gt;Enumerator in Hashtable is not fail-fast.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7) HashMap inherits AbstractMap class.&lt;/td&gt;
&lt;td&gt;Hashtable inherits Dictionary class.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;collections-class-vs-collection-framework&#34;&gt;Collections Class vs Collection Framework&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Collection&lt;/th&gt;
&lt;th&gt;Collections&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;The Collection is an interface&lt;/td&gt;
&lt;td&gt;whereas Collections is a utility class.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The Collection interface provides the standard functionality of data structure to List, Set, and Queue.&lt;/td&gt;
&lt;td&gt;However, Collections class contains only static methods like sort(), min(), max(), fill(), copy(), reverse() etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;The Collection interface provides the methods that can be used for data structure&lt;/td&gt;
&lt;td&gt;whereas Collections class provides the static methods which can be used for various operation on a collection.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;comparable-vs-comparator&#34;&gt;Comparable vs Comparator&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;key&lt;/th&gt;
&lt;th&gt;Comparable&lt;/th&gt;
&lt;th&gt;Comparator&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Package&lt;/td&gt;
&lt;td&gt;Comparable interface belongs to java.lang package.&lt;/td&gt;
&lt;td&gt;Comparator interface belongs to java.util package.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Method&lt;/td&gt;
&lt;td&gt;The comparable interface has a method compareTo(Object a )&lt;/td&gt;
&lt;td&gt;The comparator has a method compare(Object o1, Object O2)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sorting uses&lt;/td&gt;
&lt;td&gt;Comparable provides single sorting sequence. In other words, we can sort the collection on the basis of single element such as id or title or rating etc.&lt;/td&gt;
&lt;td&gt;Collection.sort(List, Comparator) method can be used to sort the collection of Comparator type objects.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sorting sequence&lt;/td&gt;
&lt;td&gt;Comparable provides single sorting sequence.&lt;/td&gt;
&lt;td&gt;Comparator provides multiple sorting sequence. In other words, we can sort the collection on the basis of multiple elements such as id, title and rating etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Original class&lt;/td&gt;
&lt;td&gt;Comparable affects the original class, i.e., the actual class is modified.&lt;/td&gt;
&lt;td&gt;Comparator provides compare() method to sort elements.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.geeksforgeeks.org/collections-in-java-2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Collections in Java&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackabuse.com/java-collections-queue-and-deque-interfaces/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Collections: Queue and Deque Interfaces&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.javatpoint.com/java-arraylist&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java ArrayList&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
</description>
    </item>
    
    <item>
      <title>list, tuple, dict vs List, Tuple, Dict</title>
      <link>/coding/python/list-tuple-dict-vs-list-tuple-dict/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/coding/python/list-tuple-dict-vs-list-tuple-dict/</guid>
      <description>&lt;h3 id=&#34;type-hints&#34;&gt;Type Hints&lt;/h3&gt;
&lt;h4 id=&#34;what-is-the-challenge&#34;&gt;What is the challenge&lt;/h4&gt;
&lt;p&gt;Due to the dynamic nature of Python, inferring or checking the type of an object being used is especially hard. This fact makes it hard for developers to understand what exactly is going on in code they haven&amp;rsquo;t written and, most importantly, for type checking tools found in many IDEs [PyCharm, PyDev come to mind] that are limited due to the fact that they don&amp;rsquo;t have any indicator of what type the objects are. As a result they resort to trying to infer the type with (as mentioned in the presentation) around 50% success rate.&lt;/p&gt;
&lt;h4 id=&#34;type-hinting&#34;&gt;Type hinting&lt;/h4&gt;
&lt;p&gt;Type hinting is a formal solution to statically indicate the type of a value within your Python code. It was specified in 
&lt;a href=&#34;https://www.python.org/dev/peps/pep-0484/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PEP 484&lt;/a&gt;
and introduced in Python 3.5.&lt;/p&gt;
&lt;p&gt;Here’s an example of adding type information to a function. You annotate the arguments and the return value:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def greet(name: str) -&amp;gt; str:
    return &amp;quot;Hello, &amp;quot; + name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;name: str&lt;/strong&gt; syntax indicates the name argument should be of type str. The &lt;strong&gt;-&amp;gt;&lt;/strong&gt; syntax indicates the greet() function will return a string.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;The below two statements can be found in the 
&lt;a href=&#34;https://www.youtube.com/watch?v=2wDvzy6Hgxg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Type Hinting&lt;/a&gt; presentation:&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;why-type-hints&#34;&gt;Why Type Hints&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Helps Type Checkers&lt;/strong&gt;: By hinting at what type you want the object to be the type checker can easily detect if, for instance, you&amp;rsquo;re passing an object with a type that isn&amp;rsquo;t expected.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Helps with documentation&lt;/strong&gt;: A third person viewing your code will know what is expected where, ergo, how to use it without getting them TypeErrors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Helps IDEs develop more accurate and robust tools&lt;/strong&gt;: Development Environments will be better suited at suggesting appropriate methods when know what type your object is. You have probably experienced this with some IDE at some point, hitting the . and having methods/attributes pop up which aren&amp;rsquo;t defined for an object.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;why-use-static-type-checkers&#34;&gt;Why use Static Type Checkers?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Find bugs sooner&lt;/strong&gt;: This is self evident, I believe.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The larger your project the more you need it&lt;/strong&gt;: Again, makes sense. Static languages offer a robustness and control that dynamic languages lack. The bigger and more complex
your application becomes the more control and predictability (from a behavioral aspect) you require.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Large teams are already running static analysis&lt;/strong&gt;: I&amp;rsquo;m guessing this verifies the first two points.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;type-hinting-with-mypy&#34;&gt;Type Hinting with Mypy&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;http://mypy-lang.org/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mypy&lt;/a&gt; is an optional static type checker for Python that aims to combine the benefits of dynamic (or &amp;ldquo;duck&amp;rdquo;) typing and static typing. Mypy combines the expressive power and convenience of Python with a powerful type system and compile-time type checking. Mypy type checks standard Python programs; run them using any Python VM with basically no runtime overhead.&lt;/p&gt;
&lt;p&gt;PEP 484 doesn&amp;rsquo;t enforce anything; it is simply setting a direction for function annotations and proposing guidelines for how type checking can/should be performed. You can annotate your functions and hint as many things as you want; your scripts will still run regardless of the presence of annotations because Python itself doesn&amp;rsquo;t use them.&lt;/p&gt;
&lt;p&gt;As noted in the PEP, hinting types should generally take three forms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Function annotations&lt;/strong&gt;. 
&lt;a href=&#34;https://www.python.org/dev/peps/pep-3107/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PEP 3107&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stub files&lt;/strong&gt; for built-in/user modules.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Special # type&lt;/strong&gt;: type comments that complement the first two forms. (See: 
&lt;a href=&#34;https://stackoverflow.com/questions/39971929/what-are-variable-annotations-in-python-3-6/39973133#39973133&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What are variable annotations in Python 3.6?&lt;/a&gt; for a Python 3.6 update for &lt;strong&gt;# type: type&lt;/strong&gt; comments)
Additionally, you&amp;rsquo;ll want to use type hints in conjunction with the new typing module introduced in Py3.5.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Additionally, you&amp;rsquo;ll want to use type hints in conjunction with the new &lt;strong&gt;typing module&lt;/strong&gt; introduced in Py3.5.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;the-typing-module&#34;&gt;The Typing Module&lt;/h3&gt;
&lt;p&gt;The Typing Module supports type hints as specified by 
&lt;a href=&#34;https://www.python.org/dev/peps/pep-0484/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PEP 484&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The typing module also supports:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&#34;https://docs.python.org/3/library/typing.html#type-aliases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Type aliasing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Type hinting for callback functions: 
&lt;a href=&#34;https://docs.python.org/3/library/typing.html#callable&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Callable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://docs.python.org/3/library/typing.html#generics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Generics&lt;/a&gt; - Abstract base classes have been extended to support subscription to denote expected types for container elements&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://docs.python.org/3/library/typing.html#user-defined-generic-types&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;User-defined generic types&lt;/a&gt; - A user-defined class can be defined as a generic class&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://docs.python.org/3/library/typing.html#typing.Any&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Any type&lt;/a&gt; - Every type is a subtype of Any&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;type-hinting-generics&#34;&gt;Type Hinting Generics&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;from typing import List
class Solution:
    def twoSum(self, numbers: List[int], target: int) -&amp;gt; List[int]:
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;list-tupleetc-vs-listtupleetc&#34;&gt;List, Tuple/etc vs list/tuple/etc&lt;/h3&gt;
&lt;p&gt;typing.Tuple and typing.List are 
&lt;a href=&#34;https://docs.python.org/3/library/typing.html#generics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Generic types&lt;/a&gt;; this means you can specify what type their contents must be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def f(points: Tuple[float, float]):
    return map(do_stuff, points)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This specifies that the tuple passed in must contain two float values.&lt;br&gt;
&lt;strong&gt;You can&amp;rsquo;t do this with the built-in tuple type before Python 3.9.&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Python 3.9 has the change that built-in types support hints&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    You should always pick the typing generics even when you are not currently restricting the contents. It is easier to add that constraint later with a generic type as the resulting change will be smaller.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    From Python 3.9 (PEP 585) onwards tuple, list and various other classes are now generic types. Using these rather than their typing counterpart is now preferred.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    You should always pick then &lt;strong&gt;non-typing generics&lt;/strong&gt; whenever possible as the old &lt;strong&gt;typing.Tuple&lt;/strong&gt;, &lt;strong&gt;typing.List&lt;/strong&gt; and &lt;strong&gt;other generics&lt;/strong&gt; are &lt;strong&gt;deprecated&lt;/strong&gt; and will be removed in a later version of Python.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/32557920/what-are-type-hints-in-python-3-5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What are type hints in Python 3.5?&lt;/a&gt;

&lt;a href=&#34;https://www.python.org/dev/peps/pep-0585/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PEP 585 &amp;ndash; Type Hinting Generics In Standard Collections&lt;/a&gt;

&lt;a href=&#34;https://docs.python.org/3.9/library/typing.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;typing — Support for type hints&lt;/a&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/39458193/using-list-tuple-etc-from-typing-vs-directly-referring-type-as-list-tuple-etc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Using List/Tuple/etc. from typing vs directly referring type as list/tuple/etc&lt;/a&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/52629265/static-typing-in-python3-list-vs-list&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Static typing in python3: list vs List&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.python.org/dev/peps/pep-0483/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PEP 483 &amp;ndash; The Theory of Type Hints&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.python.org/dev/peps/pep-0484/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PEP 484 &amp;ndash; Type Hints&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.youtube.com/watch?v=2wDvzy6Hgxg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Type Hints - Guido van Rossum - PyCon 2015&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://realpython.com/lessons/type-hinting/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Type Hinting&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://realpython.com/lessons/type-checking-mypy/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Type Checking With Mypy&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://mypy-lang.org/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mypy&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Whatis Locate Which Whereis</title>
      <link>/linux/whatis-locate-which-whereis/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/linux/whatis-locate-which-whereis/</guid>
      <description>&lt;h2 id=&#34;whatis-locate-which-whereis&#34;&gt;Whatis Locate Which Whereis&lt;/h2&gt;
&lt;h3 id=&#34;whatis&#34;&gt;Whatis&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;hongwei@840-g5:~$ whatis whatis
whatis (1)           - display one-line manual page descriptions
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;locate&#34;&gt;Locate&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;hongwei@840-g5:~$ whatis locate
locate (1)           - find files by name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;locate&lt;/strong&gt; indeed finds all the files that have the pattern specified anywhere in their paths. You can tell it to only find files and directories whose names (rather than full paths) include the pattern with the &lt;strong&gt;-b&lt;/strong&gt; option, which is usually what you want, and gives a less unwieldy list.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;locate&lt;/strong&gt; is fast because it uses a binary database that gets periodically updated (once daily, by cron). You can update it yourself to ensure recently added files are found by running &lt;strong&gt;sudo updatedb&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;One more thing about locate - &lt;strong&gt;it doesn&amp;rsquo;t care whether files still exist or not&lt;/strong&gt;, so to avoid finding recently deleted files, use -e. Often I also pipe to less as the list can be long. Typically I do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo updatedb &amp;amp;&amp;amp; locate -b -e psql | less
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;which&#34;&gt;Which&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;hongwei@840-g5:~$ whatis which
which (1)            - locate a command
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;which&lt;/strong&gt; finds the binary executable of the program (if it is in your PATH)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;which&lt;/strong&gt; returns the  pathnames of the files (or links) which would be executed in the current environment, had its arguments been given as commands in a strictly POSIX-conformant shell.  It does this by searching the &lt;strong&gt;PATH&lt;/strong&gt; for executable files matching the names of the arguments. It does not canonicalize path names.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hongwei@840-g5:~$ which psql
/usr/bin/psql
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;whereis&#34;&gt;Whereis&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;hongwei@840-g5:~$ whatis whereis
whereis (1)          - locate the binary, source, and manual page files for a command
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;whereis&lt;/strong&gt; finds the binary, the source, and the man page files for a program.&lt;br&gt;
&lt;strong&gt;whereis&lt;/strong&gt; locates the binary, source and manual files for the specified command names.&lt;br&gt;
&lt;strong&gt;whereis&lt;/strong&gt; attempts to locate the desired program in the standard Linux places, and in the places specified by &lt;strong&gt;$PATH&lt;/strong&gt; and &lt;strong&gt;$MANPATH&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hongwei@840-g5:~$ whereis psql
psql: /usr/bin/psql /usr/share/man/man1/psql.1.gz
hongwei@840-g5:~$ whereis postgresql
postgresql: /usr/lib/postgresql /etc/postgresql /usr/share/postgresql
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://askubuntu.com/questions/799776/what-is-the-difference-between-locate-whereis-which&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What is the difference between locate/whereis/which&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Set Up MySQL Cluster</title>
      <link>/linux/set-up-mysql-master-slave-cluster/</link>
      <pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/linux/set-up-mysql-master-slave-cluster/</guid>
      <description>&lt;p&gt;This document preassumes that you are familiar with VirtualBox, Vagrant on Linux.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;VirtualBox&lt;/li&gt;
&lt;li&gt;Vagrant&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-to-build&#34;&gt;What to Build&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;3 Virtual Machines&lt;/li&gt;
&lt;li&gt;3 MySQL instances running on the 3 VMs&lt;/li&gt;
&lt;li&gt;Employees Sample Database&lt;/li&gt;
&lt;li&gt;Data replication&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ip-settings&#34;&gt;IP Settings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Master  - 192.168.0.201&lt;/li&gt;
&lt;li&gt;Slave-1 - 192.168.0.202&lt;/li&gt;
&lt;li&gt;Slave-2 - 192.168.0.203&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vagrantfiles&#34;&gt;Vagrantfiles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;./Vagrantfile-master&#34;&gt;Vagrantfile-Master&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;./Vagrantfile-slave-1&#34;&gt;Vagrantfile-Slave-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;./Vagrantfile-slave-2&#34;&gt;Vagrantfile-Slave-2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;
&lt;h3 id=&#34;boot-up-virtual-machines&#34;&gt;Boot up Virtual Machines&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use &amp;lsquo;vagrant up&amp;rsquo; to boot up 3 virtual machines.&lt;/li&gt;
&lt;li&gt;Use &amp;lsquo;vagrant halt&amp;rsquo; to power off the VMs&lt;/li&gt;
&lt;li&gt;Open VirtualBox GUI and change the MAC addresses of the 3 VMs&lt;br&gt;
Make sure the 3 VMs have different MAC addresses&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;install-mysql-server&#34;&gt;Install MySQL Server&lt;/h3&gt;
&lt;p&gt;Install MySQL server on the 3 VMs separately.&lt;br&gt;
The guide 
&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-centos-8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How To Install MySQL on CentOS 8&lt;/a&gt; can be referenced.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo dnf install mysql-server
sudo systemctl start mysqld.service
sudo systemctl status mysqld
sudo systemctl enable mysqld
sudo mysql_secure_installation
mysqladmin -u root -p version
mysql -u root -p
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;configure-mysql-server-on-master-vm&#34;&gt;Configure MySQL Server on Master VM&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Edit MySQL configuration file &amp;lsquo;/etc/my.cnf&amp;rsquo;. Add the below configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;[mysqld]&lt;br&gt;
log-bin=mysql-bin # Optinal&lt;br&gt;
server-id=1　　　　# Must&lt;/p&gt;
&lt;p&gt;bind-address = 0.0.0.0 # Must&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;./config-master.png&#34; alt=&#34;config-master&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Restart MySQL server service&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;System command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo systemctl restart mysqld
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Create user for syncing data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MySQL commands:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE USER &#39;repl&#39;@&#39;192.168.0.%&#39; IDENTIFIED BY &#39;123456&#39;;  
GRANT REPLICATION SLAVE ON *.* TO &#39;repl&#39;@&#39;192.168.0.%&#39;;  
FLUSH PRIVILEGES;  
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Check master status&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./master-status.png&#34; alt=&#34;master-status&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;configure-mysql-server-on-slave-vm&#34;&gt;Configure MySQL Server on Slave VM&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Edit MySQL configuration file &amp;lsquo;/etc/my.cnf&amp;rsquo;. Add the below configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;[mysqld]&lt;br&gt;
server-id=2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;./config-slave-1.png&#34; alt=&#34;config-slave-1&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Restart MySQL server service&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;System command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo systemctl restart mysqld
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Configure syncronization&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MySQL command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;change master to master_host=&#39;192.168.0.201&#39;, master_user=&#39;repl&#39;, master_password=&#39;123456&#39;, master_log_file=&#39;mysql-bin.000001&#39;, master_log_pos=155;

start slave;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./sync-config-slave-1.png&#34; alt=&#34;sync-config-slave-1&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check slave status&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both &lt;strong&gt;Slave_IO_Running&lt;/strong&gt; and &lt;strong&gt;Slave_SQL_Running&lt;/strong&gt; should be &amp;lsquo;&lt;strong&gt;Yes&lt;/strong&gt;&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./slave-1-status.png&#34; alt=&#34;slave-1-status&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Same configuration and steps on Slave-2 VM, except the &lt;strong&gt;server-id=3&lt;/strong&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;import-the-employees-sample-database&#34;&gt;Import the &amp;lsquo;Employees Sample Database&amp;rsquo;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Sync folder&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Note that when you vagrant ssh into your machine, you&amp;rsquo;re in /home/vagrant. /home/vagrant is a different directory from the synced /vagrant directory.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;./sync-folder.png&#34; alt=&#34;sync-folder&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    By default, Vagrant only syncs the folders on &lt;strong&gt;vagrant up&lt;/strong&gt; or &lt;strong&gt;vagrant reload&lt;/strong&gt;.&lt;br&gt;
The tool &lt;strong&gt;rsync&lt;/strong&gt; can be used for data syncronization.
  &lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Download the &amp;lsquo;Employees Sample Database&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Download the zip file from 
&lt;a href=&#34;https://github.com/datacharmer/test_db&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Employees DB on GitHub&lt;/a&gt;, unzip the file and put the unzipped folder into the master VM folder of the host machine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./database-folder.png&#34; alt=&#34;database-folder&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reload the master VM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here we use the simple way, just reload the master VM.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Import the database&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On master VM:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd test_db-master/
mysql -u root -p -t &amp;lt; employees.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./import-result.png&#34; alt=&#34;import-result&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Validating the Employee Data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;time mysql -u root -p -t &amp;lt; test_employees_sha.sql&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./validating-result.png&#34; alt=&#34;validating-result&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check data on slaves&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you can see all the data has been replicated on the slave servers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./data-synced-1.png&#34; alt=&#34;data-synced-1&#34;&gt;
&lt;img src=&#34;./data-synced-2.png&#34; alt=&#34;data-synced-2&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;errors&#34;&gt;Errors&lt;/h3&gt;
&lt;h4 id=&#34;slave_io_running-no&#34;&gt;Slave_IO_Running: No&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;./Slave_IO_Running-error.png&#34; alt=&#34;Slave_IO_Running-error&#34;&gt;&lt;/p&gt;
&lt;p&gt;Possible reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Forget to restart mysqld service&lt;/li&gt;
&lt;li&gt;Forget to bind address.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Restart mysqld service&lt;/li&gt;
&lt;li&gt;Use netstat to check the status, i.e.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./Slave_IO_Running-solution.png&#34; alt=&#34;Slave_IO_Running-solution&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.vagrantup.com/intro/getting-started/synced_folders&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Synced Folders&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-centos-8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How To Install MySQL on CentOS 8&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://dev.mysql.com/doc/employee/en/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Employees Sample Database&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.cnblogs.com/cjsblog/p/9706370.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MySQL Cluster COnfiguration&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/17666249/how-do-i-import-an-sql-file-using-the-command-line-in-mysql&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How To Import SQL File&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Build A Free Website In Minutes - Part 5</title>
      <link>/post/build-a-free-website-in-minutes-part-5/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/post/build-a-free-website-in-minutes-part-5/</guid>
      <description>&lt;p&gt;The website has been up and running for a while. Today I want to update a document on another machine. The steps below describe how to set up the environment on the machine.&lt;/p&gt;
&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Install Hugo Extended version&lt;/li&gt;
&lt;li&gt;Gitclone the repository&lt;/li&gt;
&lt;li&gt;Delete the &amp;lsquo;public&amp;rsquo; folder&lt;/li&gt;
&lt;li&gt;Update the submodule&lt;/li&gt;
&lt;li&gt;Checkout the branch &amp;lsquo;master&amp;rsquo;&lt;/li&gt;
&lt;li&gt;Work on the document&lt;/li&gt;
&lt;li&gt;Add, Commit and Push as before&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;step-1-install-hugo-extended-version&#34;&gt;Step 1: Install Hugo Extended version&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;wget https://github.com/gohugoio/hugo/releases/download/v0.74.3/hugo_extended_0.74.3_Linux-64bit.deb

sudo apt install ./hugo_extended_0.74.3_Linux-64bit.deb 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-2-gitclone-the-repository&#34;&gt;Step 2: Gitclone the repository&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/flycoolman/academic-kickstart.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-3-delete-the-public-folder&#34;&gt;Step 3: Delete the &amp;lsquo;public&amp;rsquo; folder&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd academic-kickstart/
rm -rf public
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-4-update-the-submodule&#34;&gt;Step 4: Update the submodule&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-5-checkout-the-branch-master&#34;&gt;Step 5: Checkout the branch &amp;lsquo;master&amp;rsquo;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd public
git checkout master
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-6-work-on-the-document&#34;&gt;Step 6: Work on the document&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;blahblahblah...
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-7-build-the-website&#34;&gt;Step 7: Build the website&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd academic-kickstart/
hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-8-add-commit-and-push-as-before&#34;&gt;Step 8: Add, Commit and Push as before&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd public
git add .
git commit -m &amp;quot;blahblah...&amp;quot;
git push

cd ..
git add .
git commit -m &amp;quot;blahblah...&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ALL SET!&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;errors-and-tricks&#34;&gt;Errors and Tricks&lt;/h2&gt;
&lt;h3 id=&#34;error-1-unable-to-locate-template-for-shortcode&#34;&gt;Error 1: Unable to locate template for shortcode&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;hongwei@HP840G1:~/Documents/academic-kickstart$ hugo server&lt;br&gt;
Building sites … ERROR 2020/08/04 07:51:50 Unable to locate template for shortcode &amp;ldquo;fragment&amp;rdquo; in page &amp;ldquo;slides/example/index.md&amp;rdquo;&lt;br&gt;
ERROR 2020/08/04 07:51:50 Unable to locate template for shortcode &amp;ldquo;alert&amp;rdquo; in page &amp;ldquo;talk/example/index.md&amp;rdquo;&lt;br&gt;
ERROR 2020/08/04 07:51:50 Unable to locate template for shortcode &amp;ldquo;alert&amp;rdquo; in page &amp;ldquo;publication/preprint/index.md&amp;rdquo;&lt;br&gt;
ERROR 2020/08/04 07:51:50 Unable to locate template for shortcode &amp;ldquo;alert&amp;rdquo; in page &amp;ldquo;post/build-a-free-website-in-minutes-part-1/index.md&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;br&gt;
Install Hugo Extended version.&lt;/p&gt;
&lt;h3 id=&#34;error-2-failed-to-extract-shortcode&#34;&gt;Error 2: failed to extract shortcode&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;hongwei@HP840G1:~/Documents/academic-kickstart$ hugo server&lt;br&gt;
Built in 11 ms&lt;br&gt;
Error: Error building site: &amp;ldquo;/home/hongwei/Documents/academic-kickstart/content/home/demo.md:61:1&amp;rdquo;: failed to extract shortcode: template for shortcode &amp;ldquo;alert&amp;rdquo; not found&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;br&gt;
If the Hugo Extended version has been installed, update the git submodule, see &lt;strong&gt;Step 4&lt;/strong&gt; above.&lt;/p&gt;
&lt;h3 id=&#34;error-3-public-already-exists&#34;&gt;Error 3: &amp;lsquo;public&amp;rsquo; already exists&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;hongwei@HP840G1:~/Documents/academic-kickstart$ git submodule update &amp;ndash;init &amp;ndash;recursive&lt;br&gt;
Submodule &amp;lsquo;public&amp;rsquo; (&lt;a href=&#34;https://github.com/flycoolman/flycoolman.github.io.git&#34;&gt;https://github.com/flycoolman/flycoolman.github.io.git&lt;/a&gt;) registered for path &amp;lsquo;public&amp;rsquo;&lt;br&gt;
Submodule &amp;lsquo;themes/academic&amp;rsquo; (&lt;a href=&#34;https://github.com/gcushen/hugo-academic.git&#34;&gt;https://github.com/gcushen/hugo-academic.git&lt;/a&gt;) registered for path &amp;lsquo;themes/academic&amp;rsquo;&lt;br&gt;
fatal: destination path &amp;lsquo;/home/hongwei/Documents/academic-kickstart/public&amp;rsquo; already exists and is not an empty directory.&lt;br&gt;
fatal: clone of &amp;lsquo;&lt;a href=&#34;https://github.com/flycoolman/flycoolman.github.io.git&#39;&#34;&gt;https://github.com/flycoolman/flycoolman.github.io.git&#39;&lt;/a&gt; into submodule path &amp;lsquo;/home/hongwei/Documents/academic-kickstart/public&amp;rsquo; failed&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;br&gt;
Delete the &amp;lsquo;public&amp;rsquo; folder, and update the git submodule again.&lt;/p&gt;
&lt;h3 id=&#34;error-4-forgot-to-check-out-before-working-on-document&#34;&gt;Error 4: forgot to check out before working on document&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;hongwei@HP840G1:~/Documents/academic-kickstart/public$ git status&lt;br&gt;
HEAD detached from f82be3e&lt;br&gt;
nothing to commit, working tree clean&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;hongwei@HP840G1:~/Documents/academic-kickstart/public$ git push&lt;br&gt;
fatal: You are not currently on a branch.&lt;br&gt;
To push the history leading to the current (detached HEAD)&lt;br&gt;
state now, use&lt;/p&gt;
&lt;p&gt;git push origin HEAD:&lt;name-of-remote-branch&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;hongwei@HP840G1:~/Documents/academic-kickstart/public$ git branch&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(HEAD detached from f82be3e)&lt;br&gt;
master&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;hongwei@HP840G1:~/Documents/academic-kickstart/public$ git checkout master&lt;br&gt;
Warning: you are leaving 1 commit behind, not connected to&lt;br&gt;
any of your branches:&lt;/p&gt;
&lt;p&gt;1090675 revise Upgrade to VirtualBox 6.1 and Vagrant 2.9.9 on Ubuntu 18.04&lt;/p&gt;
&lt;p&gt;If you want to keep it by creating a new branch, this may be a good time&lt;br&gt;
to do so with:&lt;/p&gt;
&lt;p&gt;git branch &lt;new-branch-name&gt; 1090675&lt;/p&gt;
&lt;p&gt;Switched to branch &amp;lsquo;master&amp;rsquo;&lt;br&gt;
Your branch is up to date with &amp;lsquo;origin/master&amp;rsquo;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git branch temp 1090675
git push --set-upstream origin temp
git checkout temp
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Merge the branch &lt;strong&gt;temp&lt;/strong&gt; to &lt;strong&gt;master&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git checkout master 
git pull

git branch --merged
git branch -vv
git branch -d temp
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Set Up Shardingsphere Development Environment</title>
      <link>/coding/java/shardingsphere-dev-env-setup/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/coding/java/shardingsphere-dev-env-setup/</guid>
      <description>&lt;h2 id=&#34;set-up-shardingsphere-development-environment&#34;&gt;Set Up Shardingsphere Development Environment&lt;/h2&gt;
&lt;p&gt;This document used the official release version to set up and verify development environment.
This way could help to rule out any unstable issues of source code and to focus the issues on environment.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Linux (Ubuntu 18.04)&lt;/li&gt;
&lt;li&gt;Source code 
&lt;a href=&#34;https://www.apache.org/dyn/closer.cgi/shardingsphere/4.1.1/apache-shardingsphere-4.1.1-src.zip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;4.1.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Eclipse&lt;/li&gt;
&lt;li&gt;IntelliJ IDEA&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Choose the proper IDE (Eclipse or IntelliJ IDEA), even No IDE
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;java-development-environment-no-ide&#34;&gt;Java Development Environment (No IDE)&lt;/h3&gt;
&lt;h4 id=&#34;install-jdk-8&#34;&gt;Install JDK 8&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install openjdk-8-jdk

$ java -version
openjdk version &amp;quot;1.8.0_252&amp;quot;
OpenJDK Runtime Environment (build 1.8.0_252-8u252-b09-1~18.04-b09)
OpenJDK 64-Bit Server VM (build 25.252-b09, mixed mode)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;install-maven-optional&#34;&gt;Install Maven (Optional)&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install maven

$ mvn -version
Apache Maven 3.6.0
Maven home: /usr/share/maven
Java version: 1.8.0_252, vendor: Private Build, runtime: /usr/lib/jvm/java-8-openjdk-amd64/jre
Default locale: en_US, platform encoding: UTF-8
OS name: &amp;quot;linux&amp;quot;, version: &amp;quot;5.4.0-42-generic&amp;quot;, arch: &amp;quot;amd64&amp;quot;, family: &amp;quot;unix&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;unzip-source-code&#34;&gt;Unzip Source Code&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Download 
&lt;a href=&#34;https://www.apache.org/dyn/closer.cgi/shardingsphere/4.1.1/apache-shardingsphere-4.1.1-src.zip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Source Code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unzip the source code&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  unzip apache-shardingsphere-4.1.1-src.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change file permissions&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  chmod -R 755 apache-shardingsphere-4.1.1-src-release/
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;build-and-test&#34;&gt;Build and Test&lt;/h4&gt;
&lt;p&gt;Based the Github page 
&lt;a href=&#34;https://github.com/apache/shardingsphere&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Build Apache ShardingSphere&lt;/a&gt;, there is a script to do the build&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./mvnw clean install -Prelease
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Make sure all the tests pass
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;issues-and-tricks&#34;&gt;Issues and Tricks&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Lombok in the project not support Java 11&lt;br&gt;
If Java 11 is set as default, this may cause the error below for Lombok does not support Java 11.
&lt;img src=&#34;./java-11-not-support-error.png&#34; alt=&#34;java.lang.ExceptionInInitializerError&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;br&gt;
Use Java 8.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multiple Java version installed&lt;br&gt;
If multiple versions of Java are installed on the system, such as Java 11 and Java 8, in the mean time, Java 11 is set as default, the above error will cause the build failure.
Even the default JDK is changed to Java 8 by &lt;strong&gt;update-alternatives &amp;ndash;config java&lt;/strong&gt;, the above issue may still be there.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;br&gt;
Uninstall all the JDKs by the command&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get remove openjdk* 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and reinstall JDK 8.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;eclipse&#34;&gt;Eclipse&lt;/h3&gt;
&lt;h4 id=&#34;import-the-project&#34;&gt;Import the Project&lt;/h4&gt;
&lt;p&gt;Follow the steps below to import the project.&lt;/p&gt;
&lt;p&gt;Import projects&amp;hellip; or File &amp;mdash;&amp;gt; Import&amp;hellip;
&lt;img src=&#34;./import-projects.png&#34; alt=&#34;import-projects&#34;&gt;&lt;br&gt;
&lt;img src=&#34;./existing-maven-projects.png&#34; alt=&#34;existing-maven-projects&#34;&gt;&lt;br&gt;
&lt;img src=&#34;./select-all-pom-files.png&#34; alt=&#34;select-all-pom-files&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The import is done by m2e plugin.&lt;br&gt;
The &lt;strong&gt;warning&lt;/strong&gt; shown below can be ignored.&lt;br&gt;
maven-remote-resources-plugin (goal &amp;ldquo;process&amp;rdquo;) is ignored by m2e.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;build-and-test-1&#34;&gt;Build and Test&lt;/h4&gt;
&lt;p&gt;Build and test as separate steps, i.e.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run As &amp;mdash;&amp;gt; Maven clean&lt;/li&gt;
&lt;li&gt;Run As &amp;mdash;&amp;gt; Maven build&lt;/li&gt;
&lt;li&gt;Run As &amp;mdash;&amp;gt; Maven test&lt;/li&gt;
&lt;li&gt;Run As &amp;mdash;&amp;gt; Maven install&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./maven-run-as-options.png&#34; alt=&#34;maven-run-as-options&#34;&gt;&lt;/p&gt;
&lt;p&gt;Or define the goals at one time, i.e.
Run As &amp;mdash;&amp;gt; Maven build&amp;hellip;  &amp;mdash;&amp;gt; Goals: (clean install)
&lt;img src=&#34;./maven-custom-build.png&#34; alt=&#34;maven-custom-build&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Specific module can be chosen and do the same build.&lt;br&gt;
Maven will build the dependencies automatically.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;issues-and-tricks-1&#34;&gt;Issues and Tricks&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Too many files with unapproved license&lt;br&gt;
When doing &amp;lsquo;install&amp;rsquo;, the below error occurs. No issue with &amp;lsquo;build&amp;rsquo; and &amp;lsquo;test&amp;rsquo;, but with &amp;lsquo;install&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;[INFO] BUILD FAILURE
Too many files with unapproved license&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;br&gt;
Use or check out clean source code, then do &amp;lsquo;install&amp;rsquo;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build failed with 8 threads&lt;br&gt;
When setting 8 threads for build, the build failed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;br&gt;
Set build threads as 1.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./1-thread.png&#34; alt=&#34;1-thread&#34;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;intellij-idea&#34;&gt;IntelliJ IDEA&lt;/h3&gt;
&lt;h4 id=&#34;import-the-project-1&#34;&gt;Import the Project&lt;/h4&gt;
&lt;p&gt;Follow the steps below to import the project.&lt;/p&gt;
&lt;p&gt;On the Welcome window, select &lt;strong&gt;Import Project&lt;/strong&gt;, then select the project POM file in the next window.
&lt;img src=&#34;./intellij-idea-import.png&#34; alt=&#34;intellij-idea-import&#34;&gt;&lt;br&gt;
&lt;img src=&#34;./select-project-pom-file.png&#34; alt=&#34;select-project-pom-file&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The &lt;strong&gt;errors&lt;/strong&gt; and &lt;strong&gt;warnings&lt;/strong&gt; of the POM file analysis can be ignored.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;build-and-test-2&#34;&gt;Build and Test&lt;/h4&gt;
&lt;p&gt;As there are errors in the POM file, the tool window of Maven lifecyle may not show up automatically.&lt;br&gt;
To add Maven support, right click on the project name in the project view, then select &lt;strong&gt;Add Framework Support&amp;hellip;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In the &lt;strong&gt;Maven&lt;/strong&gt; window, different phase of lifecyle of project or module can be chosen to build.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./intellij-idea-maven-build.png&#34; alt=&#34;intellij-idea-maven-build&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Specific module can be chosen and do the build.&lt;br&gt;
Maven will build the dependencies automatically.
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.tutorialspoint.com/maven/maven_build_life_cycle.htm#:~:text=When%20Maven%20starts%20building%20a,are%20registered%20with%20each%20phase.&amp;amp;text=A%20goal%20represents%20a%20specific,and%20managing%20of%20a%20project.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Maven - Build Life Cycle&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Introduction to the Build Lifecycle&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Inversion of Control and Dependency Injection</title>
      <link>/coding/java/ioc-di/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/coding/java/ioc-di/</guid>
      <description>&lt;h3 id=&#34;inversion-of-control-ioc&#34;&gt;Inversion of Control (IoC)&lt;/h3&gt;
&lt;p&gt;A real system might have dozens of services and components. To make a loosely coupled application, the way is to plug in the plugins (components and services) at some point.
So the core problem is how to assemble the plugins into an application. Then frameworks aim to resolve the problem. Usually &lt;strong&gt;Inversion of Control&lt;/strong&gt; is used in frameworks, so does Spring Framework. That&amp;rsquo;s why Inversion of Control (IoC) is the core technology of Spring Framework.&lt;/p&gt;
&lt;h4 id=&#34;inversion-of-control-ioc-vs-traditional-control&#34;&gt;Inversion of Control (IoC) vs. Traditional Control&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Traditional Control&lt;br&gt;
In traditional programming, the custom code that expresses the purpose of the program calls into reusable libraries to take care of generic tasks.&lt;br&gt;
I.e.&lt;br&gt;
the custom object instantiates its dependent objects, then uses the objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inversion of Control (IoC)&lt;br&gt;
IoC inverts the flow of control as compared to traditional control flow. In IoC, custom-written portions of a computer program receive the flow of control from a generic framework.
Usually it is the framework that calls into the custom, or task-specific, code.&lt;br&gt;
I.e.&lt;br&gt;
the custom object receives the instantiated dependent objects from framework.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;what-can-ioc-serve&#34;&gt;What Can IoC Serve&lt;/h4&gt;
&lt;p&gt;IoC as a design guideline, is used to increase modularity of the program and make it extensible. It serves the following purposes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To decouple the execution of a task from implementation.&lt;/li&gt;
&lt;li&gt;To make every module focus on what it is designed for.&lt;/li&gt;
&lt;li&gt;To free modules from assumptions about how and what other systems do, and instead rely on contracts.&lt;/li&gt;
&lt;li&gt;To prevent side effects on other modules when replacing a module.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;spring-implementation-of-ioc-principle&#34;&gt;Spring Implementation of IoC Principle&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;IoC&lt;/strong&gt; is also known as &lt;strong&gt;dependency injection (DI)&lt;/strong&gt;. It is a process whereby objects define their dependencies (that is, the other objects they work with) only through constructor arguments, arguments to a factory method, or properties that are set on the object instance after it is constructed or returned from a factory method. The container then injects those dependencies when it creates the bean. This process is fundamentally the inverse (hence the name, Inversion of Control) of the bean itself controlling the instantiation or location of its dependencies by using direct construction of classes or a mechanism such as the Service Locator pattern.&lt;/p&gt;
&lt;p&gt;This is common characteristic of frameworks, IoC manages java objects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;from instantiation to destruction through its BeanFactory.&lt;/li&gt;
&lt;li&gt;Java components that are instantiated by the IoC container are called beans, and the IoC container manages a bean&amp;rsquo;s scope, lifecycle events, and any AOP features for which it has been configured and coded.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    In Spring framework, the IoC Container does that job of injecting dependancies (DI) and not us, The flow of control is reversed, (Framework to Application) it is IoC with DI.
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&#34;spring-ioc-container&#34;&gt;Spring IoC Container&lt;/h3&gt;
&lt;p&gt;Central to the Spring Framework is its inversion of control (IoC) container, which provides a consistent means of configuring and managing Java objects using reflection. The container is responsible for managing object lifecycles of specific objects: creating these objects, calling their initialization methods, and configuring these objects by wiring them together.&lt;/p&gt;
&lt;p&gt;The interface &lt;strong&gt;org.springframework.context.ApplicationContext&lt;/strong&gt; represents the Spring IoC container and is responsible for &lt;strong&gt;instantiating&lt;/strong&gt;, &lt;strong&gt;configuring&lt;/strong&gt;, and &lt;strong&gt;assembling&lt;/strong&gt; the aforementioned beans. The container gets its instructions on what objects to instantiate, configure, and assemble by reading &lt;strong&gt;configuration metadata&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;Representation - org.springframework.context.ApplicationContext&lt;/li&gt;
&lt;li&gt;Responsibilities - instantiating, configuring, and assembling Beans&lt;/li&gt;
&lt;li&gt;Tool: configuration metadata&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;types-of-ioc-containers&#34;&gt;Types of IoC Containers&lt;/h4&gt;
&lt;p&gt;The &lt;strong&gt;org.springframework.beans&lt;/strong&gt; and &lt;strong&gt;org.springframework.context&lt;/strong&gt; packages provide the basis for the Spring Framework’s IoC container.&lt;br&gt;
The &lt;strong&gt;BeanFactory interface&lt;/strong&gt; provides an advanced configuration mechanism capable of managing objects of any nature.&lt;br&gt;
The &lt;strong&gt;ApplicationContext interface&lt;/strong&gt; builds on top of the BeanFactory (it is a sub-interface) and adds other functionality such as easier integration with Spring’s AOP features, message resource handling (for use in internationalization), event propagation, and application-layer specific contexts such as the WebApplicationContext for use in web applications.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BeanFactory container&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The BeanFactory is the actual representation of the Spring IoC container that is responsible for containing and otherwise managing the aforementioned beans.&lt;/li&gt;
&lt;li&gt;The BeanFactory interface is the central IoC container interface in Spring. The BeanFactory API provides the underlying basis for Spring’s IoC functionality.&lt;/li&gt;
&lt;li&gt;Its specific contracts are mostly used in integration with other parts of Spring and related third-party frameworks.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ApplicationContext container&lt;br&gt;
Because an ApplicationContext includes all the functionality of a BeanFactory, it is generally recommended over a plain BeanFactory, except for scenarios where full control over bean processing is needed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;In short, the BeanFactory provides the configuration framework and basic functionality, and the ApplicationContext adds more enterprise-specific functionality. The ApplicationContext is a complete superset of the BeanFactory.&lt;/li&gt;
&lt;li&gt;You should use an ApplicationContext unless you have a good reason for not doing so, with GenericApplicationContext and its subclass AnnotationConfigApplicationContext as the common implementations for custom bootstrapping.&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&#34;dependency-injection-di&#34;&gt;Dependency Injection (DI)&lt;/h3&gt;
&lt;p&gt;Inversion of Control is too generic a term, and thus people find it confusing. As a result with a lot of discussion with various IoC advocates, the name was settled on &lt;strong&gt;Dependency Injection&lt;/strong&gt;.&lt;br&gt;
Dependency injection generally means passing a dependent object as a parameter to a method, rather than having the method create the dependent object.
What it means in practice is that the method does not have a direct dependency on a particular implementation; any implementation that meets the requirements can be passed as a parameter.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The Spring IoC Container is the leading dependency injection framework.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;dependency-lookup-vs-dependency-injection&#34;&gt;Dependency Lookup vs. Dependency Injection&lt;/h4&gt;
&lt;p&gt;Objects can be obtained by means of either dependency lookup or dependency injection.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dependency lookup is a pattern where a caller asks the container object for an object with a specific name or of a specific type.&lt;/li&gt;
&lt;li&gt;Dependency injection is a pattern where the container passes objects by name to other objects, via either constructors, properties, or factory methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-styles-of-di&#34;&gt;The Styles of DI&lt;/h4&gt;
&lt;p&gt;Dependency Injection can be done by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Constructor-based dependency injection&lt;br&gt;
Constructor-based DI is accomplished by the container invoking a constructor with a number of arguments, each representing a dependency.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public class SimpleMovieLister {

      // the SimpleMovieLister has a dependency on a MovieFinder
      private MovieFinder movieFinder;

      // a constructor so that the Spring container can inject a MovieFinder
      public SimpleMovieLister(MovieFinder movieFinder) {
          this.movieFinder = movieFinder;
      }

      // business logic that actually uses the injected MovieFinder is omitted...
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setter-based dependency injection&lt;br&gt;
Setter-based DI is accomplished by the container calling setter methods on your beans after invoking a no-argument constructor or a no-argument static factory method to instantiate your bean.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public class SimpleMovieLister {

      // the SimpleMovieLister has a dependency on the MovieFinder
      private MovieFinder movieFinder;

      // a setter method so that the Spring container can inject a MovieFinder
      public void setMovieFinder(MovieFinder movieFinder) {
          this.movieFinder = movieFinder;
      }

      // business logic that actually uses the injected MovieFinder is omitted...
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;constructor-based-or-setter-based-di&#34;&gt;Constructor-based or Setter-based DI&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Constructor-based and setter-based DI can be mixed&lt;/li&gt;
&lt;li&gt;Constructors for mandatory dependencies and setter methods or configuration methods for optional dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Why&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Constructor injection lets you implement application components as immutable objects and ensures that required dependencies are not null. Furthermore, constructor-injected components are always returned to the client (calling) code in a fully initialized state.&lt;/li&gt;
&lt;li&gt;Setter injection should primarily only be used for optional dependencies that can be assigned reasonable default values within the class. Otherwise, not-null checks must be performed everywhere the code uses the dependency. One benefit of setter injection is that setter methods make objects of that class amenable to reconfiguration or re-injection later.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Use the DI style that makes the most sense for a particular class.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;ioc-vs-di&#34;&gt;IoC vs. DI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Interchangable&lt;br&gt;
IoC and DI are used interchangeably.&lt;/li&gt;
&lt;li&gt;Process and Result&lt;br&gt;
IoC is achieved through DI. DI is the process of providing the dependencies and IoC is the end result of DI.&lt;/li&gt;
&lt;li&gt;One to Many&lt;br&gt;
DI is a specific type of IoC and is not the only way to achieve IoC. There are other ways as well, such as:
&lt;ul&gt;
&lt;li&gt;Service Locator pattern&lt;/li&gt;
&lt;li&gt;Template method design pattern&lt;/li&gt;
&lt;li&gt;Strategy design pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;IoC basically facilitates having different components designed and coded separately and later used together by defining their relation with DI.&lt;/li&gt;
&lt;li&gt;By DI, the responsibility of creating objects is shifted from our application code to the Spring container; this phenomenon is called IoC.&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-introduction&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The IoC Container&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://martinfowler.com/articles/injection.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Inversion of Control Containers and the Dependency Injection pattern&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://en.wikipedia.org/wiki/Spring_Framework#Inversion_of_control_container_.28dependency_injection.29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Framework&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/9403155/what-is-dependency-injection-and-inversion-of-control-in-spring-framework&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What is Dependency Injection and Inversion of Control in Spring Framework?&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://howtodoinjava.com/spring-core/spring-ioc-vs-di/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring – Inversion of Control vs Dependency Injection&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://howtodoinjava.com/spring-core/different-spring-ioc-containers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring – IoC Containers&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://en.wikipedia.org/wiki/Inversion_of_control#Implementation_techniques&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Inversion of control&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/9403155/what-is-dependency-injection-and-inversion-of-control-in-spring-framework&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What is Dependency Injection and Inversion of Control in Spring Framework?&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/BeanFactory.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Interface BeanFactory&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/ApplicationContext.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Interface ApplicationContext&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-beanfactory&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The BeanFactory&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>IETF Datatracker Environment Setup</title>
      <link>/coding/python/ietf-datatracker-environment-setup/</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/coding/python/ietf-datatracker-environment-setup/</guid>
      <description>&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Linux host machine (i.e. Ubuntu 18.04)&lt;/li&gt;
&lt;li&gt;Vagrant (i.e. 2.9.9)&lt;/li&gt;
&lt;li&gt;VirtualBox (i.e. 6.1.12)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The version numbers are just for my environment.&lt;br&gt;
Find the original log of my setup &lt;a href=&#34;./ietf_datatracker_env_setup.txt&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;The steps are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use Vagrant to boot up a VM&lt;/li&gt;
&lt;li&gt;Install GUI on the VM&lt;/li&gt;
&lt;li&gt;Install Docker on the VM&lt;/li&gt;
&lt;li&gt;Install SVN&lt;/li&gt;
&lt;li&gt;Check out the branch&lt;/li&gt;
&lt;li&gt;Set up database&lt;/li&gt;
&lt;li&gt;Set up virtual environment&lt;/li&gt;
&lt;li&gt;Run the tests&lt;/li&gt;
&lt;li&gt;Start the Development Server&lt;/li&gt;
&lt;li&gt;Mailserver and Rsync Data&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;step-1-use-vagrant-to-boot-up-a-vm&#34;&gt;Step 1: Use Vagrant to boot up a VM&lt;/h3&gt;
&lt;p&gt;Put the below Vagrantfile into working directory and execute &amp;lsquo;Vagrant up&amp;rsquo;.

&lt;a href=&#34;./Vagrantfile&#34;&gt;Vagrantfile&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;step-2-install-gui-on-the-vm&#34;&gt;Step 2: Install GUI on the VM&lt;/h3&gt;
&lt;p&gt;Ssh to the VM,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vagrant ssh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then use the below commands to intall GUI on the VM.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo yum -y groupinstall &amp;quot;GNOME Desktop&amp;quot;
echo &amp;quot;exec gnome-session&amp;quot; &amp;gt;&amp;gt; ~/.xinitrc
systemctl set-default graphical.target
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use command&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;startx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in VirtualBox console to start the GUI.&lt;/p&gt;
&lt;h3 id=&#34;step-3-install-docker-on-the-vm&#34;&gt;Step 3: Install Docker on the VM&lt;/h3&gt;
&lt;p&gt;Install docker and start the service.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo yum -y install docker
sudo systemctl status docker
sudo systemctl start docker
sudo systemctl enable docker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create user group &amp;lsquo;docker&amp;rsquo; and add you into the group.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo groupadd docker
sudo usermod -aG docker $(whoami)
sudo usermod -aG docker vagrant
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reevaluate the group and restart the docker service.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;logout
sudo systemctl restart docker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check if you can run docker commands without sudo.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker info
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-4-install-svn&#34;&gt;Step 4: Install SVN&lt;/h3&gt;
&lt;p&gt;Add the repository and install SVN.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vim /etc/yum.repos.d/wandisco-svn.repo
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;[WandiscoSVN]
name=Wandisco SVN Repo
baseurl=http://opensource.wandisco.com/centos/$releasever/svn-1.8/RPMS/$basearch/
enabled=1
gpgcheck=0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;sudo yum remove subversion*
sudo yum clean all
sudo yum install subversion

svn --version
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-5-check-out-the-branch&#34;&gt;Step 5: Check out the branch&lt;/h3&gt;
&lt;p&gt;UTF-8 settings:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export LC_ALL=C
sudo vi .bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add below to the file ~/.bashrc&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LANG=en_US.UTF-8
export LANG&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Change SELinux settings, so that docker image can access your home directory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chcon -Rt svirt_sandbox_file_t /home/vagrant/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Checkout the branch&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir -p ietf
cd ietf
svn co https://svn.tools.ietf.org/svn/tools/ietfdb/personal/flycoolman/7.10.1.dev0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-6-set-up-database&#34;&gt;Step 6: Set up database&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd 7.10.1.dev0/
./docker/setupdb
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-7-set-up-virtual-environment&#34;&gt;Step 7: Set up virtual environment&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;./docker/run
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    rsyslog error can be ignored!&lt;br&gt;
[FAIL] rsyslogd is not running &amp;hellip; failed!
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;In virtual environment of the container&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install --upgrade -r requirements.txt

./ietf/manage.py migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;The below operation might be needed if the migration fails.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo cp docker/settings_local.py ietf/  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then run the migrate command again.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;step-8-run-the-tests&#34;&gt;Step 8: Run the tests&lt;/h3&gt;
&lt;p&gt;In the virtual environment to run the tests:&lt;/p&gt;
&lt;p&gt;./ietf/manage.py test &amp;ndash;settings=settings_sqlitetest&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Make sure that one of the following commands runs to completion without errors.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;step-9-start-the-development-server&#34;&gt;Step 9: Start the Development Server&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;./ietf/manage.py runserver 0.0.0.0:8000 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Test the access to datatracker.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./featured.png&#34; alt=&#34;ietf-datatracker&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;step-10-mailserver-and-rsync-data&#34;&gt;Step 10: Mailserver and Rsync Data&lt;/h3&gt;
&lt;p&gt;Go to 
&lt;a href=&#34;https://trac.tools.ietf.org/tools/ietfdb/wiki/SprintCoderSetup&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the original page&lt;/a&gt; for details about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://trac.tools.ietf.org/tools/ietfdb/wiki/SprintCoderSetup&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;(Optional) Run the mailserver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://trac.tools.ietf.org/tools/ietfdb/wiki/SprintCoderSetup&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Manually Edit or rsync Datatracker Data Directories&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;setup-complete&#34;&gt;Setup Complete&lt;/h3&gt;
&lt;p&gt;For other workflow things, please refer to 
&lt;a href=&#34;https://trac.tools.ietf.org/tools/ietfdb/wiki/SprintCoderSetup&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the original setup guide.&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-centos-7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How To Install and Use Docker on CentOS 7&lt;/a&gt;

&lt;a href=&#34;https://www.digitalocean.com/community/questions/how-to-fix-docker-got-permission-denied-while-trying-to-connect-to-the-docker-daemon-socket&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to fix docker: Got permission denied while trying to connect to the Docker daemon socket&lt;/a&gt;

&lt;a href=&#34;https://tecadmin.net/install-subversion-1-8-on-centos-rhel/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to Install Subversion (SVN) 1.8.19 on CentOS/RHEL 7/6/5&lt;/a&gt;

&lt;a href=&#34;https://trac.tools.ietf.org/tools/ietfdb/wiki/SprintCoderSetup&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sprint Coder Setup&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.techrepublic.com/article/how-to-install-a-gui-on-top-of-centos-7/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to install a GUI on top of CentOS 7&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://trac.tools.ietf.org/tools/ietfdb/wiki/SprintCoderSetupTroubleshooting&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SprintCoderSetupTroubleshooting&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://flycoolman.com/linux/ubuntu-18.04-upgrade-virtualbox-vagrant/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Upgrade to VirtualBox 6.1 and Vagrant 2.9.9 on Ubuntu 18.04&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Spring Beans</title>
      <link>/coding/java/spring-beans/</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/coding/java/spring-beans/</guid>
      <description>&lt;h3 id=&#34;spring-beans&#34;&gt;Spring Beans&lt;/h3&gt;
&lt;br&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;The objects that are managed by Spring IoC container&lt;/strong&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;The objects that form the backbone of your application and that are managed by the &lt;strong&gt;Spring IoC container&lt;/strong&gt; are called beans. A bean is an object that is instantiated, assembled, and otherwise managed by a Spring IoC container. These beans are created with the &lt;strong&gt;configuration metadata&lt;/strong&gt; that you supply to the container, for example, in the form of XML &lt;bean/&gt; definitions.&lt;/p&gt;
&lt;p&gt;In Spring, the objects that form the backbone of your application and that are managed by the Spring IoC container are called beans. A bean is an object that is instantiated, assembled, and otherwise managed by a Spring IoC container. Otherwise, a bean is simply one of many objects in your application. Beans, and the dependencies among them, are reflected in the configuration metadata used by a container.&lt;/p&gt;
&lt;p&gt;Spring Bean is nothing special, any object in the Spring framework that we initialize through Spring container is called Spring Bean. Any normal Java POJO class can be a Spring Bean if it’s configured to be initialized via container by providing configuration metadata information.&lt;/p&gt;
&lt;h3 id=&#34;spring-ioc-container&#34;&gt;Spring IoC Container&lt;/h3&gt;
&lt;br&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;Representation - org.springframework.context.ApplicationContext&lt;/li&gt;
&lt;li&gt;Responsibilities - instantiating, configuring, and assembling Beans&lt;/li&gt;
&lt;li&gt;Tool: configuration metadata&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;The interface org.springframework.context.ApplicationContext represents the Spring IoC container and is responsible for instantiating, configuring, and assembling the aforementioned beans. The container gets its instructions on what objects to instantiate, configure, and assemble by reading configuration metadata.&lt;/p&gt;
&lt;h3 id=&#34;configuration-metadata&#34;&gt;Configuration Metadata&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This configuration metadata represents how you as an application developer tell the Spring container to instantiate, configure, and assemble the objects in your application.&lt;/li&gt;
&lt;li&gt;The configuration metadata is represented in &lt;strong&gt;XML&lt;/strong&gt;, &lt;strong&gt;Java annotations&lt;/strong&gt;, or &lt;strong&gt;Java code&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;It allows you to express the objects that compose your application and the rich interdependencies between such objects.&lt;/li&gt;
&lt;li&gt;Spring configuration consists of at least one and typically more than one bean definition that the container must manage.&lt;/li&gt;
&lt;li&gt;Consumed by Spring IoC container&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;spring-bean-scopes&#34;&gt;Spring Bean Scopes&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;7 scopes (Spring 4.2.x) are supported out of the box. You can also create a custom scope.&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Singleton&lt;/strong&gt; – Only one instance of the bean will be created for each container. This is the default scope for the spring beans. While using this scope, make sure bean doesn’t have shared instance variables otherwise it might lead to data inconsistency issues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prototype&lt;/strong&gt; – A new instance will be created every time the bean is requested.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Request&lt;/strong&gt; – This is same as prototype scope, however it’s meant to be used for web applications. A new instance of the bean will be created for each HTTP request.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Session&lt;/strong&gt; – A new bean will be created for each HTTP session by the container.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Global-session&lt;/strong&gt; – This is used to create global session beans for Portlet applications.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Application&lt;/strong&gt; - Scopes a single bean definition to the lifecycle of a ServletContext. Only valid in the context of a web-aware Spring ApplicationContext.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Websocket&lt;/strong&gt; - Scopes a single bean definition to the lifecycle of a WebSocket. Only valid in the context of a web-aware Spring ApplicationContext.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    As of Spring 3.0, a thread scope is available, but is not registered by default.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;As a rule, use the prototype scope for all stateful beans and the singleton scope for stateless beans.&lt;/li&gt;
&lt;li&gt;The client code must clean up prototype-scoped objects and release expensive resources that the prototype bean(s) are holding.&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;5 of the above are available only if you use a &lt;strong&gt;web-aware ApplicationContext&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;request&lt;/li&gt;
&lt;li&gt;session&lt;/li&gt;
&lt;li&gt;globalSession&lt;/li&gt;
&lt;li&gt;application&lt;/li&gt;
&lt;li&gt;websocket&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;spring-singleton-vs-singleton-pattern&#34;&gt;Spring Singleton vs Singleton Pattern&lt;/h4&gt;
&lt;p&gt;Spring’s concept of a singleton bean differs from the &lt;strong&gt;Singleton pattern&lt;/strong&gt; as defined in the Gang of Four (GoF) patterns book. The GoF Singleton hard-codes the scope of an object such that one and only one instance of a particular class is created per ClassLoader.&lt;/p&gt;
&lt;p&gt;The scope of the &lt;strong&gt;Spring singleton&lt;/strong&gt; is best described as per container and per bean. This means that if you define one bean for a particular class in a single Spring container, then the Spring container creates one and only one instance of the class defined by that bean definition.&lt;/p&gt;
&lt;h3 id=&#34;spring-bean-lifecycle&#34;&gt;Spring Bean Lifecycle&lt;/h3&gt;
&lt;h4 id=&#34;lifecycle-overview&#34;&gt;Lifecycle Overview&lt;/h4&gt;
&lt;p&gt;The lifecycle of any object means when &amp;amp; how it is born, how it behaves throughout its life, and when &amp;amp; how it dies.
The lifecycle of Spring Beans is not different from normal beans or objects. The below picture shows the overview of the lifecycle of objects, or Spring Beans.&lt;br&gt;
&lt;img src=&#34;./lifecycle-overview.png&#34; alt=&#34;lifecycle-overview&#34;&gt;&lt;/p&gt;
&lt;p&gt;As the Spring Beans are managed by Spring IoC containers. This makes the application developers not able to control the full lifecycle of Spring Beans. But Spring provides ways to add customizations into the lifecycle of Spring Beans, such as aware interfaces and callback methods, which are added in the below picture to show the lifecycle.
&lt;img src=&#34;./lifecycle-detailed-1.png&#34; alt=&#34;lifecycle-detailed-1&#34;&gt;
&lt;img src=&#34;./lifecycle-detailed-2.png&#34; alt=&#34;lifecycle-detailed-2&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;aware-interfaces&#34;&gt;Aware Interfaces&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BeanNameAware&lt;br&gt;
The BeanNameAware interface is implemented by beans that need access to its name defined in the Spring container.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  import org.springframework.beans.factory.BeanNameAware;

  public class BeanNameAwareImpl implements BeanNameAware {
      @Override
      public void setBeanName(String s) {
          System.out.println(&amp;quot;Bean Name: &amp;quot; + s);
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BeanFactoryAware&lt;br&gt;
Beans might need access to the bean factory that created it, say to call any service from the bean factory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  import org.springframework.beans.BeansException;
  import org.springframework.beans.factory.BeanFactory;
  import org.springframework.beans.factory.BeanFactoryAware;

  public class BeanFactoryAwareImpl implements BeanFactoryAware {

      @Override
      public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
          System.out.println(beanFactory.getBean(&amp;quot;fooBean&amp;quot;));
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ApplicationContextAware&lt;br&gt;
In Spring beans, you might require access to the ApplicationContext. For example, if your bean needs to look up some other beans. Similarly, if your bean needs access to some application file resource in your bean or even publish some application events, you need access to the ApplicationContext.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  import org.springframework.beans.BeansException;
  import org.springframework.context.ApplicationContext;
  import org.springframework.context.ApplicationContextAware;

  public class ApplicationContextAwareImpl implements ApplicationContextAware {

      @Override
      public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
          FooBean userBean = (FooBean) applicationContext.getBean(&amp;quot;fooBean&amp;quot;);
          System.out.println(&amp;quot;User Id: &amp;quot; + fooBean.getFooBeanId() + &amp;quot;  Bean Name :&amp;quot; + fooBean.getName());
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more aware interfaces and details, go to the link  
&lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/Aware.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Interface Aware&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;lifecycle-callbacks&#34;&gt;Lifecycle Callbacks&lt;/h4&gt;
&lt;h5 id=&#34;callback-methods&#34;&gt;Callback Methods&lt;/h5&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;InitializingBean&lt;/strong&gt; and &lt;strong&gt;DisposableBean&lt;/strong&gt; callback interfaces are not recommended.
  &lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Initialization callbacks&lt;/strong&gt;&lt;br&gt;
3 options:
&lt;ul&gt;
&lt;li&gt;Annotation-based&lt;br&gt;
&lt;strong&gt;@PostConstruct&lt;/strong&gt; annotation or specify a POJO initialization method&lt;/li&gt;
&lt;li&gt;XML-based&lt;br&gt;
&lt;strong&gt;init-method&lt;/strong&gt; attribute to specify the name of the method that has a void no-argument signature&lt;/li&gt;
&lt;li&gt;Java Config&lt;br&gt;
initMethod attribute of &lt;strong&gt;@Bean&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Destruction callbacks&lt;/strong&gt;&lt;br&gt;
3 options:
&lt;ul&gt;
&lt;li&gt;Annotation-based&lt;br&gt;
&lt;strong&gt;@PreDestroy&lt;/strong&gt; annotation or specify a generic method that is supported by bean definitions&lt;/li&gt;
&lt;li&gt;XML-Based&lt;br&gt;
&lt;strong&gt;destroy-method&lt;/strong&gt; attribute on the &lt;strong&gt;&amp;lt;bean/&amp;gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Java Config&lt;br&gt;
&lt;strong&gt;destroyMethod&lt;/strong&gt; attribute of &lt;strong&gt;@Bean&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Startup and shutdown callbacks&lt;/strong&gt;&lt;br&gt;
The Lifecycle interface defines the essential methods for any object that has its own lifecycle requirements (e.g. starts and stops some background process)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;callback-examples&#34;&gt;Callback Examples&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;XML-based: Custom init() and destroy() methods&lt;br&gt;
The default init and destroy methods in bean configuration file can be defined in two ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bean local definition&lt;/strong&gt; applicable to a single bean&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Global definition&lt;/strong&gt; applicable to all beans defined in beans context&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;beans.xml&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Local definition&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;beans&amp;gt;
     
      &amp;lt;bean id=&amp;quot;demoBean&amp;quot; class=&amp;quot;com.flycoolman.callbackdemo.DemoBean&amp;quot;
                      init-method=&amp;quot;customInit&amp;quot;
                      destroy-method=&amp;quot;customDestroy&amp;quot;&amp;gt;&amp;lt;/bean&amp;gt;
     
  &amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Global definition&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;beans default-init-method=&amp;quot;customInit&amp;quot; default-destroy-method=&amp;quot;customDestroy&amp;quot;&amp;gt;   
     
          &amp;lt;bean id=&amp;quot;demoBean&amp;quot; class=&amp;quot;com.flycoolman.callbackdemo.DemoBean&amp;quot;&amp;gt;&amp;lt;/bean&amp;gt;
     
  &amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;DemoBean.java&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  package com.flycoolman.callbackdemo;
     
  public class DemoBean 
  {
      public void customInit() 
      {
          System.out.println(&amp;quot;Method customInit() invoked...&amp;quot;);
      }
     
      public void customDestroy() 
      {
          System.out.println(&amp;quot;Method customDestroy() invoked...&amp;quot;);
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Annotation-based: @PostConstruct and @PreDestroy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;@PostConstruct annotated method will be invoked after the bean has been constructed using default constructor and just before it’s instance is returned to requesting object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@PreDestroy annotated method is called just before the bean is about be destroyed inside bean container.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  package com.flycoolman.callbackdemo;  
         
  import javax.annotation.PostConstruct;  
  import javax.annotation.PreDestroy;  
         
  public class DemoBean  
  {
      @PostConstruct
      public void customInit() 
      {
          System.out.println(&amp;quot;Method customInit() invoked...&amp;quot;);
      }
             
      @PreDestroy
      public void customDestroy() 
      {
          System.out.println(&amp;quot;Method customDestroy() invoked...&amp;quot;);
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java Config&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public class Foo {
      public void init() {
          // initialization logic
      }
      public void cleanup() {
              // destruction logic
          }
  }

  @Configuration
  public class AppConfig {
      @Bean(initMethod = &amp;quot;init&amp;quot;, destroyMethod = &amp;quot;cleanup&amp;quot;)
      public Foo foo() {
          return new Foo();
      }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;multiple-lifecycle-mechanismsexecution-orders&#34;&gt;Multiple Lifecycle Mechanisms/Execution Orders&lt;/h4&gt;
&lt;p&gt;Multiple lifecycle mechanisms configured for the same bean, with different initialization methods, are called as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Methods annotated with @PostConstruct&lt;/li&gt;
&lt;li&gt;afterPropertiesSet() as defined by the InitializingBean callback interface&lt;/li&gt;
&lt;li&gt;A custom configured init() method&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;p&gt;Destroy methods are called in the same order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Methods annotated with &lt;strong&gt;@PreDestroy&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;destroy()&lt;/strong&gt; as defined by the DisposableBean callback interface&lt;/li&gt;
&lt;li&gt;A custom configured &lt;strong&gt;destroy()&lt;/strong&gt; method&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;what-is-callback&#34;&gt;What is Callback&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;From Wikipedia&lt;/strong&gt;&lt;br&gt;
In computer programming, a &lt;strong&gt;callback&lt;/strong&gt;, also known as a &amp;ldquo;&lt;strong&gt;call-after&lt;/strong&gt;&amp;rdquo; function, is &lt;strong&gt;any executable code that is passed as an argument to other code&lt;/strong&gt;; that other code is expected to call back (execute) the argument at a given time. This execution may be immediate as in a &lt;strong&gt;synchronous callback&lt;/strong&gt;, or it might happen at a later time as in an &lt;strong&gt;asynchronous callback&lt;/strong&gt;. Programming languages support callbacks in different ways, often implementing them with&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;subroutines,&lt;/li&gt;
&lt;li&gt;lambda expressions,&lt;/li&gt;
&lt;li&gt;blocks,&lt;/li&gt;
&lt;li&gt;or function pointers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;For Java&lt;/strong&gt;&lt;br&gt;
In object-oriented programming languages without function-valued arguments, such as in Java before its 1.7 version, callbacks can be simulated by passing an instance of an abstract class or interface, of which the receiver will call one or more methods, while the calling end provides a concrete implementation. Something like below (from Stackoverflow)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class Test {
    public static void main(String[] args) throws  Exception {
        new Test().doWork(new Callback() { // implementing class            
            @Override
            public void call() {
                System.out.println(&amp;quot;callback called&amp;quot;);
            }
        });
    }

    public void doWork(Callback callback) {
        System.out.println(&amp;quot;doing work&amp;quot;);
        callback.call();
    }

    public interface Callback {
        void call();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;spring-bean-instantiation&#34;&gt;Spring Bean Instantiation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Instantiation with a constructor&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;bean id=&amp;quot;exampleBean&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instantiation with a static factory method&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;bean id=&amp;quot;exampleBean&amp;quot; factory-method=&amp;quot;createInstance&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instantiation using an instance factory method&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;bean id=&amp;quot;myFactoryBean&amp;quot;  class=&amp;quot;...&amp;quot;&amp;gt;
     
  &amp;lt;bean id=&amp;quot;exampleBean&amp;quot;  factory-bean=&amp;quot;myFactoryBean&amp;quot; factory-method=&amp;quot;createInstance&amp;quot;&amp;gt;&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more details, go to the link 
&lt;a href=&#34;https://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/beans.html#beans-factory-class&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Instantiating beans&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;spring-bean-configurationcontainer-configuration&#34;&gt;Spring Bean Configuration/Container Configuration&lt;/h3&gt;
&lt;h4 id=&#34;xml-based&#34;&gt;XML-based&lt;/h4&gt;
&lt;p&gt;XML-based configuration metadata shows these beans configured as &lt;bean/&gt; elements inside a top-level &lt;beans/&gt; element.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Bean Configuration with Property&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
  &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
      xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
      xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans.xsd&amp;quot;&amp;gt;

      &amp;lt;!-- services --&amp;gt;

      &amp;lt;bean id=&amp;quot;petStore&amp;quot; class=&amp;quot;org.springframework.samples.jpetstore.services.PetStoreServiceImpl&amp;quot;&amp;gt;
          &amp;lt;property name=&amp;quot;accountDao&amp;quot; ref=&amp;quot;accountDao&amp;quot;/&amp;gt;
          &amp;lt;property name=&amp;quot;itemDao&amp;quot; ref=&amp;quot;itemDao&amp;quot;/&amp;gt;
          &amp;lt;!-- additional collaborators and configuration for this bean go here --&amp;gt;
      &amp;lt;/bean&amp;gt;

      &amp;lt;!-- more bean definitions for services go here --&amp;gt;

  &amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multiple Bean Configuration&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
  &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
      xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
      xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans.xsd&amp;quot;&amp;gt;

      &amp;lt;bean id=&amp;quot;accountDao&amp;quot;
          class=&amp;quot;org.springframework.samples.jpetstore.dao.jpa.JpaAccountDao&amp;quot;&amp;gt;
          &amp;lt;!-- additional collaborators and configuration for this bean go here --&amp;gt;
      &amp;lt;/bean&amp;gt;

      &amp;lt;bean id=&amp;quot;itemDao&amp;quot; class=&amp;quot;org.springframework.samples.jpetstore.dao.jpa.JpaItemDao&amp;quot;&amp;gt;
          &amp;lt;!-- additional collaborators and configuration for this bean go here --&amp;gt;
      &amp;lt;/bean&amp;gt;

      &amp;lt;!-- more bean definitions for data access objects go here --&amp;gt;

  &amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multiple XML Files&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;beans&amp;gt;
      &amp;lt;import resource=&amp;quot;services.xml&amp;quot;/&amp;gt;
      &amp;lt;import resource=&amp;quot;resources/messageSource.xml&amp;quot;/&amp;gt;
      &amp;lt;import resource=&amp;quot;/resources/themeSource.xml&amp;quot;/&amp;gt;

      &amp;lt;bean id=&amp;quot;bean1&amp;quot; class=&amp;quot;...&amp;quot;/&amp;gt;
      &amp;lt;bean id=&amp;quot;bean2&amp;quot; class=&amp;quot;...&amp;quot;/&amp;gt;
  &amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;annotation-based&#34;&gt;Annotation-based&lt;/h4&gt;
&lt;p&gt;Spring 2.5 introduced support for annotation-based configuration metadata.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Annotation injection is performed before XML injection, thus the latter configuration will override the former for properties wired through both approaches.
  &lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Implicit Registeration&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
  &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
      xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
      xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot;
      xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context.xsd&amp;quot;&amp;gt;

      &amp;lt;context:annotation-config/&amp;gt;

  &amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;a href=&#34;context:annotation-config/&#34;&gt;context:annotation-config/&lt;/a&gt; only looks for annotations on beans in the same application context in which it is defined.&lt;br&gt;
This means that, if you put &lt;a href=&#34;context:annotation-config/&#34;&gt;context:annotation-config/&lt;/a&gt; in a WebApplicationContext for a DispatcherServlet, it only checks for @Autowired beans in your controllers, and not your services.
  &lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Annotate the Method&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public class SimpleMovieLister {

      private MovieFinder movieFinder;

      @Autowired
      public void setMovieFinder(MovieFinder movieFinder) {
          this.movieFinder = movieFinder;
      }

      // ...

  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    @Autowired annotation can be applied to setter methods, constructors, methods with arbitrary names and/or multiple arguments, fields, etc.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For more details, go to the link

&lt;a href=&#34;https://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/beans.html#beans-annotation-config&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Annotation-based container configuration&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;java-based-javaconfig&#34;&gt;Java-based (JavaConfig)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;JavaConfig Overview&lt;/p&gt;
&lt;p&gt;Starting with Spring 3.0, many features provided by the Spring JavaConfig project became part of the core Spring Framework. Thus you can define beans external to your application  classes by using Java rather than XML files. To use these new features, see the @Configuration, @Bean, @Import and @DependsOn annotations.&lt;/p&gt;
&lt;p&gt;Java configuration typically uses @Bean annotated methods within a @Configuration class.&lt;/p&gt;
&lt;p&gt;Spring JavaConfig is a product of the Spring community that provides a pure-Java approach to configuring the Spring IoC Container. While JavaConfig aims to be a feature-complete     option for configuration, it can be (and often is) used in conjunction with the more well-known XML-based configuration approach.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@Bean Annotation&lt;/p&gt;
&lt;p&gt;The @Bean annotation is used to indicate that a method instantiates, configures and initializes a new object to be managed by the Spring IoC container. For those familiar with Spring’s &lt;beans/&gt; XML configuration the @Bean annotation plays the same role as the &lt;bean/&gt; element. You can use @Bean annotated methods with any Spring @Component, however, they are most often used with @Configuration beans.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@Configuration Annotation&lt;/p&gt;
&lt;p&gt;Annotating a class with @Configuration indicates that its primary purpose is as a source of bean definitions. Furthermore, @Configuration classes allow inter-bean dependencies to be defined by simply calling other @Bean methods in the same class. The simplest possible @Configuration class would read as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  @Configuration
  public class AppConfig {

      @Bean
      public MyService myService() {
          return new MyServiceImpl();
      }

  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more details, go to the link

&lt;a href=&#34;https://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/beans.html#beans-java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java-based container configuration&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/beans.html#beans-definition&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Core Technologies - beans definition&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://juejin.im/post/6844903618567471112&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;初识Spring —— Bean的装配（一）&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://juejin.im/post/6844903619834150919&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;初识Spring —— Bean的装配（二）&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/17193365/what-in-the-world-are-spring-beans&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What in the world are Spring beans?&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://juejin.im/post/6844903813753602056&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring注入Bean的几种方式&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://docs.huihoo.com/spring/zh-cn/beans.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Beans, BeanFactory和ApplicationContext&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.journaldev.com/2461/spring-ioc-bean-example-tutorial&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring IoC and Bean&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/21163355/spring-context-and-bean-lifecycle-callbacks-practical-examples-of-usage&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Context and Bean Lifecycle callbacks: practical examples of usage&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/25469369/what-do-you-mean-by-callbacks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;what do you mean by callbacks?&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://dzone.com/articles/spring-bean-lifecycle-using-spring-aware-interface&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Bean Lifecycle: Using Spring Aware Interfaces&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.geeksforgeeks.org/bean-life-cycle-in-java-spring/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bean life cycle in Java Spring&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://en.wikipedia.org/wiki/Callback_%28computer_programming%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Callback (computer programming)&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://howtodoinjava.com/spring-core/spring-bean-life-cycle/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring – Bean Life Cycle&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://dzone.com/articles/spring-bean-lifecycle&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Bean Lifecycle&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Upgrade to VirtualBox 6.1 and Vagrant 2.9.9 on Ubuntu 18.04</title>
      <link>/linux/ubuntu-18.04-upgrade-virtualbox-vagrant/</link>
      <pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/linux/ubuntu-18.04-upgrade-virtualbox-vagrant/</guid>
      <description>&lt;p&gt;I needed to set up a development environment for this week&amp;rsquo;s IETF code sprint. As this was a very short term project, I would like to
set up the environment in a VM. Instead of downloading Linux image, install it on VirtualBox or KVM, Vagrant is handy to use, particularly
for development environment. I was thinking to get some new exeperience. Then CentOS 8 came up, as I have been using CentOS 7, but no
CentOS 8 experience. And also I wanted the environment with GUI, so that I dould test my code on the VM directly.&lt;/p&gt;
&lt;h3 id=&#34;why-to-upgrade-virtualbox-and-vagrant&#34;&gt;Why to upgrade VirtualBox and Vagrant&lt;/h3&gt;
&lt;p&gt;I had VirtualBox and Vagrant on my machine(Ubuntu 18.04). So it was straight forward to boot up CentOS 8 by changing the Vagrantfile.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# -*- mode: ruby -*-&lt;br&gt;
# vi: set ft=ruby :&lt;/p&gt;
&lt;p&gt;Vagrant.configure(&amp;ldquo;2&amp;rdquo;) do |config|&lt;br&gt;
     config.vm.box = &amp;ldquo;centos/8&amp;rdquo;&lt;br&gt;
     config.vm.box_check_update = false&lt;br&gt;
     config.vm.hostname = &amp;ldquo;centos8&amp;rdquo;&lt;br&gt;
     config.vm.provider &amp;ldquo;virtualbox&amp;rdquo; do |vb|&lt;br&gt;
     # Display the VirtualBox GUI when booting the machine&lt;br&gt;
           vb.gui = true&lt;br&gt;
           vb.memory = &amp;ldquo;4096&amp;rdquo;&lt;br&gt;
           vb.cpus = 4&lt;br&gt;
     end&lt;br&gt;
end&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;a href=&#34;./Vagrantfile&#34;&gt;Vagrantfile&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Vagrant up&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I could &lt;strong&gt;vagrant ssh&lt;/strong&gt; to the VM and there was terminal on VirtualBox console. Everything worked well until the GUI was installed and started.
I &lt;strong&gt;could not&lt;/strong&gt; get into the GUI of CentOS.&lt;br&gt;
I guessed to upgrade the VirtualBox might resolve the issue, because I had VirtualBox 5.2. The latest version of VirtualBox is 6.1. So I started upgrading VirutalBox.&lt;/p&gt;
&lt;h3 id=&#34;upgrade-virtualbox-61&#34;&gt;Upgrade VirtualBox 6.1&lt;/h3&gt;
&lt;p&gt;To install the latest version of VirtualBox, the usual way is to download the .DEB binary package simply from

&lt;a href=&#34;https://www.virtualbox.org/wiki/Linux_Downloads&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VirtualBox downloads page&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget https://download.virtualbox.org/virtualbox/6.1.12/virtualbox-6.1_6.1.12-139181~Ubuntu~bionic_amd64.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install the package by dpkg&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dpkg -i virtualbox-6.1_6.1.12-139181~Ubuntu~bionic_amd64.deb
sudo apt install -f
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or apt&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install ./virtualbox-6.1_6.1.12-139181~Ubuntu~bionic_amd64.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;upgrade-vagrant-299&#34;&gt;Upgrade Vagrant 2.9.9&lt;/h3&gt;
&lt;p&gt;To support VirtualBox 6.1, I also have to upgrade Vagrant to 2.9.9. Again download the DEB package from  Vagrant release website and install with dpkg or apt.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -O https://releases.hashicorp.com/vagrant/2.2.9/vagrant_2.2.9_x86_64.deb
sudo apt install ./vagrant_2.2.9_x86_64.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To verify that the installation was successful, run the following command which prints the Vagrant version:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vagrant --version 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;install-virtualbox-dkms&#34;&gt;Install Virtualbox-dkms&lt;/h3&gt;
&lt;p&gt;When VirtualBox is upgraded, the old virtual machines might fail to open. Some error information like below:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Failed to open a session for the virtual machine xxxxxxx.&lt;/p&gt;
&lt;p&gt;The VM session was closed before any attempt to power it on.&lt;/p&gt;
&lt;p&gt;Result Code: NS_ERROR_FAILURE (0x80004005)&lt;br&gt;
Component: SessionMachine&lt;br&gt;
Interface: ISession {7844aa05-b02e-4cdd-a04f-ade4a762e6b7}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Even running the command &amp;lsquo;sudo /sbin/vboxconfig&amp;rsquo; can&amp;rsquo;t resolve the issue. the dkms package needs to be reinstalled.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dpkg -l | grep virtualbox-dkms
sudo apt-get purge virtualbox-dkms &amp;amp;&amp;amp; sudo apt-get install dkms
sudo /sbin/vboxconfig
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;install-virtualbox-extension-pack&#34;&gt;Install VirtualBox Extension Pack&lt;/h3&gt;
&lt;p&gt;After the Vagrant and VirtualBox had been upgraded, unfortunately I still couldn&amp;rsquo;t make the CentOS 8 GUI working, even though
I tried all the options of &amp;lsquo;Graphics Controller&amp;rsquo;. When I tried to connect the VM by RDP, I got an error message of no
VirtualBox Extension Pack. Here is the step to install the VirtualBox Extension Pack.&lt;/p&gt;
&lt;h4 id=&#34;step-1&#34;&gt;Step 1&lt;/h4&gt;
&lt;p&gt;Go to the 
&lt;a href=&#34;https://www.virtualbox.org/wiki/Downloads&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;virtualbox official website&lt;/a&gt; and download the package.&lt;/p&gt;
&lt;h4 id=&#34;step-2&#34;&gt;Step 2&lt;/h4&gt;
&lt;p&gt;Double click the file, such as&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Oracle_VM_VirtualBox_Extension_Pack-6.1.12&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;then follow the wizard to install.&lt;/p&gt;
&lt;p&gt;Unfortunately the RDP did not show me the desktop successfully either.&lt;/p&gt;
&lt;h3 id=&#34;install-vagrant-plugin-vagrant-libvirt&#34;&gt;Install Vagrant Plugin vagrant-libvirt&lt;/h3&gt;
&lt;p&gt;As I couldn&amp;rsquo;t make the CentOS 8 GUI working on VirtualBox with Vagrant, then I moved to Libvirt with Vagrant.
But When I did &amp;lsquo;vagrant up&amp;rsquo;, got the below error.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./libvirt-not-found.png&#34; alt=&#34;libvirt-not-found&#34;&gt;&lt;/p&gt;
&lt;p&gt;It seemed that the libvirt plugin was not installed, because I installed Vagrant by DEB package, not apt.
To install Vagrant Plugin vagrant-libvert, please follow the

&lt;a href=&#34;https://github.com/vagrant-libvirt/vagrant-libvirt#installation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vagrant Libvirt Provider&lt;/a&gt;
on GitHub.&lt;/p&gt;
&lt;h4 id=&#34;step-1-1&#34;&gt;Step 1&lt;/h4&gt;
&lt;p&gt;The packages for building needs to be installed.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt-get build-dep vagrant ruby-libvirt  
apt-get install qemu libvirt-bin ebtables dnsmasq-base  
apt-get install libxslt-dev libxml2-dev libvirt-dev zlib1g-dev ruby-dev  
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;step-2-1&#34;&gt;Step 2&lt;/h4&gt;
&lt;p&gt;Install the plugin.
vagrant plugin install vagrant-libvirt&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./install-vagrant-libvirt.png&#34; alt=&#34;install-vagrant-libvirt&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;non-exist-box-error&#34;&gt;Non-exist Box Error&lt;/h3&gt;
&lt;p&gt;I even tried some pre-built box with GUI, but the box was gone when I used the new version Vagrant.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./nonexist-box.png&#34; alt=&#34;nonexist-box&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;terminal-mode&#34;&gt;Terminal Mode&lt;/h3&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Bad news - I have not made the CentOS 8 GUI working on VM through Vagrant with either VirtualBox or Libvirt.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The pictures below show the successful terminal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./successful-vagrant-up.png&#34; alt=&#34;successful-vagrant-up&#34;&gt;
&lt;img src=&#34;./vagrant-ssh.png&#34; alt=&#34;vagrant-ssh&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The username and password for console are vagrant and vagrant.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;./username-password-vagrant.png&#34; alt=&#34;username-password-vagrant&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://linuxize.com/post/how-to-install-vagrant-on-ubuntu-18-04/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to Install Vagrant on Ubuntu 18.04&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.golinuxcloud.com/install-gnome-enable-gui-mode-rhel-centos-8/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Install GNOME | How to enable GUI mode | RHEL CentOS 8&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.techrepublic.com/article/how-to-install-a-gui-on-top-of-centos-7/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to install a GUI on top of CentOS 7&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://computingforgeeks.com/run-centos-8-vm-using-vagrant-on-kvm-virtualbox-vmware-parallels/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Run CentOS 8 VM using Vagrant on KVM / VirtualBox / VMWare / Parallels&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu 18.04 System Python 3 Upgrade</title>
      <link>/linux/ubuntu-18.04-system-python-3-upgrade/</link>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/linux/ubuntu-18.04-system-python-3-upgrade/</guid>
      <description>&lt;h3 id=&#34;symptom&#34;&gt;Symptom&lt;/h3&gt;
&lt;p&gt;After the upgrade from Python 3.6 to Python 3.8:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu Software Center not working&lt;/li&gt;
&lt;li&gt;Can&amp;rsquo;t start terminal by Ctl+Alt+t&lt;/li&gt;
&lt;li&gt;Can&amp;rsquo;t start terminal or software&lt;/li&gt;
&lt;li&gt;Error Message - A problem occured when checking for the updates&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;root-cause&#34;&gt;Root cause&lt;/h3&gt;
&lt;p&gt;After the Python 3 upgrade, I changed the Update-alternatives configuration. Fortunately I remembered it!&lt;/p&gt;
&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;
&lt;p&gt;Start terminal in right click menu and change back to the original configuration of update-alternatives, as below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./update-alternatives-config.png&#34; alt=&#34;update-alternatives-config&#34;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Java Beans</title>
      <link>/coding/java/javabeans/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/coding/java/javabeans/</guid>
      <description>&lt;h2 id=&#34;java-beans&#34;&gt;Java Beans&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Software Components&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JavaBeans are classes that encapsulate many objects into a single object. They are serializable, have a zero-argument constructor, and allow access to properties using getter and setter methods.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;a Java classs&lt;/li&gt;
&lt;li&gt;serializable&lt;/li&gt;
&lt;li&gt;zero-argument constructor&lt;/li&gt;
&lt;li&gt;getter and setter&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A bean is a Java class with method names that follow the JavaBeans guidelines. A bean builder tool uses introspection to examine the bean class. Based on this inspection, the bean builder tool can figure out the bean&amp;rsquo;s properties, methods, and events.&lt;br&gt;
Almost any code can be packaged as a bean.&lt;br&gt;
The power of JavaBeans is that you can use software components without having to write them or understand their implementation.&lt;/p&gt;
&lt;h3 id=&#34;java-beans-example&#34;&gt;Java Beans Example&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;import java.io.Serializable;

public class Car implements Serializable {
    //Private Properties
    private String color;
    private Boolean isCar;

    //Zero-argument Constructor
    public Car(){}

    //Getter and Setter
    public void setColor(String color) { this.color = color; }
    
    public String getColor() { return color; }
    
    public void setCar(Boolean car) { isCar = car; }

    //&#39;is&#39; for Boolean getter
    public Boolean isCar() { return isCar; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;bean-properties&#34;&gt;Bean Properties&lt;/h3&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;Read and write property has getter and setter&lt;/li&gt;
&lt;li&gt;A read-only property has a getter method but no setter&lt;/li&gt;
&lt;li&gt;A write-only property has a setter method only&lt;/li&gt;
&lt;li&gt;Boolean property using is instead of get&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Indexed Properties&lt;br&gt;
an array instead of a single value&lt;/li&gt;
&lt;li&gt;Bound Properties&lt;br&gt;
PropertyChangeListeners&lt;/li&gt;
&lt;li&gt;Constrained Properties&lt;br&gt;
VetoableChangeListeners&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bean-methods&#34;&gt;Bean Methods&lt;/h3&gt;
&lt;p&gt;Any public method that is not part of a property definition is a bean method.&lt;/p&gt;
&lt;h3 id=&#34;bean-events&#34;&gt;Bean Events&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A bean class can fire off any type of event&lt;/li&gt;
&lt;li&gt;Method names with a specific pattern&lt;/li&gt;
&lt;li&gt;Can be used in wiring components together&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;beaninfo&#34;&gt;BeanInfo&lt;/h3&gt;
&lt;p&gt;A BeanInfo is a class that changes how your bean appears in a builder tool.&lt;/p&gt;
&lt;h3 id=&#34;bean-persistence&#34;&gt;Bean Persistence&lt;/h3&gt;
&lt;h4 id=&#34;serialization&#34;&gt;Serialization&lt;/h4&gt;
&lt;p&gt;A bean has the property of persistence when its properties, fields, and state information are saved to and retrieved from storage.&lt;br&gt;
All beans must persist. To persist, must implement either of below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;java.io.Serializable&lt;/li&gt;
&lt;li&gt;java.io.Externalizable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any class is serializable as long as that class or a parent class implements the java.io.Serializable interface.&lt;br&gt;
Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Component&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Date&lt;/li&gt;
&lt;li&gt;Vector&lt;/li&gt;
&lt;li&gt;Hashtable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not serializable:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Image&lt;/li&gt;
&lt;li&gt;Thread&lt;/li&gt;
&lt;li&gt;Socket&lt;/li&gt;
&lt;li&gt;InputStream&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Controlling Serialization:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automatic serialization&lt;/li&gt;
&lt;li&gt;Customized serialization&lt;/li&gt;
&lt;li&gt;Customized file format&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;long-term-persistence&#34;&gt;Long Term Persistence&lt;/h4&gt;
&lt;p&gt;Long-term persistence is a model that enables beans to be saved in XML format.&lt;/p&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/JavaBeans&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaBeans&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://download.oracle.com/javase/tutorial/javabeans/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Oracle&amp;rsquo;s JavaBeans tutorials&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaBeans specification&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://juejin.im/post/6844903618567471112&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;初识Spring —— Bean的装配（一）&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Build A Free Website In Minutes - Part 4</title>
      <link>/post/build-a-free-website-in-minutes-part-4/</link>
      <pubDate>Thu, 16 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/post/build-a-free-website-in-minutes-part-4/</guid>
      <description>&lt;p&gt;We have the website up and running in 
&lt;a href=&#34;https://flycoolman.com/post/build-a-free-website-in-minutes-part-3/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Part-3&lt;/a&gt;. If you have not completed that part, please do so before continuing this part.&lt;/p&gt;
&lt;h2 id=&#34;personalize-academic-website&#34;&gt;Personalize Academic website&lt;/h2&gt;
&lt;p&gt;This part will include the following sections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Choose the right theme&lt;/li&gt;
&lt;li&gt;Set the site title&lt;/li&gt;
&lt;li&gt;Set the copyright&lt;/li&gt;
&lt;li&gt;Set the site icon&lt;/li&gt;
&lt;li&gt;Select the sections&lt;/li&gt;
&lt;li&gt;Set Google Analytics&lt;/li&gt;
&lt;li&gt;Configure the Menu&lt;/li&gt;
&lt;li&gt;Add dropdown menu&lt;/li&gt;
&lt;li&gt;Add your content&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;choose-the-right-theme&#34;&gt;Choose the right theme&lt;/h3&gt;
&lt;p&gt;Check out the 
&lt;a href=&#34;https://sourcethemes.com/academic/themes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;available themes&lt;/a&gt; and choose a design you love.
Set the configuration in file &amp;lsquo;site_root/config/_default/params.toml&amp;rsquo;. I leave the default as is.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;theme = &amp;quot;minimal&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Replace the &amp;lsquo;site_root&amp;rsquo; with your site root directory.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;set-the-site-title&#34;&gt;Set the site title&lt;/h3&gt;
&lt;p&gt;Set the title in file &amp;lsquo;site_root/config/_default/config.toml&amp;rsquo;. In my case, the &amp;lsquo;flycoolman&amp;rsquo; is used.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;title = &amp;quot;flycoolman&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;set-the-copyright&#34;&gt;Set the copyright&lt;/h3&gt;
&lt;p&gt;Set the copyright in file &amp;lsquo;site_root/config/_default/config.toml&amp;rsquo;, i.e.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;copyright = &amp;quot;&amp;amp;copy;{year}  flycoolman.com All Rights Reserved&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;set-the-site-icon&#34;&gt;Set the site icon&lt;/h3&gt;
&lt;p&gt;Save your icon image named icon.png and place the image in your root assets/images/ folder, creating the assets and images folders if they don’t already exist.&lt;/p&gt;
&lt;h3 id=&#34;select-the-sections&#34;&gt;Select the sections&lt;/h3&gt;
&lt;p&gt;All the sections of the demo home page in the folder &amp;lsquo;site_root/content/home&amp;rsquo;. See the picture below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./home-sections.png&#34; alt=&#34;home-sections&#34;&gt;&lt;/p&gt;
&lt;p&gt;There is a setting called &amp;lsquo;active&amp;rsquo; in each file/section, just set the value to &amp;lsquo;false&amp;rsquo;, if you don&amp;rsquo;t want it in your home page.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./section-active.png&#34; alt=&#34;section-active&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;set-google-analytics&#34;&gt;Set Google Analytics&lt;/h3&gt;
&lt;p&gt;Set the Google Analytics in file &amp;lsquo;site_root/config/_default/params.toml&amp;rsquo; with your Google Analytics Tracking ID.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;google_analytics = &amp;quot;UA-123456789-6&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    There are many parameters in the file &amp;lsquo;params.toml&amp;rsquo;, set the ones that you want. They are self-explained
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;configure-the-menu&#34;&gt;Configure the Menu&lt;/h3&gt;
&lt;p&gt;The Menu on Navigation bar can be configured by change the settings in file &amp;lsquo;site_root/config/_default/menus.toml&amp;rsquo;, i.e.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remove current one  by deleting or commenting out the corresponding item&lt;/li&gt;
&lt;li&gt;Rename current one by changing the value of &amp;lsquo;name&amp;rsquo;&lt;/li&gt;
&lt;li&gt;Add new one by adding additional part of &amp;lsquo;[[main]]&amp;rsquo;&lt;/li&gt;
&lt;li&gt;Rearrange the order by changing the value of &amp;lsquo;weight&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./configure-menu.png&#34; alt=&#34;configure-menu&#34;&gt;
&lt;img src=&#34;./menu-after-config.png&#34; alt=&#34;menu-after-config&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;add-dropdown-menu&#34;&gt;Add dropdown menu&lt;/h3&gt;
&lt;p&gt;To create a dropdown sub-menu, add identifier = &amp;ldquo;something&amp;rdquo; to the parent item and parent = &amp;ldquo;something&amp;rdquo; to the child item.
The pictures below show how to add dropdown menu in file &amp;lsquo;site_root/config/_default/menus.toml&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./dropdown-menu-settings.png&#34; alt=&#34;dropdwon-menu-settings&#34;&gt;
&lt;img src=&#34;./dropdown-menu-example.png&#34; alt=&#34;dropdwon-menu-example&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;add-your-content&#34;&gt;Add your content&lt;/h3&gt;
&lt;p&gt;Go to the folder &amp;lsquo;site_root/content/post/&amp;rsquo;, select one post as template, write your own post. Refer to the links below for markdown syntax.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;All set! Enjoy writing!&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;h4 id=&#34;how-to-academic&#34;&gt;How-To Academic&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://sourcethemes.com/academic/docs/get-started/&#34;&gt;https://sourcethemes.com/academic/docs/get-started/&lt;/a&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/docs/page-builder/&#34;&gt;https://sourcethemes.com/academic/docs/page-builder/&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;how-to-markdown&#34;&gt;How-To Markdown&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://guides.github.com/features/mastering-markdown/&#34;&gt;https://guides.github.com/features/mastering-markdown/&lt;/a&gt;
&lt;a href=&#34;https://www.markdownguide.org/basic-syntax/&#34;&gt;https://www.markdownguide.org/basic-syntax/&lt;/a&gt;
&lt;a href=&#34;https://simplpost.com/markdown.html&#34;&gt;https://simplpost.com/markdown.html&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;add-utterances-comment-engine&#34;&gt;Add Utterances Comment Engine&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://mscipio.github.io/post/utterances-comment-engine/&#34;&gt;https://mscipio.github.io/post/utterances-comment-engine/&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Build A Free Website In Minutes - Part 3</title>
      <link>/post/build-a-free-website-in-minutes-part-3/</link>
      <pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/post/build-a-free-website-in-minutes-part-3/</guid>
      <description>&lt;p&gt;In 
&lt;a href=&#34;https://flycoolman.com/post/build-a-free-website-in-minutes-part-1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Part-1&lt;/a&gt; and 
&lt;a href=&#34;https://flycoolman.com/post/build-a-free-website-in-minutes-part-2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Part-2&lt;/a&gt;
we introduced the basic knowledges of the tools to help understand how they work. From this part, we will focus on building our real website.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-git-on-ubuntu-18-04-quickstart&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Download and install Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download and install Hugo Extended Version&lt;br&gt;
Please follow the part of &amp;lsquo;Install Hugo Extended Version&amp;rsquo; in 
&lt;a href=&#34;https://flycoolman.com/post/build-a-free-website-in-minutes-part-2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Part-2&lt;/a&gt; of this tutorial.&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h2 id=&#34;github-repositories&#34;&gt;GitHub Repositories&lt;/h2&gt;
&lt;h3 id=&#34;github-pages-repository&#34;&gt;GitHub Pages Repository&lt;/h3&gt;
&lt;p&gt;Please follow the guide on 
&lt;a href=&#34;https://pages.github.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub Pages&lt;/a&gt; to create the repository correctly.&lt;/p&gt;
&lt;h3 id=&#34;academic-kickstart-repository&#34;&gt;Academic-kickstart Repository&lt;/h3&gt;
&lt;p&gt;Go to the GitHub page of 
&lt;a href=&#34;https://github.com/sourcethemes/academic-kickstart&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;academic-kickstart&lt;/a&gt; and fork the repository to your GitHub account. The pictures below show the source of academic-kickstart page and the forked repository in my account.&lt;/p&gt;
&lt;p&gt;Academic-kickstart source page
&lt;img src=&#34;./fork-academic-kickstart.png&#34; alt=&#34;before-forked&#34;&gt;&lt;/p&gt;
&lt;p&gt;The forked repository in my account
&lt;img src=&#34;./forked-academic-kickstart.png&#34; alt=&#34;after-forked&#34;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;local-environment&#34;&gt;Local Environment&lt;/h2&gt;
&lt;h3 id=&#34;step-1---git-clone-ltusernamegtgithubio-to-local&#34;&gt;Step 1 - git clone &amp;lt;username&amp;gt;.github.io to local&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/your-user-name/your-user-name.github.io.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-2---git-clone-academic-kickstart-to-local&#34;&gt;Step 2 - git clone academic-kickstart to local&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/your-user-name/academic-kickstart.git
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-3---initialize-the-theme&#34;&gt;Step 3 - Initialize the theme&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd academic-kickstart/
git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-4---set-base-url-in-configtoml&#34;&gt;Step 4 - Set base url in config.toml&lt;/h3&gt;
&lt;p&gt;In your config.toml file, set baseurl = &amp;ldquo;https://&amp;lt;USERNAME&amp;gt;.github.io/&amp;rdquo;, where &amp;lt;USERNAME&amp;gt; is your Github username. Stop Hugo if it’s running and delete the public directory if it exists (by typing &lt;strong&gt;rm -r public/&lt;/strong&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vi config.toml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The example for my site
&lt;img src=&#34;./base-url-in-config-toml.png&#34; alt=&#34;after-forked&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;step-5---add-githubio-repository-into-academic-kickstart&#34;&gt;Step 5 - Add .github.io repository into Academic-kickstart&lt;/h3&gt;
&lt;p&gt;Add .github.io repository as a submodule in a folder named &amp;lsquo;public&amp;rsquo;, replacing with your Github username.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd academic-kickstart/
git submodule add -f -b master https://github.com/your-user-name/your-user-name.github.io.git public
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-6---remove-initial-index-file&#34;&gt;Step 6 - Remove initial index file&lt;/h3&gt;
&lt;p&gt;Delete the &amp;lsquo;index.html&amp;rsquo; file in the folder of &amp;lsquo;public&amp;rsquo;, if there is one.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd public  
rm index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-7---build-your-website&#34;&gt;Step 7 - Build your website&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd academic-kickstart/
hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-8---deploy-to-github&#34;&gt;Step 8 - Deploy to GitHub&lt;/h3&gt;
&lt;p&gt;Add everything to your local git repository and push it up to your remote repository on GitHub.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd academic-kickstart/
cd public
git add .
git comment -m &amp;quot;Initial commit&amp;quot;
git push

cd academic-kickstart/
git add .
git comment -m &amp;quot;Initial commit&amp;quot;
git push    
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Whilst running the above commands you may be prompted for your GitHub username and password.&lt;/p&gt;
&lt;p&gt;Once uploading is finished, access https://&amp;lt;USERNAME&amp;gt;.github.io in your browser, substituting with your GitHub username.
You will see a page like below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./hello-academic.png&#34; alt=&#34;hello-academic&#34;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;build-academic-demo-like-site&#34;&gt;Build Academic Demo Like Site&lt;/h2&gt;
&lt;p&gt;To initialise your site with the demo content, copy the contents of the themes/academic/exampleSite/ folder to your website root folder, overwriting existing files if necessary. The exampleSite folder contains an example config file and content to help you get started.&lt;/p&gt;
&lt;h3 id=&#34;step-1---replace-the-content&#34;&gt;Step 1 - Replace the content&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd academic-kickstart/
cp -av themes/academic/exampleSite/* .
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-2---build-the-site&#34;&gt;Step 2 - Build the site&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd academic-kickstart/
hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-3---deploy-to-github&#34;&gt;Step 3 - Deploy to GitHub&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd academic-kickstart/
cd public
git add .
git comment -m &amp;quot;Initial commit&amp;quot;
git push

cd academic-kickstart/
git add .
git comment -m &amp;quot;Initial commit&amp;quot;
git push
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once uploading is finished, refresh the page in your browser, the page shows like below picture.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./academic-demo-site.png&#34; alt=&#34;academic-demo-site&#34;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;Up to now, we have an Academic demo-like website up and running. In next part, we will personalize the website.&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Build A Free Website In Minutes - Part 2</title>
      <link>/post/build-a-free-website-in-minutes-part-2/</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/post/build-a-free-website-in-minutes-part-2/</guid>
      <description>&lt;p&gt;To learn more about prerequisites and tools, please check out the 
&lt;a href=&#34;https://flycoolman.com/post/build-a-free-website-in-minutes-part-1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Part-1&lt;/a&gt; of this series.&lt;/p&gt;
&lt;h2 id=&#34;hugo-theme&#34;&gt;Hugo Theme&lt;/h2&gt;
&lt;h3 id=&#34;step-1---create-a-new-site&#34;&gt;Step 1 - Create a new site&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;hugo new site hello-theme
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-2---download-the-ananke-theme&#34;&gt;Step 2 - Download the ananke theme&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;wget https://github.com/budparr/gohugo-theme-ananke/archive/master.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-3---extract-that-zip-file-to-get-a-gohugo-theme-ananke-master-directory&#34;&gt;Step 3 - Extract that .zip file to get a “gohugo-theme-ananke-master” directory&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;unzip master.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-4---rename-that-directory-to-ananke-and-move-it-into-the-themes-directory&#34;&gt;Step 4 - Rename that directory to “ananke”, and move it into the “themes/” directory&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;mv gohugo-theme-ananke-master/ ananke/
mv ananke/ themes/ananke
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-5---add-the-theme-to-the-site-configuration&#34;&gt;Step 5 - Add the theme to the site configuration&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;echo &#39;theme = &amp;quot;ananke&amp;quot;&#39; &amp;gt;&amp;gt; config.toml
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-6---add-some-content-and-change-the-header-of-the-post-to-say-draft-false&#34;&gt;Step 6 - Add some content and change the header of the post to say draft: false&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;hugo new posts/hello-hugo-theme-post.md
vi content/posts/hello-hugo-theme-post.md
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-7---check-the-result&#34;&gt;Step 7 - Check the result&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./hello-hugo-theme.png&#34; alt=&#34;hello-hugo-theme&#34;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;hugo-uninstall&#34;&gt;Hugo Uninstall&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Use the below command to remove the package of Hugo&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get remove --auto-remove hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Reading package lists&amp;hellip; Done&lt;br&gt;
Building dependency tree&lt;br&gt;
Reading state information&amp;hellip; Done&lt;br&gt;
The following packages will be REMOVED:&lt;br&gt;
   hugo&lt;br&gt;
0 upgraded, 0 newly installed, 1 to remove and 0 not upgraded.&lt;br&gt;
After this operation, 44.5 MB disk space will be freed.&lt;br&gt;
Do you want to continue? [Y/n] y&lt;br&gt;
(Reading database &amp;hellip; 252044 files and directories currently installed.)&lt;br&gt;
Removing hugo (0.73.0) &amp;hellip;&lt;br&gt;
dpkg: warning: while removing hugo, directory &amp;lsquo;/usr/local/bin&amp;rsquo; not empty so not removed&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    As Academic requires Hugo extended version, that&amp;rsquo;s the reason that the standard version is uninstalled.
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&#34;hello-academic&#34;&gt;Hello Academic&lt;/h2&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Academic is a site builder, it is a hugo site itself.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;install-hugo-extended-version&#34;&gt;Install Hugo Extended Version&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;wget https://github.com/gohugoio/hugo/releases/download/v0.73.0/hugo_extended_0.73.0_Linux-64bit.deb
sudo dpkg -i hugo_extended_0.73.0_Linux-64bit.deb 
hugo version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output below shows the information of Hugo extended version.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hugo Static Site Generator v0.73.0-428907CC/extended linux/amd64 BuildDate: 2020-06-23T16:40:09Z&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;install-academic&#34;&gt;Install Academic&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://sourcethemes.com/academic/docs/install-locally/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;This linke&lt;/a&gt; provides the different ways to install Academic.
In this part, the 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/install-locally/#install-with-zip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Install with ZIP&lt;/a&gt; way is used.&lt;/p&gt;
&lt;h4 id=&#34;step-1---download-and-extract-academic-kickstart&#34;&gt;Step 1 - Download and extract Academic Kickstart&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;wget https://github.com/sourcethemes/academic-kickstart/archive/master.zip
unzip master.zip
rm master.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;step-2---download-and-extract-the-academic-theme-files-from-the-hugo-academic-master-folder-to-the-themesacademic-folder-in-academic-kickstart&#34;&gt;Step 2 - Download and extract the Academic theme files from the hugo-academic-master folder to the themes/academic/ folder in Academic Kickstart&lt;/h4&gt;
&lt;p&gt;wget &lt;a href=&#34;https://github.com/gcushen/hugo-academic/archive/master.zip&#34;&gt;https://github.com/gcushen/hugo-academic/archive/master.zip&lt;/a&gt;
unzip master.zip
rm master.zip&lt;/p&gt;
&lt;h4 id=&#34;step-3---copy-the-hugo-academic-master-folder-to-the-themesacademic-folder-in-academic-kickstart&#34;&gt;Step 3 - Copy the hugo-academic-master folder to the themes/academic/ folder in Academic Kickstart&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;cp -r hugo-academic-master/* academic-kickstart-master/themes/academic/
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;step-4---check-the-result&#34;&gt;Step 4 - Check the result&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;cd academic-kickstart-master/
hugo server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./hello-academic.png&#34; alt=&#34;hello-academic&#34;&gt;&lt;/p&gt;
&lt;p&gt;In next part, we will install everything in GitHub.&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Build A Free Website In Minutes - Part 1</title>
      <link>/post/build-a-free-website-in-minutes-part-1/</link>
      <pubDate>Sat, 11 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/post/build-a-free-website-in-minutes-part-1/</guid>
      <description>&lt;p&gt;When I create this website, I find that there are no documents to walk me through each step from &amp;lsquo;Hello World&amp;rsquo; to deployment till customization. This makes me have the idea to create one and help others to understand the whole process. In this tutorial, we will use the tools &lt;strong&gt;GitHub Pages&lt;/strong&gt;, &lt;strong&gt;Hugo&lt;/strong&gt; and &lt;strong&gt;Academic&lt;/strong&gt;.&lt;br&gt;
This is the 
&lt;a href=&#34;https://flycoolman.com/post/build-a-free-website-in-minutes-part-1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Part-1&lt;/a&gt; of this series.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;Before contiduing this tutorial, you should have the basic knowledge of the following items:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;GitHub&lt;/li&gt;
&lt;li&gt;HTTP&lt;/li&gt;
&lt;li&gt;HTTPS&lt;/li&gt;
&lt;li&gt;DNS&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    If you are familiar with these and just want to build your website quickly, you can jump to &lt;a href=&#34;https://flycoolman.com/post/build-a-free-website-in-minutes-part-3/&#34;&gt;Part-3&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h2 id=&#34;tools&#34;&gt;Tools&lt;/h2&gt;
&lt;h3 id=&#34;github-pages&#34;&gt;GitHub Pages&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://pages.github.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub Pages&lt;/a&gt; is a static site hosting service that takes HTML, CSS, and JavaScript files straight from a repository on GitHub, optionally runs the files through a build process, and publishes a website.&lt;/p&gt;
&lt;h3 id=&#34;hugo&#34;&gt;Hugo&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://gohugo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo&lt;/a&gt; is a fast and modern static site generator written in Go.&lt;/p&gt;
&lt;h3 id=&#34;academic&#34;&gt;Academic&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://themes.gohugo.io/academic/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Academic&lt;/a&gt; is a website builder for Hugo. Build &lt;em&gt;anything&lt;/em&gt; with widgets and personalize your site with themes, plugins, and language packs.&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;how-to-use-the-tools&#34;&gt;How to Use the Tools&lt;/h2&gt;
&lt;p&gt;From the brief introduction above, you have known what the tools are. Basically we will use Hugo to generate the website, personalize it with Academic, and deploy it to GitHub Pages. Now let&amp;rsquo;s put hands on it. We will start from &amp;lsquo;Hello World&amp;rsquo;.&lt;/p&gt;
&lt;h3 id=&#34;hello-world-of-github-pages&#34;&gt;Hello World of GitHub Pages&lt;/h3&gt;
&lt;p&gt;Please follow the 
&lt;a href=&#34;https://pages.github.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub Pages Hello World Guide&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;hello-world-of-hugo&#34;&gt;Hello World of Hugo&lt;/h3&gt;
&lt;p&gt;Hugo official site has 
&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a quick start on macOS&lt;/a&gt;. But it may not install the latest version of Hugo, like on Ubuntu 18.04, the Hugo version is quite old if installing by &lt;strong&gt;apt&lt;/strong&gt;. I will introduce the steps on Ubuntu 18.04 here.&lt;/p&gt;
&lt;h4 id=&#34;step-1---install&#34;&gt;Step 1 - Install&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;mkdir -p temp
cd temp/
wget https://github.com/gohugoio/hugo/releases/download/v0.73.0/hugo_0.73.0_Linux-64bit.deb
sudo dpkg -i hugo_0.73.0_Linux-64bit.deb
hugo version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output like below&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hugo Static Site Generator v0.73.0-428907CC linux/amd64 BuildDate: 2020-06-23T16:30:43Z&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;step-2---new-site&#34;&gt;Step 2 - New Site&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;sudo rm hugo_0.73.0_Linux-64bit.deb 
mkdir hugo-sites
cd hugo-sites/
hugo new site hello-world
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output like below&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Congratulations! Your new Hugo site is created in /home/hongwei/temp/hugo-sites/hello-world.&lt;/p&gt;
&lt;p&gt;Just a few more steps and you&amp;rsquo;re ready to go:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download a theme into the same-named folder.
Choose a theme from https://themes.gohugo.io/ or
create your own with the &amp;ldquo;hugo new theme &lt;THEMENAME&gt;&amp;rdquo; command.&lt;/li&gt;
&lt;li&gt;Perhaps you want to add some content. You can add single files
with &amp;ldquo;hugo new &lt;SECTIONNAME&gt;/&lt;FILENAME&gt;.&lt;FORMAT&gt;&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Start the built-in live server via &amp;ldquo;hugo server&amp;rdquo;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Visit https://gohugo.io/ for quickstart guide and full documentation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s see the structure of the directory&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd hello-world
tree
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output like below&lt;br&gt;
&lt;img src=&#34;./folder_structure.png&#34; alt=&#34;folder structure&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s check the result&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now go to http://127.0.0.1:1313, you get a blank page.&lt;/p&gt;
&lt;h4 id=&#34;step-3---hello-world&#34;&gt;Step 3 - Hello World&lt;/h4&gt;
&lt;p&gt;To ask the website to say &amp;lsquo;Hello World&amp;rsquo;, we need to add content and template.&lt;br&gt;
Add a file named &lt;strong&gt;_index.md&lt;/strong&gt; in the fold of &lt;strong&gt;content&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd content/
vi _index.md
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The file content&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;---&lt;br&gt;
title: Hello, World!&lt;br&gt;
description: |&lt;br&gt;
    My personal site.&lt;br&gt;
---&lt;/p&gt;
&lt;p&gt;Welcome to my personal site.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Add a html template file named &lt;strong&gt;index.html&lt;/strong&gt; in the fold of &lt;strong&gt;layouts&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ..
cd layouts/
vi index.html
cd ..  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To check the result&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you get the &amp;lsquo;Hello World&amp;rsquo; page.&lt;br&gt;
&lt;img src=&#34;./hugo-hello-world.png&#34; alt=&#34;hugo-hello-world&#34;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;To customize the website, we will discuss Hugo theme and Academic in 
&lt;a href=&#34;https://flycoolman.com/post/build-a-free-website-in-minutes-part-2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Part-2&lt;/a&gt;.&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Minikube</title>
      <link>/devops/minikube/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/devops/minikube/</guid>
      <description>&lt;h2 id=&#34;minikube&#34;&gt;Minikube&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Minikube&lt;/strong&gt; is a tool that makes it easy to run Kubernetes locally. Minikube runs a single-node Kubernetes cluster inside a Virtual Machine (VM) on your laptop for users looking to try out Kubernetes or develop with it day-to-day.&lt;/p&gt;
&lt;h3 id=&#34;set-up-minikube&#34;&gt;Set up Minikube&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://minikube.sigs.k8s.io/docs/start/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;minikube start&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;minikube-vm-login&#34;&gt;Minikube VM Login&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On VM console:&lt;br&gt;
username: root
no password&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;from host terminal:&lt;br&gt;
minikube ssh&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;username+IP on host:&lt;br&gt;
username: docker&lt;br&gt;
password: tcuser&lt;br&gt;
i.e.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh docker@192.168.99.103
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./minikube-login.png&#34; alt=&#34;minikube-login&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh docker@$(minikube ip)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./minikube-login-1.png&#34; alt=&#34;minikube-login-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;Exit the login:
exit&lt;/p&gt;
&lt;h3 id=&#34;setting-a-vm-driver-by-default&#34;&gt;Setting a VM driver by default&lt;/h3&gt;
&lt;p&gt;minikube config set vm-driver virtualbox&lt;/p&gt;
&lt;h3 id=&#34;use-local-images-by-re-using-the-docker-daemon&#34;&gt;Use local images by re-using the Docker daemon&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How To Install and Use Docker on Ubuntu 18.04&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://kubernetes.io/docs/setup/learning-environment/minikube/#use-local-images-by-re-using-the-docker-daemon&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Use local images by re-using the Docker daemon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;eval $(minikube docker-env)&lt;/p&gt;
&lt;h3 id=&#34;commands-for-using-minikube&#34;&gt;Commands for using minikube&lt;/h3&gt;
&lt;p&gt;minikube start&lt;br&gt;
minikube delete&lt;br&gt;
minikube status&lt;/p&gt;
&lt;p&gt;minikube start -p test&lt;br&gt;
minikube delete -p test&lt;br&gt;
&lt;br&gt;
minikube ssh&lt;br&gt;
minikube ssh -p test&lt;br&gt;
minikube ip&lt;br&gt;
minikube dashboard&lt;br&gt;
minikube addons list&lt;br&gt;
&lt;br&gt;
kubectl get pods -A&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://blog.pilosus.org/posts/2019/05/18/minikube-cheat-sheet/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Minikube Cheat Sheet: most helpful commands and features I wish I knew from the start&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;minikube-command-auto-completion&#34;&gt;Minikube command auto completion&lt;/h3&gt;
&lt;p&gt;sudo apt install bash-completion&lt;br&gt;

&lt;a href=&#34;https://www.cyberciti.biz/faq/add-bash-auto-completion-in-ubuntu-linux/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to add bash auto completion in Ubuntu Linux&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/57891054/how-can-i-enable-tab-completion-to-minikube&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How can I enable Tab completion to minikube?&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java Notes</title>
      <link>/coding/java/java-notes/</link>
      <pubDate>Tue, 31 Dec 2019 23:59:59 +0000</pubDate>
      <guid>/coding/java/java-notes/</guid>
      <description>&lt;h2 id=&#34;java-notes&#34;&gt;Java Notes&lt;/h2&gt;
&lt;p&gt;A free style notes of Java.&lt;/p&gt;
&lt;h3 id=&#34;basic-knowledge&#34;&gt;Basic knowledge&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Static blocks&lt;/li&gt;
&lt;li&gt;Non static blocks&lt;/li&gt;
&lt;li&gt;Static methods&lt;/li&gt;
&lt;li&gt;Non-Static methods&lt;/li&gt;
&lt;li&gt;Static blank final variables&lt;/li&gt;
&lt;li&gt;Non-Static blank final variables&lt;/li&gt;
&lt;li&gt;Static classes&lt;/li&gt;
&lt;li&gt;Non-Static inner classes&lt;/li&gt;
&lt;li&gt;Static and dynamic polymorphism&lt;/li&gt;
&lt;li&gt;Static binding/Early binding&lt;/li&gt;
&lt;li&gt;Dynamic binding/Late binding&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;top-10-mistakes-java-developers-make&#34;&gt;Top 10 Mistakes Java Developers Make&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.programcreek.com/2014/05/top-10-mistakes-java-developers-make/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Top 10 Mistakes Java Developers Make&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;differentiate-jvm-jre-jdk-jit&#34;&gt;Differentiate JVM JRE JDK JIT&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Java Virtual Machine (JVM) is an abstract computing machine.&lt;/li&gt;
&lt;li&gt;Java Runtime Environment (JRE) is an implementation of the JVM.&lt;/li&gt;
&lt;li&gt;Java Development Kit (JDK) contains JRE along with various development tools like Java libraries, Java source compilers, Java debuggers, bundling and deployment tools.&lt;/li&gt;
&lt;li&gt;Just In Time compiler (JIT) is runs after the program has started executing, on the fly. It has access to runtime information and makes optimizations of the code for better performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://javapapers.com/core-java/differentiate-jvm-jre-jdk-jit/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Differentiate JVM JRE JDK JIT&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;class-vs-interface&#34;&gt;Class vs Interface&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Class:&lt;/strong&gt; A class is a user-defined blueprint or prototype from which objects are created. It represents the set of properties or methods that are common to all objects of one type.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interface:&lt;/strong&gt; Like a class, an interface can have methods and variables, but the methods declared in an interface are by default abstract (only method signature, no body). Interfaces specify what a class must do and not how. It is the blueprint of the class.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An interface defines a protocol of behavior and not how we should be implemented. A class that implements an interface adheres to the protocol defined by that interface.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interface variables are static because java interfaces cannot be instantiated on their own. The value of the variable must be assigned in a static context in which no instance exists.&lt;/li&gt;
&lt;li&gt;The final modifier ensures the value assigned to the interface variable is a true constant that cannot be re-assigned. In other words, interfaces can declare only constants, not instance variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pass-by-value-and-pass-by-reference-and-pass-reference-by-value&#34;&gt;Pass By Value and Pass By Reference and Pass Reference by Value&lt;/h3&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Java uses pass by value. There is no pass by reference in Java.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Pass By Value and Pass By Reference and Pass Reference by Value

&lt;a href=&#34;https://javapapers.com/core-java/java-pass-by-value-and-pass-by-reference/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Pass By Value and Pass By Reference&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java always passes parameter variables by value.&lt;/li&gt;
&lt;li&gt;Object variables in Java always point to the real object in the memory heap.&lt;/li&gt;
&lt;li&gt;A mutable object’s value can be changed when it is passed to a method.&lt;/li&gt;
&lt;li&gt;An immutable object’s value cannot be changed, even if it is passed a new value.&lt;/li&gt;
&lt;li&gt;“Passing by value” refers to passing a copy of the value.&lt;/li&gt;
&lt;li&gt;“Passing by reference” refers to passing the real reference of the variable in memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.infoworld.com/article/3512039/does-java-pass-by-reference-or-pass-by-value.html#:~:text=Java%20always%20passes%20parameter%20variables,is%20passed%20to%20a%20method.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Does Java pass by reference or pass by value?&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;java-jvm-memory-types&#34;&gt;Java (JVM) Memory Types&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Shared/Common Area&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Heap Memory&lt;br&gt;
Class instances and arrays are stored in heap memory. Heap memory is also called as shared memory. As this is the place where multiple threads will share the same data.&lt;br&gt;
Heap data area is created at VM startup. Claiming the memory back is done automatically by the garbage collector (GC).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Non-heap Memory&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Method area
Method area is created at JVM startup and shared among all the threads.
&lt;ol&gt;
&lt;li&gt;per-class structures (runtime constants and static fields)&lt;/li&gt;
&lt;li&gt;code for methods&lt;/li&gt;
&lt;li&gt;constructors&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Run-time Constant Pool&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Per-Thread Area&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Program Counter (PC) Register
PC keeps a pointer to the current statement that is being executed in its thread. If the current executing method is ‘native’, then the value of program counter register will be undefined.&lt;/li&gt;
&lt;li&gt;JVM Stacks or Frames
Java JVM frames are created when a method is invoked, it performs the dynamic linking. JVM stacks are created and managed for each thread.&lt;/li&gt;
&lt;li&gt;Native Method Stacks
It is used for native methods, and created per thread.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Memory Generations&lt;/strong&gt;
HotSpot VM’s garbage collector uses generational garbage collection. It separates the JVM’s memory into and they are called young generation and old generation.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Young Generation&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Eden space&lt;/li&gt;
&lt;li&gt;Survivor space&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Old Generation&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Tenured Generation
GC moves live objects from survivor space to tenured generation.&lt;/li&gt;
&lt;li&gt;PermGen (Permanent Generation)
The permanent generation contains meta data of the virtual machine, class and method objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Java JVM Run-time Data Areas)[https://javapapers.com/core-java/java-jvm-run-time-data-areas/#Java_Virtual_Machine_Stacks]&lt;br&gt;
(Java (JVM) Memory Types)[https://javapapers.com/core-java/java-jvm-memory-types/]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key Takeaways&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Local Variables are stored in Frames during runtime.&lt;/li&gt;
&lt;li&gt;Static Variables are stored in Method Area.&lt;/li&gt;
&lt;li&gt;Arrays are stored in heap memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java-static&#34;&gt;Java Static&lt;/h3&gt;
&lt;h4 id=&#34;java-static-variables&#34;&gt;Java Static Variables&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Java instance variables are given separate memory for storage. If there is a need for a variable to be common to all the objects of a single java class, then the static modifier should be used in the variable declaration.&lt;/li&gt;
&lt;li&gt;Any java object that belongs to that class can modify its static variables.&lt;/li&gt;
&lt;li&gt;Also, an instance is not a must to modify the static variable and it can be accessed using the java class directly.&lt;/li&gt;
&lt;li&gt;Static variables can be accessed by java instance methods also.&lt;/li&gt;
&lt;li&gt;When the value of a constant is known at compile time it is declared ‘final’ using the ‘static’ keyword.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;java-static-methods&#34;&gt;Java Static Methods&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Similar to static variables, java static methods are also common to classes and not tied to a java instance.&lt;/li&gt;
&lt;li&gt;Good practice in java is that, static methods should be invoked with using the class name though it can be invoked using an object. ClassName.methodName(arguments) or objectName.methodName(arguments)&lt;/li&gt;
&lt;li&gt;General use for java static methods is to access static fields.&lt;/li&gt;
&lt;li&gt;Static methods can be accessed by java instance methods.&lt;/li&gt;
&lt;li&gt;Java static methods cannot access instance variables or instance methods directly.&lt;/li&gt;
&lt;li&gt;Java static methods cannot use the ‘this’ keyword.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;java-static-classes&#34;&gt;Java Static Classes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;For java classes, only an inner class can be declared using the static modifier.&lt;/li&gt;
&lt;li&gt;For java a static inner class it does not mean that, all their members are static. These are called nested static classes in java.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://javapapers.com/core-java/explain-the-java-static-modifier/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Static&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;static-block&#34;&gt;Static Block&lt;/h3&gt;
&lt;p&gt;It&amp;rsquo;s a static initializer. It&amp;rsquo;s executed when the class is loaded (or initialized, to be precise, but you usually don&amp;rsquo;t notice the difference).&lt;br&gt;
It can be thought of as a &amp;ldquo;class constructor&amp;rdquo;.&lt;br&gt;
Note that there are also instance initializers, which look the same, except that they don&amp;rsquo;t have the static keyword. Those are run in addition to the code in the constructor when a new instance of the object is created.&lt;br&gt;
A static block in Java is a block of code that is executed at the time of loading a class for use in a Java application. It starts with a &amp;lsquo;static {&amp;rsquo; and it is used for initializing static Class members in general — and is also known as a &amp;lsquo;Static Initializer&amp;rsquo;. The most powerful use of a static block can be realized while performing operations that are required to be executed only once for a Class in an application lifecycle.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/2943556/static-block-in-java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Static Block in Java&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://dzone.com/articles/the-hidden-synchronized-keyword-with-a-static-bloc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Hidden Synchronized Keyword With a Static Block&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;builder-patter&#34;&gt;Builder Patter&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Builder&lt;/strong&gt; is a creational design pattern that lets you construct complex objects step by step. The pattern allows you to produce different types and representations of an object using the same construction code.&lt;/p&gt;
&lt;p&gt;Builder pattern builds a complex object using simple objects and using a step by step approach. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object.&lt;/p&gt;
&lt;p&gt;A Builder class builds the final object step by step. This builder is independent of other objects.&lt;/p&gt;
&lt;h4 id=&#34;pros-and-cons&#34;&gt;Pros and Cons&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can construct objects step-by-step, defer construction steps or run steps recursively.&lt;/li&gt;
&lt;li&gt;You can reuse the same construction code when building various representations of products.&lt;/li&gt;
&lt;li&gt;Single Responsibility Principle. You can isolate complex construction code from the business logic of the product.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The overall complexity of the code increases since the pattern requires creating multiple new classes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;relations-with-other-patterns&#34;&gt;Relations with Other Patterns&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Many designs start by using &lt;strong&gt;Factory Method&lt;/strong&gt; (less complicated and more customizable via subclasses) and evolve toward &lt;strong&gt;Abstract Factory&lt;/strong&gt;, &lt;strong&gt;Prototype&lt;/strong&gt;, or &lt;strong&gt;Builder&lt;/strong&gt; (more flexible, but more complicated).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Builder&lt;/strong&gt; focuses on constructing complex objects step by step. &lt;strong&gt;Abstract Factory&lt;/strong&gt; specializes in creating families of related objects. Abstract Factory returns the product immediately, whereas Builder lets you run some additional construction steps before fetching the product.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;strong&gt;Builder&lt;/strong&gt; when creating complex &lt;strong&gt;Composite&lt;/strong&gt; trees because you can program its construction steps to work recursively.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can combine &lt;strong&gt;Builder&lt;/strong&gt; with &lt;strong&gt;Bridge&lt;/strong&gt;: the director class plays the role of the abstraction, while different builders act as implementations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Abstract Factories&lt;/strong&gt;, &lt;strong&gt;Builders&lt;/strong&gt; and &lt;strong&gt;Prototypes&lt;/strong&gt; can all be implemented as &lt;strong&gt;Singletons&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Builder_pattern&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Builder pattern&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://refactoring.guru/design-patterns/builder&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Builder&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.tutorialspoint.com/design_pattern/builder_pattern.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Design Patterns - Builder Pattern&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;transient-keyword-in-java&#34;&gt;transient keyword in Java&lt;/h3&gt;
&lt;p&gt;The transient keyword in Java is used to indicate that a field should not be part of the serialization (which means saved, like to a file) process.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/910374/why-does-java-have-transient-fields&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Why does Java have transient fields?&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;array-vs-arraylist&#34;&gt;Array vs. ArrayList&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Array&lt;/strong&gt; is a fixed length data structure whereas &lt;strong&gt;ArrayList&lt;/strong&gt; is a variable length Collection class.&lt;/li&gt;
&lt;li&gt;We cannot change length of array once created in Java but ArrayList can be changed.&lt;/li&gt;
&lt;li&gt;We cannot store primitives in ArrayList, it can only store objects. But array can contain both primitives and objects in Java.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.javatpoint.com/array-vs-arraylist-in-java#:~:text=Array%20is%20a%20fixed%20length,primitives%20and%20objects%20in%20Java.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Array vs ArrayList in Java&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.geeksforgeeks.org/array-vs-arraylist-in-java/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Array vs ArrayList in Java&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;arraysaslist-vs-new-arraylist&#34;&gt;Arrays.asList() vs new ArrayList()&lt;/h3&gt;
&lt;p&gt;When you call Arrays.asList it does not return a java.util.ArrayList. It returns a java.util.Arrays$ArrayList which is a fixed size list backed by the original source array. In other words, it is a view for the array exposed with Java&amp;rsquo;s collection-based APIs.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/16748030/difference-between-arrays-aslistarray-and-new-arraylistintegerarrays-aslist/16748184#:~:text=asList%28ia%29%20returns%20a%20List,from%20new%20ArrayList%20.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Difference between Arrays.asList(array) and new ArrayList&lt;Integer&gt;(Arrays.asList(array))&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/4658867/why-does-arrays-aslist-return-its-own-arraylist-implementation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Why does Arrays.asList() return its own ArrayList implementation&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;access-level&#34;&gt;Access Level&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./access-level.png&#34; alt=&#34;access-level&#34;&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.programcreek.com/2011/11/java-access-level-public-protected-private/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Access Level for Members: public, protected, private&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;set-vs-set&#34;&gt;Set vs. Set&amp;lt;?&amp;gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;an unbounded wildcard Set&amp;lt;?&amp;gt; can hold elements of any type, and a raw type Set can also hold elements of any type.&lt;/li&gt;
&lt;li&gt;wildcard type is safe and the raw type is not. We can not put any element into a Set&amp;lt;?&amp;gt;&lt;/li&gt;
&lt;li&gt;When you want to use a generic type, but you don&amp;rsquo;t know or care what the actual type the parameter is, you can use &amp;lt;?&amp;gt;[1]. It can only be used as parameters for a method.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.programcreek.com/2013/12/raw-type-set-vs-unbounded-wildcard-set/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Raw type vs. Unbounded wildcard&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;arraylist-vs-linkedlist-vs-vector&#34;&gt;ArrayList vs. LinkedList vs. Vector&lt;/h3&gt;
&lt;h4 id=&#34;implementation&#34;&gt;Implementation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ArrayList&lt;/strong&gt; is implemented as a resizable array. As more elements are added to ArrayList, its size is increased dynamically. It&amp;rsquo;s elements can be accessed directly by using the get and set methods, since ArrayList is essentially an array.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LinkedList&lt;/strong&gt; is implemented as a double linked list. Its performance on add and remove is better than Arraylist, but worse on get and set methods.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vector&lt;/strong&gt; is similar with ArrayList, but it is synchronized.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;some-details&#34;&gt;Some details&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;ArrayList is a better choice if your program is thread-safe.&lt;/li&gt;
&lt;li&gt;Vector and ArrayList require more space as more elements are added.&lt;/li&gt;
&lt;li&gt;Vector each time doubles its array size, while ArrayList grow 50% of its size each time.&lt;/li&gt;
&lt;li&gt;LinkedList, however, also implements Queue interface which adds more methods than ArrayList and Vector, such as offer(), peek(), poll(), etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The default initial capacity of an ArrayList is pretty small. It is a good habit to construct the ArrayList with a higher initial capacity. This can avoid the resizing cost.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;how-to-use&#34;&gt;How to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;LinkedList should be preferred if there are a large number of add/remove operations&lt;/li&gt;
&lt;li&gt;LinkedList should be preferred if there are not a lot of random access operations.&lt;/li&gt;
&lt;li&gt;Vector is almost identical to ArrayList, and the difference is that Vector is synchronized. Because of this, it has an overhead than ArrayList. Normally, most Java programmers use ArrayList instead of Vector because they can synchronize explicitly by themselves.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./time-complexity-arraylist-linkedlist.png&#34; alt=&#34;time-complexity-arraylist-linkedlist&#34;&gt;&lt;br&gt;
add() in the table refers to add(E e), and remove() refers to remove(int index)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ArrayList has O(n) time complexity for arbitrary indices of add/remove, but O(1) for the operation at the end of the list.&lt;/li&gt;
&lt;li&gt;LinkedList has O(n) time complexity for arbitrary indices of add/remove, but O(1) for operations at end/beginning of the List.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java-collection-hierarchy&#34;&gt;Java Collection Hierarchy&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./java-collection-hierarchy.png&#34; alt=&#34;java-collection-hierarchy&#34;&gt;&lt;br&gt;
&lt;img src=&#34;./java-collections-hierarchy-1.png&#34; alt=&#34;java-collections-hierarchy-1&#34;&gt;&lt;br&gt;
&lt;img src=&#34;./java-collections-hierarchy-2.jpg&#34; alt=&#34;java-collections-hierarchy-2&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;the-queue-a-fifo-list&#34;&gt;The queue (a FIFO list)&lt;/h4&gt;
&lt;p&gt;Implementation of a queue&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A queue (of bounded size) can be efficiently implemented in an array. Look at JavaHypertext entry “queue”.&lt;/li&gt;
&lt;li&gt;A queue can be efficiently implemented using any linked list that supports deletion in the front and insertion at the end in constant time. The first (last) element of the queue is at the front (end) of the linked list.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-stack-a-lifo-list&#34;&gt;The stack (a LIFO list)&lt;/h4&gt;
&lt;p&gt;Implementation of a stack&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A stack (of bounded size) can be efficiently implemented using an array b and an int variable n: The n elements of the stack are in b[0..n-1], with b[0] being the bottom element and b[n-1] being the top element.&lt;/li&gt;
&lt;li&gt;A stack can be efficiently implemented using a linked list. The first element is the top of the stack and the last element is the bottom. It’s easy to push (prepend) an element and pop (remove) the first element in constant time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-deque&#34;&gt;The deque&lt;/h4&gt;
&lt;p&gt;The word deque, usually pronounced deck, is short for double-ended queue. A deque is a list that supports insertion and removal at both ends. Thus, a deque can be used as a queue or as a stack.&lt;/p&gt;
&lt;h4 id=&#34;stacks-queues-and-deques-in-the-java-collection-framework&#34;&gt;Stacks, queues, and deques in the Java Collection framework&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java has interface Deque&lt;E&gt;. It is implemented by classes ArrayDeque&lt;E&gt; (which implements a list in an expandable array) and LinkedList&lt;E&gt;, so these two classes can be used for a queue and for a stack.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both ArrayDeque and LinkedList also implement interface Queue&lt;E&gt;, so you can use this interface to restrict operations to queue operations. For example, create a LinkedList and assign it to a Queue variable.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Queue&amp;lt;E&amp;gt; q= new LinkedList&amp;lt;&amp;gt;();  
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thereafter, use only q for the LinkedList and operations are restricted to queue operations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java also has a class Stack&lt;E&gt;, which implements a stack in an expandable array. However, the Java API would rather you use an ArrayDeque. The problem is that there is no suitable way to restrict the operations of an Array-Deque to stack operations, so we prefer to use class Stack&lt;E&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;arraysaslist-variable-arguments&#34;&gt;Arrays.asList() Variable Arguments&lt;/h3&gt;
&lt;p&gt;Since the asList method in Arrays uses variable arguments, and &lt;strong&gt;variable arguments expressions are mapped to arrays&lt;/strong&gt;, you could either pass an inline array as in:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;List&amp;lt;String&amp;gt; list = Arrays.asList(new String[]{&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;});  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or simply pass the variable arguments that will be automatically mapped to an array:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;List&amp;lt;String&amp;gt; list = Arrays.asList(&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;);  
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;varargs-variable-length-arguments&#34;&gt;Varargs (Variable-length Arguments)&lt;/h3&gt;
&lt;p&gt;A method that takes a variable number of arguments is a varargs method.&lt;/p&gt;
&lt;p&gt;A variable-length argument is specified by three periods(…). For Example,&lt;/p&gt;
&lt;p&gt;public static void varargFunction(dataType &amp;hellip; dataVar)
{
// method body
}&lt;/p&gt;
&lt;p&gt;The &amp;hellip; syntax tells the Java compiler that the method can be called with zero or more arguments. As a result, &lt;strong&gt;dataVar&lt;/strong&gt; variable is implicitly declared as an array of type dataType[ ]. Thus, inside the method, &lt;strong&gt;dataVar&lt;/strong&gt; variable is accessed using the array syntax.&lt;br&gt;
In case of no arguments, the length of nums is 0.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vararg Methods can also be overloaded but overloading may lead to ambiguity.&lt;/li&gt;
&lt;li&gt;Prior to JDK 5, variable length arguments could be handled into two ways : One was using overloading, other was using array argument.&lt;/li&gt;
&lt;li&gt;There can be only one variable argument in a method.&lt;/li&gt;
&lt;li&gt;Variable argument (varargs) must be the last argument.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;patterns-by-type&#34;&gt;Patterns by type&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Creational
Creational patterns are ones that create objects, rather than having to instantiate objects directly. This gives the program more flexibility in deciding which objects need to be created for a given case.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Abstract factory
groups object factories that have a common theme.&lt;/li&gt;
&lt;li&gt;Builder
constructs complex objects by separating construction and representation.&lt;/li&gt;
&lt;li&gt;Factory method
creates objects without specifying the exact class to create.&lt;/li&gt;
&lt;li&gt;Prototype
creates objects by cloning an existing object.&lt;/li&gt;
&lt;li&gt;Singleton
restricts object creation for a class to only one instance.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Structural
These concern class and object composition. They use inheritance to compose interfaces and define ways to compose objects to obtain new functionality.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adapter
allows classes with incompatible interfaces to work together by wrapping its own interface around that of an already existing class.&lt;/li&gt;
&lt;li&gt;Bridge
decouples an abstraction from its implementation so that the two can vary independently.&lt;/li&gt;
&lt;li&gt;Composite
composes zero-or-more similar objects so that they can be manipulated as one object.&lt;/li&gt;
&lt;li&gt;Decorator
dynamically adds/overrides behaviour in an existing method of an object.&lt;/li&gt;
&lt;li&gt;Facade
provides a simplified interface to a large body of code.&lt;/li&gt;
&lt;li&gt;Flyweight
reduces the cost of creating and manipulating a large number of similar objects.&lt;/li&gt;
&lt;li&gt;Proxy
provides a placeholder for another object to control access, reduce cost, and reduce complexity.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Behavioral
Most of these design patterns are specifically concerned with communication between objects.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chain of responsibility
delegates commands to a chain of processing objects.&lt;/li&gt;
&lt;li&gt;Command
creates objects which encapsulate actions and parameters.&lt;/li&gt;
&lt;li&gt;Interpreter
implements a specialized language.&lt;/li&gt;
&lt;li&gt;Iterator
accesses the elements of an object sequentially without exposing its underlying representation.&lt;/li&gt;
&lt;li&gt;Mediator
allows loose coupling between classes by being the only class that has detailed knowledge of their methods.&lt;/li&gt;
&lt;li&gt;Memento
provides the ability to restore an object to its previous state (undo).&lt;/li&gt;
&lt;li&gt;Observer
is a publish/subscribe pattern which allows a number of observer objects to see an event.&lt;/li&gt;
&lt;li&gt;State
allows an object to alter its behavior when its internal state changes.&lt;/li&gt;
&lt;li&gt;Strategy
allows one of a family of algorithms to be selected on-the-fly at runtime.&lt;/li&gt;
&lt;li&gt;Template method
defines the skeleton of an algorithm as an abstract class, allowing its subclasses to provide concrete behavior.&lt;/li&gt;
&lt;li&gt;Visitor
separates an algorithm from an object structure by moving the hierarchy of methods into one object.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Design_Patterns&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Design Patterns&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;factory-pattern&#34;&gt;Factory Pattern&lt;/h3&gt;
&lt;h3 id=&#34;java-best-practice&#34;&gt;Java Best Practice&lt;/h3&gt;
&lt;h4 id=&#34;return-a-list-not-a-linkedlist&#34;&gt;Return a List, not a LinkedList&lt;/h4&gt;
&lt;h4 id=&#34;return-a-list-not-an-arraylist&#34;&gt;Return a List, not an ArrayList&lt;/h4&gt;
&lt;p&gt;Your Java code will be more flexible when you learn to return more-general object references. In most cases other developers only need to see your interface, not your implementation. Put another way, does it matter to anyone else if you used a LinkedList or an ArrayList? If it doesn&amp;rsquo;t matter, then return a List, or perhaps even a Collection.&lt;br&gt;
It&amp;rsquo;s best to return the most generic type that&amp;rsquo;s appropriate for your interface.&lt;br&gt;
If there&amp;rsquo;s some reason why ArrayList is inherently appropriate for the data you&amp;rsquo;re returning then you should use that. Typically List is fine but you might also consider using Collection if the returned values are inherently unordered.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/10328658/should-i-return-list-or-arraylist#:~:text=The%20only%20reason%20to%20return,properly%20serialize%20generic%20list%20interface.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Should i return List or ArrayList&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://alvinalexander.com/blog/post/java/java-return-collection-list-not-linkedlist/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Best Practice  - return a List, not a LinkedList&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;mutable-vs-immutable&#34;&gt;Mutable vs. Immutable&lt;/h3&gt;
&lt;h4 id=&#34;string-vs-stringbuilder-vs-stringbuffer&#34;&gt;String vs StringBuilder vs StringBuffer&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.geeksforgeeks.org/string-vs-stringbuilder-vs-stringbuffer-in-java/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;String vs StringBuilder vs StringBuffer in Java&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String is immutable&lt;/li&gt;
&lt;li&gt;StringBuilder is mutable&lt;/li&gt;
&lt;li&gt;StringBuffer is similar to StringBuilder except one difference that StringBuffer is thread safe, i.e., multiple threads can use it without any issue. The thread safety brings a penalty of performance&lt;/li&gt;
&lt;li&gt;When to use
&lt;ul&gt;
&lt;li&gt;If a string is going to remain constant throughout the program, then use String class object because a String object is immutable.&lt;/li&gt;
&lt;li&gt;If a string can change (example: lots of logic and operations in the construction of the string) and will only be accessed from a single thread, using a StringBuilder is good enough.&lt;/li&gt;
&lt;li&gt;If a string can change, and will be accessed from multiple threads, use a StringBuffer because StringBuffer is synchronous so you have thread-safety.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.ntu.edu.sg/home/ehchua/programming/java/JavaGeneric.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Generics&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.cs.wcupa.edu/rkline/cs3/generic-lists.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Generic Lists&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;http://tutorials.jenkov.com/java-generics/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Generics Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;java-x-ables&#34;&gt;Java X-ables&lt;/h3&gt;
&lt;p&gt;Mutable vs. Immutable
Closable
Serialable
Comparable&lt;/p&gt;
&lt;h3 id=&#34;java-tostring-works-differently-between-array-and-arraylist&#34;&gt;Java toString() works differently between Array and ArrayList&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/13780374/why-tostring-method-works-differently-between-array-and-arraylist-object-in-ja&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Why toString() method works differently between Array and ArrayList object in Java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The main difference between an array and an arraylist is that an arraylist is a class that is written in Java and has its own implementation (including the decision to override toString) whereas arrays are part of the language specification itself.&lt;br&gt;
In other words the language specification prevents the toString method of an array to be overriden and it therefore uses the default implementation defined in Object which prints the class name and hashcode.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An array, i.e. int[], String[], does not have toString(), but use the default implementation defined in Object&lt;/li&gt;
&lt;li&gt;Arrays class has its own toString() implementation, i.e. Arrays.toString(arr)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;comparable-vs-comparator-in-java&#34;&gt;Comparable vs Comparator in Java&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.geeksforgeeks.org/comparable-vs-comparator-in-java/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Comparable vs Comparator in Java&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.geeksforgeeks.org/comparator-interface-java/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Comparator Interface in Java with Examples&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A comparable object is capable of comparing itself with another object. The class itself must implements the java.lang.Comparable interface (override compareTo() method) to compare its instances.&lt;/p&gt;
&lt;p&gt;Unlike Comparable, &lt;strong&gt;Comparator&lt;/strong&gt; is external to the element type we are comparing. It’s a separate class. We create multiple separate classes (that implement Comparator) to compare by different members.&lt;/p&gt;
&lt;p&gt;Collections class has a second sort() method and it takes Comparator. The &lt;strong&gt;sort()&lt;/strong&gt; method invokes the &lt;strong&gt;compare()&lt;/strong&gt; to sort objects.&lt;/p&gt;
&lt;h5 id=&#34;how-does-collectionssort-work&#34;&gt;How does Collections.Sort() work?&lt;/h5&gt;
&lt;p&gt;Internally the Sort method does call Compare method of the classes it is sorting. To compare two elements, it asks “Which is greater?” Compare method returns -1, 0 or 1 to say if it is less than, equal, or greater to the other. It uses this result to then determine if they should be swapped for its sort.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comparable is meant for objects with natural ordering which means the object itself must know how it is to be ordered. Whereas, Comparator interface sorting is done through a separate class.&lt;/li&gt;
&lt;li&gt;Logically, Comparable interface compares “this” reference with the object specified and Comparator in Java compares two different class objects provided.&lt;br&gt;
If any class implements Comparable interface in Java then collection of that object either List or Array can be sorted automatically by using Collections.sort() or Arrays.sort() method and objects will be sorted based on there natural order defined by CompareTo method.&lt;/li&gt;
&lt;li&gt;To summarize, if sorting of objects needs to be based on natural order then use Comparable whereas if you sorting needs to be done on attributes of different objects, then use Comparator in Java.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;javautilproperties&#34;&gt;Java.util.Properties&lt;/h3&gt;
&lt;p&gt;The java.util.Properties class is a class which represents a persistent set of properties.The Properties can be saved to a stream or loaded from a stream.Following are the important points about Properties&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each key and its corresponding value in the property list is a string.&lt;/li&gt;
&lt;li&gt;A property list can contain another property list as its &amp;lsquo;defaults&amp;rsquo;, this second property list is searched if the property key is not found in the original property list.&lt;/li&gt;
&lt;li&gt;This class is thread-safe; multiple threads can share a single Properties object without the need for external synchronization.&lt;/li&gt;
&lt;li&gt;Properties is a subclass of Hashtable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.tutorialspoint.com/java/util/java_util_properties.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java.util.Properties Class&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.geeksforgeeks.org/java-util-properties-class-java/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java.util.Properties class in Java&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;java-8&#34;&gt;Java 8&lt;/h3&gt;
&lt;h4 id=&#34;stream&#34;&gt;Stream&lt;/h4&gt;
&lt;h4 id=&#34;foreach&#34;&gt;forEach&lt;/h4&gt;
&lt;h4 id=&#34;optional&#34;&gt;Optional&lt;/h4&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Kubernetes Notes</title>
      <link>/devops/k8s-notes/</link>
      <pubDate>Tue, 31 Dec 2019 23:59:59 +0000</pubDate>
      <guid>/devops/k8s-notes/</guid>
      <description>&lt;h2 id=&#34;k8s-notes&#34;&gt;K8S NOTES&lt;/h2&gt;
&lt;h3 id=&#34;kubernetes-components&#34;&gt;Kubernetes Components&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cluster
&lt;ul&gt;
&lt;li&gt;A cluster is a set of machines, called nodes, that run containerized applications managed by Kubernetes.&lt;/li&gt;
&lt;li&gt;A cluster has at least one worker node and at least one master node.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Node
&lt;ul&gt;
&lt;li&gt;Master node(s)&lt;br&gt;
The master node(s) manages the worker nodes and the pods in the cluster. Multiple master nodes are used to provide a cluster with failover and high availability.&lt;/li&gt;
&lt;li&gt;Worker node(s)&lt;br&gt;
The worker node(s) host the pods that are the components of the application.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;master-node-components&#34;&gt;Master Node Components&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;kube-apiserver&lt;/li&gt;
&lt;li&gt;etcd&lt;/li&gt;
&lt;li&gt;kube-scheduler&lt;/li&gt;
&lt;li&gt;kube-controller-manager
&lt;ul&gt;
&lt;li&gt;Node Controller&lt;/li&gt;
&lt;li&gt;Replication Controller&lt;/li&gt;
&lt;li&gt;Endpoints Controller&lt;/li&gt;
&lt;li&gt;Service Account &amp;amp; Token Controllers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cloud-controller-manager&lt;br&gt;
The following controllers have cloud provider dependencies:
&lt;ul&gt;
&lt;li&gt;Node Controller&lt;/li&gt;
&lt;li&gt;Route Controller&lt;/li&gt;
&lt;li&gt;Service Controller&lt;/li&gt;
&lt;li&gt;Volume Controller&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;worker-node-components&#34;&gt;Worker Node Components&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Kubelet&lt;/li&gt;
&lt;li&gt;kube-proxy&lt;/li&gt;
&lt;li&gt;Container Runtime&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;addons&#34;&gt;Addons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;DNS&lt;/li&gt;
&lt;li&gt;Web UI (Dashboard)&lt;/li&gt;
&lt;li&gt;Container Resource Monitoring&lt;/li&gt;
&lt;li&gt;Cluster-level Logging&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;k8s-abbreviation&#34;&gt;K8S Abbreviation&lt;/h3&gt;
&lt;h4 id=&#34;cni&#34;&gt;CNI&lt;/h4&gt;
&lt;p&gt;Kubernetes has adopted the Container Network Interface(CNI) specification for managing network resources on a cluster.&lt;/p&gt;
&lt;h4 id=&#34;cri&#34;&gt;CRI&lt;/h4&gt;
&lt;p&gt;Container Runtime Interface (CRI)&lt;br&gt;
Each container runtime has it own strengths, and many users have asked for Kubernetes to support more runtimes. CRI consists of a protocol buffers and gRPC API, and libraries, with additional specifications and tools under active development.&lt;br&gt;
Kubelet communicates with the container runtime (or a CRI shim for the runtime) over Unix sockets using the gRPC framework, where kubelet acts as a client and the CRI shim as the server.&lt;br&gt;
&lt;img src=&#34;./cri.png&#34; alt=&#34;cri.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;CRI-O&lt;/li&gt;
&lt;li&gt;Containerd&lt;/li&gt;
&lt;li&gt;Other CRI runtimes: frakti&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;csi&#34;&gt;CSI&lt;/h4&gt;
&lt;p&gt;The goal of CSI is to establish a standardized mechanism for Container Orchestration Systems (COs) to expose arbitrary storage systems to their containerized workloads.
Assuming a CSI storage plugin is already deployed on a Kubernetes cluster, users can use CSI volumes through the familiar Kubernetes storage API objects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PersistentVolumeClaims&lt;/li&gt;
&lt;li&gt;PersistentVolumes&lt;/li&gt;
&lt;li&gt;StorageClasses&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;crd&#34;&gt;CRD&lt;/h4&gt;
&lt;p&gt;CustomResourceDefinition&lt;/p&gt;
&lt;h3 id=&#34;k8s-networking&#34;&gt;K8S Networking&lt;/h3&gt;
&lt;h4 id=&#34;pod-communication&#34;&gt;POD Communication&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Inner POD&lt;br&gt;
Multi-containers in one POD&lt;br&gt;
Containers within a pod share an IP address and port space, and can find each other via localhost. They can also communicate with each other using standard inter-process communications.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shared volume&lt;/li&gt;
&lt;li&gt;IPC, i.e. queue&lt;/li&gt;
&lt;li&gt;Networking, localhost with different port&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inter PODs&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;services&#34;&gt;Services&lt;/h3&gt;
&lt;h4 id=&#34;clusterip&#34;&gt;ClusterIP&lt;/h4&gt;
&lt;p&gt;ClusterIP accesses the services through proxy.&lt;br&gt;
ClusterIP can access services only inside the cluster.&lt;br&gt;
&lt;img src=&#34;./clusterip.png&#34; alt=&#34;clusterip&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;nodeport&#34;&gt;Nodeport&lt;/h4&gt;
&lt;p&gt;NodePort opens a specific port on each node of the cluster and traffic on that node is forwarded directly to the service.&lt;br&gt;
&lt;img src=&#34;./nodeport.png&#34; alt=&#34;nodeport&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;loadbalancer&#34;&gt;Loadbalancer&lt;/h4&gt;
&lt;p&gt;All the traffic on the port is forwarded to the service, there&amp;rsquo;s no filtering, no routing.&lt;br&gt;
&lt;img src=&#34;./loadbalancer.png&#34; alt=&#34;loadbalancer&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;ingress-controller&#34;&gt;Ingress Controller&lt;/h3&gt;
&lt;p&gt;Ingress Controller but there are third party solutions like &lt;strong&gt;Traefik&lt;/strong&gt; and &lt;strong&gt;Nginx&lt;/strong&gt; available. Ingress controller also provide L7 load balancing unlike cluster services.&lt;/p&gt;
&lt;h3 id=&#34;network-policies&#34;&gt;Network policies&lt;/h3&gt;
&lt;p&gt;Isolation policies are configured on a per-namespace basis.&lt;br&gt;

&lt;a href=&#34;https://cloudnativelabs.github.io/post/2017-04-18-kubernetes-networking/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Networking&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;k8s-objects&#34;&gt;K8S Objects&lt;/h3&gt;
&lt;p&gt;To find all the objects in some specific API version:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kubectl api-resources | cut -c92-&lt;/li&gt;
&lt;li&gt;kubectl api-resources | cut -c92-150&lt;/li&gt;
&lt;li&gt;kubectl api-resources | cut -c92-150 | wc -l&lt;/li&gt;
&lt;li&gt;kubectl api-resources&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pod&#34;&gt;Pod&lt;/h4&gt;
&lt;p&gt;A thin wrapper around one or more containers&lt;/p&gt;
&lt;h4 id=&#34;daemonset&#34;&gt;DaemonSet&lt;/h4&gt;
&lt;p&gt;Implements a single instance of a pod on a worker node&lt;/p&gt;
&lt;h4 id=&#34;deployment&#34;&gt;Deployment&lt;/h4&gt;
&lt;p&gt;Details how to roll out (or roll back) across versions of your application&lt;/p&gt;
&lt;h4 id=&#34;replicaset&#34;&gt;ReplicaSet&lt;/h4&gt;
&lt;p&gt;Ensures a defined number of pods are always running&lt;/p&gt;
&lt;h4 id=&#34;job&#34;&gt;Job&lt;/h4&gt;
&lt;p&gt;Ensures a pod properly runs to completion&lt;/p&gt;
&lt;h4 id=&#34;service&#34;&gt;Service&lt;/h4&gt;
&lt;p&gt;Maps a fixed IP address to a logical group of pods&lt;/p&gt;
&lt;h4 id=&#34;label&#34;&gt;Label&lt;/h4&gt;
&lt;p&gt;Key/Value pairs used for association and filtering&lt;br&gt;
Labels in Kubernetes are intended to be used to specify identifying attributes for objects. They are used by selector queries or with label selectors. Since they are used internally by Kubernetes, the structure of keys and values is constrained, to optimize queries.&lt;/p&gt;
&lt;h4 id=&#34;annotations&#34;&gt;Annotations&lt;/h4&gt;
&lt;p&gt;annotations are a way to attach non-identifying metadata to objects. This metadata is not used internally by Kubernetes, so they cannot be used to identify within k8s. Instead, they are used by external tools and libraries. Examples of annotations include build/release timestamps, client library information for debugging, or fields managed by a network policy like Calico in this case.&lt;/p&gt;
&lt;h4 id=&#34;label-vs-annotation&#34;&gt;Label vs. Annotation&lt;/h4&gt;
&lt;p&gt;You can use either labels or annotations to attach metadata to Kubernetes objects. Labels can be used to select objects and to find collections of objects that satisfy certain conditions. In contrast, annotations are not used to identify and select objects.&lt;/p&gt;
&lt;h4 id=&#34;taints-and-tolerations&#34;&gt;Taints and Tolerations&lt;/h4&gt;
&lt;p&gt;Node affinity, described here, is a property of pods that attracts them to a set of nodes (either as a preference or a hard requirement). Taints are the opposite – they allow a node to repel a set of pods.&lt;/p&gt;
&lt;p&gt;Taints and tolerations work together to ensure that pods are not scheduled onto inappropriate nodes. One or more taints are applied to a node; this marks that the node should not accept any pods that do not tolerate the taints. Tolerations are applied to pods, and allow (but do not require) the pods to schedule onto nodes with matching taints.&lt;/p&gt;
&lt;h4 id=&#34;node-isolationrestriction&#34;&gt;Node isolation/restriction&lt;/h4&gt;
&lt;p&gt;Adding labels to Node objects allows targeting pods to specific nodes or groups of nodes. This can be used to ensure specific pods only run on nodes with certain isolation, security, or regulatory properties.&lt;/p&gt;
&lt;h4 id=&#34;nodeselector&#34;&gt;NODESELECTOR&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Attach a label to the node&lt;/li&gt;
&lt;li&gt;Add a nodeSelector field to your pod configuration&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;affinity-and-anti-affinity&#34;&gt;Affinity and anti-affinity&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;• Node affinity
• Inter-pod affinity and anti-affinity
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;nodeSelector provides a very simple way to constrain pods to nodes with particular labels. The affinity/anti-affinity feature, currently in beta, greatly extends the types of constraints you can express. The key enhancements are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;• The language is more expressive (not just “AND of exact match”)
• You can indicate that the rule is “soft”/“preference” rather than a hard requirement, so if the scheduler can’t satisfy it, the pod will still be scheduled
• You can constrain against labels on other pods running on the node (or other topological domain), rather than against labels on the node itself, which allows rules about which pods can and cannot be co-located
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The affinity feature consists of two types of affinity, “node affinity” and “inter-pod affinity/anti-affinity”. Node affinity is like the existing nodeSelector (but with the first two benefits listed above), while inter-pod affinity/anti-affinity constrains against pod labels rather than node labels, as described in the third item listed above, in addition to having the first and second properties listed above.&lt;/p&gt;
&lt;p&gt;Node affinity is conceptually similar to nodeSelector – it allows you to constrain which nodes your pod is eligible to be scheduled on, based on labels on the node.&lt;/p&gt;
&lt;h3 id=&#34;deploy&#34;&gt;Deploy&lt;/h3&gt;
&lt;p&gt;When you wish to deploy an application in Kubernetes, you usually define three components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;strong&gt;Deployment&lt;/strong&gt; — which is a recipe for creating copies of your application called Pods&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;Service&lt;/strong&gt; — an internal load balancer that routes the traffic to Pods&lt;/li&gt;
&lt;li&gt;an &lt;strong&gt;Ingress&lt;/strong&gt; — a description of how the traffic should flow from outside the cluster to your Service&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ingress&#34;&gt;Ingress&lt;/h3&gt;
&lt;h4 id=&#34;what-is-an-ingress&#34;&gt;What is an ingress?&lt;/h4&gt;
&lt;p&gt;In Kubernetes, an Ingress is an object that allows access to your Kubernetes services from outside the Kubernetes cluster. You configure access by creating a collection of rules that define which inbound connections reach which services.&lt;br&gt;
&lt;br&gt;
Ingress, added in Kubernetes v1.1, exposes HTTP and HTTPS routes from outside the cluster to services within the cluster. Traffic routing is controlled by rules defined on the Ingress resource.&lt;br&gt;
&lt;br&gt;
Internet&amp;mdash;[ Ingress ]&amp;ndash;|&amp;ndash;|&amp;ndash;[ Services ]
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;An Ingress can be configured to give services externally-reachable URLs, load balance traffic, terminate SSL, and offer name based virtual hosting. An Ingress controller is responsible for fulfilling the Ingress, usually with a loadbalancer, though it may also configure your edge router or additional frontends to help handle the traffic.&lt;/p&gt;
&lt;p&gt;An Ingress does not expose arbitrary ports or protocols. Exposing services other than HTTP and HTTPS to the internet typically uses a service of type NodePort or LoadBalancer.&lt;/p&gt;
&lt;h4 id=&#34;what-is-an-ingress-controller&#34;&gt;What is an ingress controller?&lt;/h4&gt;
&lt;p&gt;Kubernetes supports a high level abstraction called Ingress, which allows simple host or URL based HTTP routing. An ingress is a core concept (in beta) of Kubernetes, but is always implemented by a third party proxy. These implementations are known as ingress controllers.&lt;br&gt;
&lt;br&gt;
In order for the Ingress resource to work, the cluster must have an ingress controller running.&lt;br&gt;
Unlike other types of controllers which run as part of the kube-controller-manager binary, Ingress controllers are not started automatically with a cluster. Let’s see some options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ALB Ingress Controller&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ingress-vs-ingress-controller&#34;&gt;Ingress vs. Ingress controller&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Ingress should be the rules for the traffic, which indicate the destination of a request will go through in the cluster.&lt;/li&gt;
&lt;li&gt;Ingress Controller is the implementation for the Ingress. GCE and Nginx are both supported by k8s. They will take care of L4 or L7 proxy.&lt;/li&gt;
&lt;li&gt;Just like other objects in K8s, ingress is also a type of object, which is mainly referred as set of redirection rules.&lt;/li&gt;
&lt;li&gt;Where as ingress controller is like other deployment objects(could be deamon set as well) which listen and configure those ingress rules.&lt;/li&gt;
&lt;li&gt;If I talk in terms of Nginx, Ingress controller is Nginx software itself where as ingress(ingress rules) are nginx configurations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-ingress-resource&#34;&gt;The Ingress Resource&lt;/h4&gt;
&lt;p&gt;A minimal ingress resource example:&lt;br&gt;
&lt;img src=&#34;./ingress-resource-examle.png&#34; alt=&#34;ingress-resource-examle&#34;&gt;&lt;/p&gt;
&lt;p&gt;As with all other Kubernetes resources, an Ingress needs apiVersion, kind, and metadata fields. Ingress frequently uses annotations to configure some options depending on the Ingress controller, an example of which is the rewrite-target annotation. Different Ingress controller support different annotations. Review the documentation for your choice of Ingress controller to learn which annotations are supported.&lt;br&gt;
The Ingress spec has all the information needed to configure a loadbalancer or proxy server. Most importantly, it contains a list of rules matched against all incoming requests. Ingress resource only supports rules for directing HTTP traffic.&lt;/p&gt;
&lt;h4 id=&#34;ingress-rules&#34;&gt;Ingress Rules&lt;/h4&gt;
&lt;p&gt;Each http rule contains the following information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An optional host. In this example, no host is specified, so the rule applies to all inbound HTTP traffic through the IP address specified. If a host is provided (for example, foo.bar.com), the rules apply to that host.&lt;/li&gt;
&lt;li&gt;A list of paths (for example, /testpath), each of which has an associated backend defined with a serviceName and servicePort. Both the host and path must match the content of an incoming request before the loadbalancer will direct traffic to the referenced service.&lt;/li&gt;
&lt;li&gt;A backend is a combination of service and port names as described in the services doc. HTTP (and HTTPS) requests to the Ingress matching the host and path of the rule will be sent to the listed backend.&lt;/li&gt;
&lt;li&gt;A default backend is often configured in an Ingress controller that will service any requests that do not match a path in the spec.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;default-backend&#34;&gt;Default Backend&lt;/h4&gt;
&lt;p&gt;An Ingress with no rules sends all traffic to a single default backend. The default backend is typically a configuration option of the Ingress controller and is not specified in your Ingress resources.&lt;/p&gt;
&lt;p&gt;If none of the hosts or paths match the HTTP request in the Ingress objects, the traffic is routed to your default backend.&lt;/p&gt;
&lt;h3 id=&#34;configmap&#34;&gt;ConfigMap&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://matthewpalmer.net/kubernetes-app-developer/articles/ultimate-configmap-guide-kubernetes.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ultimate Guide to ConfigMaps in Kubernetes&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;secrets&#34;&gt;Secrets&lt;/h3&gt;
&lt;p&gt;Secret data should be stored and handled in a way that can be easily hidden and possibly encrypted at rest if the environment is configured as such. The Secret data is represented as base64-encoded information, and it is critical to understand that this is not encrypted. As soon as the secret is injected into the pod, the pod itself can see the secret data in plain text.&lt;/p&gt;
&lt;p&gt;Secret data is meant to be small amounts of data, limited by default in Kubernetes to 1 MB in size, for the base64-encoded data, so ensure that the actual data is approximately 750 KB because of the overhead of the encoding.&lt;/p&gt;
&lt;p&gt;There are three types of secrets in Kubernetes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;generic&lt;br&gt;
regular key/value pairs that are created from a file, a directory, or from string literals using the &amp;ndash;from-literal= parameter.&lt;/li&gt;
&lt;li&gt;docker-registry&lt;br&gt;
This is used by the kubelet when passed in a pod template if there is an imagePullsecret to provide the credentials needed to authenticate to a private Docker registry:&lt;/li&gt;
&lt;li&gt;tls&lt;br&gt;
This creates a Transport Layer Security (TLS) secret from a valid public/private key pair. As long as the cert is in a valid PEM format, the key pair will be encoded as a secret and can be passed to the pod to use for SSL/TLS needs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;configmaps-vs-secrets&#34;&gt;ConfigMaps vs Secrets&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;the ConfigMap API is meant more for string data that is not really sensitive data. If your application requires more sensitive data, the Secrets API is more appropriate.&lt;/li&gt;
&lt;li&gt;ConfigMap data can be injected as either a volume mounted into the pod or as environment variables.&lt;/li&gt;
&lt;li&gt;Secrets are also mounted into tmpfs only on the nodes that have a pod that requires the secret and are deleted when the pod that needs it is gone. This prevents any secrets from being left behind on the disk of the node.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;roles&#34;&gt;Roles&lt;/h3&gt;
&lt;p&gt;Kubernetes has two types of roles, role and clusterRole, the difference being that role is specific to a namespace, and clusterRole is a cluster-wide role across all namespaces.&lt;/p&gt;
&lt;h3 id=&#34;rolebindings&#34;&gt;RoleBindings&lt;/h3&gt;
&lt;p&gt;The RoleBinding allows a mapping of a subject like a user or group to a specific role. Bindings also have two modes: roleBinding, which is specific to a namespace, and clusterRoleBinding, which is across the entire cluster.&lt;/p&gt;
&lt;h3 id=&#34;storage&#34;&gt;Storage&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;PersistentVolume – the low level representation of a storage volume&lt;/li&gt;
&lt;li&gt;Volume Driver – the code used to communicate with the backend storage provider&lt;/li&gt;
&lt;li&gt;Pod – a running container that will consume a PersistentVolume&lt;/li&gt;
&lt;li&gt;PersistentVolumeClaim – the binding between a Pod and PersistentVolume&lt;/li&gt;
&lt;li&gt;StorageClass – allows for dynamic provisioning of PersistentVolumes&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;controllers-and-kubelets&#34;&gt;Controllers and Kubelets&lt;/h4&gt;
&lt;p&gt;Kubernetes has a number of controllers that run on the masters, monitor the state of the cluster and initiate actions in response to events.&lt;br&gt;
It also runs a kubelet process on all of the worker nodes. The kubelet stays in constant contact with the controllers, submitting metrics about current running pods and listening for new instructions.&lt;/p&gt;
&lt;h5 id=&#34;kubelet&#34;&gt;Kubelet:&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Mount and format new PersistentVolumes that are scheduled to this host&lt;/li&gt;
&lt;li&gt;Start containers with PersistentVolume hostpath mounted inside the container&lt;/li&gt;
&lt;li&gt;Stop containers and unmount the associated PersistentVolume&lt;/li&gt;
&lt;li&gt;Constantly send metrics to the controllers about container &amp;amp; PersistentVolume state&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;controller&#34;&gt;Controller:&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;to match a PersistentVolumeClaim to a PersistentVolume&lt;/li&gt;
&lt;li&gt;to dynamically provision a new PersistentVolume if a claim cannot be met (if enabled)
&lt;ul&gt;
&lt;li&gt;in the case of EBS this is done via the AWS api from the masters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;to attach the backend storage to a specific node if needed
&lt;ul&gt;
&lt;li&gt;in the case of EBS this is done via the AWS api from the masters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;to instruct the kubelet for a node to mount (and potentially format) the volume
&lt;ul&gt;
&lt;li&gt;this is done on the actual node&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;to instruct the kubelet to start a container that uses the volume&lt;br&gt;
The kubelet itself performs the low-level mount and mkfs commands when instructed by the controller.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;kubernetes-operator&#34;&gt;Kubernetes Operator&lt;/h3&gt;
&lt;p&gt;An Operator is an application-specific controller that extends the Kubernetes API to create, configure, and manage instances of complex stateful applications on behalf of a Kubernetes user. It builds upon the basic Kubernetes resource and controller concepts but includes domain or application-specific knowledge to automate common tasks.&lt;br&gt;
Examples are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;elasticsearch-operator&lt;/li&gt;
&lt;li&gt;prometheus-operator&lt;/li&gt;
&lt;li&gt;cassandra-operator&lt;/li&gt;
&lt;li&gt;Flux  The GitOps Kubernetes Operator&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    TBD
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://learnk8s.io/troubleshooting-deployments&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A visual guide on troubleshooting Kubernetes deployments&lt;/a&gt; | 
&lt;a href=&#34;./A-visual-guide-on-troubleshooting-Kubernetes.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://cloudnativelabs.github.io/post/2017-04-18-kubernetes-networking/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Networking&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://matthewpalmer.net/kubernetes-app-developer/articles/ultimate-configmap-guide-kubernetes.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ultimate Guide to ConfigMaps in Kubernetes&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://learnk8s.io/troubleshooting-deployments&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A visual guide on troubleshooting Kubernetes deployments&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://portworx.com/basic-guide-kubernetes-storage/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A Basic Guide to Kubernetes Storage: PVS, PVCs, Statefulsets and More&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Python Notes</title>
      <link>/coding/python/python-notes/</link>
      <pubDate>Tue, 31 Dec 2019 23:59:59 +0000</pubDate>
      <guid>/coding/python/python-notes/</guid>
      <description>&lt;h2 id=&#34;python-notes&#34;&gt;Python Notes&lt;/h2&gt;
&lt;p&gt;A free style notes of Python.&lt;/p&gt;
&lt;h3 id=&#34;class-or-static-variables-in-python&#34;&gt;Class or Static Variables in Python&lt;/h3&gt;
&lt;p&gt;In C++ and Java, we can use static keyword to make a variable as class variable. The variables which don’t have preceding static keyword are instance variables.&lt;/p&gt;
&lt;p&gt;The Python approach is simple, it &lt;strong&gt;doesn’t&lt;/strong&gt; require a static keyword. All variables which are assigned a value in class declaration are class variables. And variables which are assigned values inside methods are instance variables.&lt;/p&gt;
&lt;h3 id=&#34;true-or-false&#34;&gt;True or False&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Most Values are True:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Almost any value is evaluated to True if it has some sort of content.&lt;/li&gt;
&lt;li&gt;Any string is True, except empty strings.&lt;/li&gt;
&lt;li&gt;Any number is True, except 0.&lt;/li&gt;
&lt;li&gt;Any list, tuple, set, and dictionary are True, except empty ones.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Some Values are False:&lt;/strong&gt;&lt;br&gt;
In fact, there are not many values that evaluates to False,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;except empty values, such as (), [], {}, &amp;ldquo;&amp;rdquo;,&lt;/li&gt;
&lt;li&gt;the number 0, and the value None.&lt;/li&gt;
&lt;li&gt;And of course the value False evaluates to False.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;casting&#34;&gt;Casting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;int()&lt;/strong&gt; - constructs an integer number from an integer literal, a float literal (by rounding down to the previous whole number), or a string literal (providing the string represents a whole number)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;float()&lt;/strong&gt; - constructs a float number from an integer literal, a float literal or a string literal (providing the string represents a float or an integer)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tr()&lt;/strong&gt; - constructs a string from a wide variety of data types, including strings, integer literals and float literals&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dictionary--vs-update&#34;&gt;Dictionary: [] vs. update&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/1024847/how-can-i-add-new-keys-to-a-dictionary&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How can I add new keys to a dictionary?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;[]&lt;/strong&gt;&lt;br&gt;
you create a new key\value pair on a dictionary by assigning a value to that key. If the key doesn&amp;rsquo;t exist, it&amp;rsquo;s added and points to that value. If it exists, the current value it points to is overwritten.&lt;br&gt;
the d[key]=val syntax as it is shorter and can handle any object as key (as long it is hashable), and only sets one value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;update&lt;/strong&gt;&lt;br&gt;
Whereas the .update(key1=val1, key2=val2) is nicer if you want to set multiple values at the same time, as long as the keys are strings (since kwargs are converted to strings).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    dict.update can also take another dictionary, but I personally prefer not to explicitly create a new dictionary in order to update another one.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;collections&#34;&gt;collections&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://docs.python.org/3/library/collections.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;collections — Container datatypes&lt;/a&gt;&lt;br&gt;
This module implements specialized container datatypes providing alternatives to Python’s general purpose built-in containers, dict, list, set, and tuple.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./python-collections.png&#34; alt=&#34;python-collections&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Deprecated since version 3.3, will be removed in version 3.10: Moved Collections Abstract Base Classes to the collections.abc module. For backwards compatibility, they continue to be visible in this module through Python 3.9.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;collectionsabc&#34;&gt;collections.abc&lt;/h3&gt;
&lt;p&gt;collections.abc — Abstract Base Classes for Containers&lt;/p&gt;
&lt;h3 id=&#34;forwhile-else&#34;&gt;for/while else&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/9979970/why-does-python-use-else-after-for-and-while-loops&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Why does python use &amp;lsquo;else&amp;rsquo; after for and while loops?&lt;/a&gt;&lt;br&gt;
A common construct is to run a loop until something is found and then to break out of the loop. The problem is that if I break out of the loop or the loop ends I need to determine which case happened. One method is to create a flag or store variable that will let me do a second test to see how the loop was exited.&lt;/p&gt;
&lt;p&gt;For example assume that I need to search through a list and process each item until a flag item is found and then stop processing. If the flag item is missing then an exception needs to be raised.&lt;/p&gt;
&lt;p&gt;Using the Python for&amp;hellip;else construct you have&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for i in mylist:
    if i == theflag:
        break
    process(i)
else:
    raise ValueError(&amp;quot;List argument missing terminal flag.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Compare this to a method that does not use this syntactic sugar:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;flagfound = False
for i in mylist:
    if i == theflag:
        flagfound = True
        break
    process(i)
if not flagfound:
    raise ValueError(&amp;quot;List argument missing terminal flag.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the first case the raise is bound tightly to the for loop it works with. In the second the binding is not as strong and errors may be introduced during maintenance.&lt;/p&gt;
&lt;h3 id=&#34;strsplit&#34;&gt;str.split()&lt;/h3&gt;
&lt;p&gt;Return a list of the words in the string, using sep as the delimiter string.&lt;br&gt;
for example, &amp;lsquo;1&amp;lt;&amp;gt;2&amp;lt;&amp;gt;3&amp;rsquo;.split(&amp;lsquo;&amp;lt;&amp;gt;&amp;rsquo;) returns [&amp;lsquo;1&amp;rsquo;, &amp;lsquo;2&amp;rsquo;, &amp;lsquo;3&amp;rsquo;]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The separator can be string, not only single character&lt;/li&gt;
&lt;li&gt;The return value of split
&lt;ul&gt;
&lt;li&gt;if not found, the return value is the original full string, like &amp;lsquo;1&amp;lt;&amp;gt;2&amp;lt;&amp;gt;3&amp;rsquo;.split(&amp;lsquo;not&amp;rsquo;) returns [&amp;lsquo;1&amp;lt;&amp;gt;2&amp;lt;&amp;gt;3&amp;rsquo;]&lt;/li&gt;
&lt;li&gt;if found, the strings are separated by the separator, like &amp;lsquo;1&amp;lt;&amp;gt;2&amp;lt;&amp;gt;3&amp;rsquo;.split(&amp;lsquo;&amp;lt;&amp;gt;&amp;rsquo;, 1) returns [&amp;lsquo;1&amp;rsquo;, &amp;lsquo;2&amp;lt;&amp;gt;3&amp;rsquo;]&lt;/li&gt;
&lt;li&gt;&amp;lsquo;&#39;.split(&amp;lsquo;&amp;lt;&amp;gt;&amp;rsquo;) returns [&#39;&#39;]&lt;/li&gt;
&lt;li&gt;&amp;lsquo;&#39;.split(&#39;&#39;) raises exception&lt;/li&gt;
&lt;li&gt;&#39;  1  2   3  &amp;lsquo;.split() returns [&amp;lsquo;1&amp;rsquo;, &amp;lsquo;2&amp;rsquo;, &amp;lsquo;3&amp;rsquo;],&lt;br&gt;
&#39;  1  2   3  &amp;lsquo;.split(None, 1) returns [&amp;lsquo;1&amp;rsquo;, &amp;lsquo;2   3  &amp;lsquo;],&lt;br&gt;
&#39;  1  2   3  &amp;lsquo;.split(None) returns [&amp;lsquo;1&amp;rsquo;, &amp;lsquo;2&amp;rsquo;, &amp;lsquo;3&amp;rsquo;]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    TBD
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;a href=&#34;https://flycoolman.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Just a Placeholder&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Python vs. Java</title>
      <link>/coding/python/python-vs-java/</link>
      <pubDate>Tue, 31 Dec 2019 23:59:59 +0000</pubDate>
      <guid>/coding/python/python-vs-java/</guid>
      <description>&lt;h2 id=&#34;python-vs-java&#34;&gt;Python vs. Java&lt;/h2&gt;
&lt;p&gt;A VS. notes between Python and Java.&lt;/p&gt;
&lt;h3 id=&#34;type-casting&#34;&gt;Type casting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python: &lt;strong&gt;int(1.9)&lt;/strong&gt;, &lt;strong&gt;float(1)&lt;/strong&gt;, &lt;strong&gt;str(1.9)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Java:
&lt;ul&gt;
&lt;li&gt;Narrowing casting: (manually) - converting a larger type to a smaller size type
&lt;strong&gt;(int)1.9&lt;/strong&gt;, &lt;strong&gt;(float)9.78&lt;/strong&gt; &lt;br&gt;
double -&amp;gt; float -&amp;gt; long -&amp;gt; int -&amp;gt; char -&amp;gt; short -&amp;gt; byte&lt;/li&gt;
&lt;li&gt;Widening casting: automatically - converting a smaller type to a larger type size&lt;br&gt;
byte -&amp;gt; short -&amp;gt; char -&amp;gt; int -&amp;gt; long -&amp;gt; float -&amp;gt; double&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;true-or-false&#34;&gt;True or False&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python: True/False&lt;/li&gt;
&lt;li&gt;Java: true/false&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;map-sorting&#34;&gt;Map sorting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python:&lt;br&gt;
Easy to use sorted() and lambda to sort dict/map by keys or values&lt;/li&gt;
&lt;li&gt;Java:&lt;br&gt;
Use Collections.sort() and Comparator to sort map by keys or values&lt;br&gt;
Java 8 provides new ways of defining Comparators by using lambda expressions and the comparing() static factory method.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;python-max-vs-java-mathmax-vs-java-collectionsmax&#34;&gt;Python max() vs Java Math.max() vs Java Collections.max()&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Python max()&lt;br&gt;
Can campare multiple items, or iterable, even strings&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  max(n1, n2, n3, ...)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    max(iterable)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or &lt;strong&gt;Compare strings&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    max(&amp;quot;Mike&amp;quot;, &amp;quot;John&amp;quot;, &amp;quot;Vicky&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java max()&lt;br&gt;
Only compare two mathematic items, i.e. int, float, double &amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java Collections.max()&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;max(Collection&amp;lt;? extends T&amp;gt; coll)&lt;br&gt;
Returns the maximum element of the given collection, according to the natural ordering of its elements.&lt;br&gt;
static &lt;T&gt; T	max(Collection&amp;lt;? extends T&amp;gt; coll, Comparator&amp;lt;? super T&amp;gt; comp)&lt;br&gt;
Returns the maximum element of the given collection, according to the order induced by the specified comparator.&lt;br&gt;
&lt;strong&gt;Compare Integers&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Integer[] num = { 2, 4, 7, 5, 9 };
    // using Collections.min() to
    // find minimum element
    // using only 1 line.
    int min = Collections.min(Arrays.asList(num));
    // using Collections.max()
    // to find maximum element
    // using only 1 line.
    int max = Collections.max(Arrays.asList(num));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or &lt;strong&gt;Compare Strings&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    // List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;String&amp;gt;(Arrays.asList(&amp;quot;Mike Smith&amp;quot;, &amp;quot;John&amp;quot;, &amp;quot;Vicky&amp;quot;));
    List&amp;lt;String&amp;gt; list = Arrays.asList(&amp;quot;Mike&amp;quot;, &amp;quot;John&amp;quot;, &amp;quot;Vicky&amp;quot;);
    String max = Collections.max(list);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or &lt;strong&gt;Use comparator&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    List&amp;lt;String&amp;gt; list = Arrays.asList(&amp;quot;Mike Smith&amp;quot;, &amp;quot;John&amp;quot;, &amp;quot;Vicky&amp;quot;);
    String max = Collections.max(list, Comparator.comparing(s -&amp;gt; s.length()));
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Python - Java&lt;br&gt;
The aboves are same to min().
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;infinity&#34;&gt;Infinity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Python&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;math.inf
The &lt;strong&gt;math.inf&lt;/strong&gt; constant returns a floating-point positive infinity.
For negative infinity, use &lt;strong&gt;-math.inf&lt;/strong&gt;.
The inf constant is equivalent to float(&amp;lsquo;inf&amp;rsquo;).&lt;/p&gt;
&lt;p&gt;import math
print(math.inf)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sys.maxsize&lt;br&gt;
An integer giving the maximum value a variable of type Py_ssize_t can take. It’s usually 2&lt;strong&gt;31 - 1 on a 32-bit platform and 2&lt;/strong&gt;63 - 1 on a 64-bit platform.&lt;br&gt;
like sys.maxint in Python2.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Integer.MAX_VALUE, Integer.MIN_VALUE, Integer.MAX_VALUE+1, Integer.MIN_VALUE-1&lt;/li&gt;
&lt;li&gt;Long.MAX_VALUE, Long.MIN_VALUE&lt;/li&gt;
&lt;li&gt;Float.MAX_VALUE, Float.MIN_VALUE, Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY&lt;/li&gt;
&lt;li&gt;Double.MAX_VALUE, Double.MIN_VALUE, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NaN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    There is no way to represent infinity as an integer in Python. This matches the behaviour of many other languages. However, due to Python&amp;rsquo;s dynamic typing system, you can use float(&amp;lsquo;inf&amp;rsquo;) in place of an integer, and it will behave as you would expect.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    To Be Continued
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;mapdict-composite-key&#34;&gt;Map/Dict Composite key&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  map = {(1, 0) : 2, (1, 1) : 3, (2, 0) : 4, (2, 1) : 5}
  map[(1,0)]
  map.get((1,0))
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java&lt;br&gt;
Not so easy to do&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;string-equals-vs-&#34;&gt;String equals vs ==&lt;/h3&gt;
&lt;p&gt;Check if the characters in two strings are identical&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Python ==&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  s1 = &amp;quot;Hello&amp;quot;
  s2 = &amp;quot;Hello&amp;quot;
  s3 = &amp;quot;Hello3&amp;quot;
  s4 = &amp;quot;Hell&amp;quot; + &amp;quot;o&amp;quot;
  s5 = &amp;quot;Hell&amp;quot;
  s5 += &amp;quot;o&amp;quot;
  id(s1)                 #  140701928086752
  id(s2)                 #  140701928086752
  id(s3)                 #  140701928160032
  id(s4)                 #  140701928086752
  id(s5)                 #  140701884560640
  s1 == s2               #  True
  s1 == s3               #  False
  s1 == s4               #  True
  s1 == s5               #  True
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java equals() vs ==&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;==&lt;/strong&gt; to compare memory address or say identity in system
&lt;strong&gt;equals()&lt;/strong&gt; to compare the content of strings&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    String s1 = &amp;quot;Hello&amp;quot;;
    String s2 = &amp;quot;Hello&amp;quot;;
    String s3 = &amp;quot;Hello3&amp;quot;;
    String s4 = &amp;quot;Hell&amp;quot; + &amp;quot;o&amp;quot;;
    String s5 = &amp;quot;Hell&amp;quot;;
    s5 = s5 + &amp;quot;o&amp;quot;;
    System.out.println(Integer.toHexString(s1.hashCode()));                //  42628b2
    System.out.println(Integer.toHexString(s2.hashCode()));                //  42628b2
    System.out.println(Integer.toHexString(s3.hashCode()));                //  809eedc1
    System.out.println(Integer.toHexString(s4.hashCode()));                //  42628b2
    System.out.println(Integer.toHexString(s5.hashCode()));                //  42628b2
    System.out.println(Integer.toHexString(System.identityHashCode(s1)));  //  2038ae61
    System.out.println(Integer.toHexString(System.identityHashCode(s2)));  //  2038ae61
    System.out.println(Integer.toHexString(System.identityHashCode(s3)));  //  3c0f93f1
    System.out.println(Integer.toHexString(System.identityHashCode(s4)));  //  2038ae61
    System.out.println(Integer.toHexString(System.identityHashCode(s5)));  //  31dc339b
    System.out.println(s1 == s2);                                          //  true
    System.out.println(s1 == s3);                                          //  false
    System.out.println(s1 == s4);                                          //  true
    System.out.println(s1 == s5);                                          //  false, not same identity
    System.out.println(s1.equals(s2));                                     //  true
    System.out.println(s1.equals(s3));                                     //  false
    System.out.println(s1.equals(s4));                                     //  true
    System.out.println(s1.equals(s5));                                     //  true, contents are equal
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>An example preprint / working paper</title>
      <link>/publication/preprint/</link>
      <pubDate>Sun, 07 Apr 2019 00:00:00 +0000</pubDate>
      <guid>/publication/preprint/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Slides&lt;/em&gt; button above to demo Academic&amp;rsquo;s Markdown slides feature.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Supplementary notes can be added here, including 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;code and math&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An example journal article</title>
      <link>/publication/journal-article/</link>
      <pubDate>Tue, 01 Sep 2015 00:00:00 +0000</pubDate>
      <guid>/publication/journal-article/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to demo the feature to enable visitors to import publication metadata into their reference management software.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Slides&lt;/em&gt; button above to demo Academic&amp;rsquo;s Markdown slides feature.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Supplementary notes can be added here, including 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;code and math&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>An example conference paper</title>
      <link>/publication/conference-paper/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate>
      <guid>/publication/conference-paper/</guid>
      <description>&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Cite&lt;/em&gt; button above to demo the feature to enable visitors to import publication metadata into their reference management software.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Click the &lt;em&gt;Slides&lt;/em&gt; button above to demo Academic&amp;rsquo;s Markdown slides feature.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Supplementary notes can be added here, including 
&lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;code and math&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
