<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding | flycoolman</title>
    <link>/category/coding/</link>
      <atom:link href="/category/coding/index.xml" rel="self" type="application/rss+xml" />
    <description>Coding</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>©2020 flycoolman.com All Rights Reserved</copyright><lastBuildDate>Thu, 10 Sep 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu42a5118afc49636e6fda7ce5d4b48056_3366_512x512_fill_lanczos_center_2.png</url>
      <title>Coding</title>
      <link>/category/coding/</link>
    </image>
    
    <item>
      <title>-- Latest and Updated Posts -- </title>
      <link>/post/latest-and-updates/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/post/latest-and-updates/</guid>
      <description>&lt;h2 id=&#34;the-latest-and-updated-posts&#34;&gt;The Latest and Updated Posts&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://flycoolman.com/coding/python&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Coding-Python&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://flycoolman.com/coding/java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Coding-Java&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://flycoolman.com/coding/go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Coding-Go&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://flycoolman.com/coding/javascript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Coding-Javascript&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://flycoolman.com/linux&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linux&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://flycoolman.com/devops&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DevOps | SRE&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://flycoolman.com/networking&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Networking&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://flycoolman.com/courses&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Courses&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
</description>
    </item>
    
    <item>
      <title>Python vs. Java</title>
      <link>/coding/python/python-vs-java/</link>
      <pubDate>Tue, 31 Dec 2019 23:59:59 +0000</pubDate>
      <guid>/coding/python/python-vs-java/</guid>
      <description>&lt;h2 id=&#34;python-vs-java&#34;&gt;Python vs. Java&lt;/h2&gt;
&lt;p&gt;A VS. notes between Python and Java.&lt;/p&gt;
&lt;h3 id=&#34;type-casting&#34;&gt;Type casting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python: &lt;strong&gt;int(1.9)&lt;/strong&gt;, &lt;strong&gt;float(1)&lt;/strong&gt;, &lt;strong&gt;str(1.9)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Java:
&lt;ul&gt;
&lt;li&gt;Narrowing casting: (manually) - converting a larger type to a smaller size type
&lt;strong&gt;(int)1.9&lt;/strong&gt;, &lt;strong&gt;(float)9.78&lt;/strong&gt; &lt;br&gt;
double -&amp;gt; float -&amp;gt; long -&amp;gt; int -&amp;gt; char -&amp;gt; short -&amp;gt; byte&lt;/li&gt;
&lt;li&gt;Widening casting: automatically - converting a smaller type to a larger type size&lt;br&gt;
byte -&amp;gt; short -&amp;gt; char -&amp;gt; int -&amp;gt; long -&amp;gt; float -&amp;gt; double&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;true-or-false&#34;&gt;True or False&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python: True/False&lt;/li&gt;
&lt;li&gt;Java: true/false&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;map-sorting&#34;&gt;Map sorting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python:&lt;br&gt;
Easy to use sorted() and lambda to sort dict/map by keys or values&lt;/li&gt;
&lt;li&gt;Java:&lt;br&gt;
Use Collections.sort() and Comparator to sort map by keys or values&lt;br&gt;
Java 8 provides new ways of defining Comparators by using lambda expressions and the comparing() static factory method.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;python-max-vs-java-mathmax-vs-java-collectionsmax&#34;&gt;Python max() vs Java Math.max() vs Java Collections.max()&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Python max()&lt;br&gt;
Can campare multiple items, or iterable, even strings&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  max(n1, n2, n3, ...)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    max(iterable)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or &lt;strong&gt;Compare strings&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    max(&amp;quot;Mike&amp;quot;, &amp;quot;John&amp;quot;, &amp;quot;Vicky&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java max()&lt;br&gt;
Only compare two mathematic items, i.e. int, float, double &amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java Collections.max()&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;max(Collection&amp;lt;? extends T&amp;gt; coll)&lt;br&gt;
Returns the maximum element of the given collection, according to the natural ordering of its elements.&lt;br&gt;
static &lt;T&gt; T	max(Collection&amp;lt;? extends T&amp;gt; coll, Comparator&amp;lt;? super T&amp;gt; comp)&lt;br&gt;
Returns the maximum element of the given collection, according to the order induced by the specified comparator.&lt;br&gt;
&lt;strong&gt;Compare Integers&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Integer[] num = { 2, 4, 7, 5, 9 };
    // using Collections.min() to
    // find minimum element
    // using only 1 line.
    int min = Collections.min(Arrays.asList(num));
    // using Collections.max()
    // to find maximum element
    // using only 1 line.
    int max = Collections.max(Arrays.asList(num));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or &lt;strong&gt;Compare Strings&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    // List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;String&amp;gt;(Arrays.asList(&amp;quot;Mike Smith&amp;quot;, &amp;quot;John&amp;quot;, &amp;quot;Vicky&amp;quot;));
    List&amp;lt;String&amp;gt; list = Arrays.asList(&amp;quot;Mike&amp;quot;, &amp;quot;John&amp;quot;, &amp;quot;Vicky&amp;quot;);
    String max = Collections.max(list);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or &lt;strong&gt;Use comparator&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    List&amp;lt;String&amp;gt; list = Arrays.asList(&amp;quot;Mike Smith&amp;quot;, &amp;quot;John&amp;quot;, &amp;quot;Vicky&amp;quot;);
    String max = Collections.max(list, Comparator.comparing(s -&amp;gt; s.length()));
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Python - Java&lt;br&gt;
The aboves are same to min().
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;infinity&#34;&gt;Infinity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Python&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;math.inf
The &lt;strong&gt;math.inf&lt;/strong&gt; constant returns a floating-point positive infinity.
For negative infinity, use &lt;strong&gt;-math.inf&lt;/strong&gt;.
The inf constant is equivalent to float(&amp;lsquo;inf&amp;rsquo;).&lt;/p&gt;
&lt;p&gt;import math
print(math.inf)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sys.maxsize&lt;br&gt;
An integer giving the maximum value a variable of type Py_ssize_t can take. It’s usually 2&lt;strong&gt;31 - 1 on a 32-bit platform and 2&lt;/strong&gt;63 - 1 on a 64-bit platform.&lt;br&gt;
like sys.maxint in Python2.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Integer.MAX_VALUE, Integer.MIN_VALUE, Integer.MAX_VALUE+1, Integer.MIN_VALUE-1&lt;/li&gt;
&lt;li&gt;Long.MAX_VALUE, Long.MIN_VALUE&lt;/li&gt;
&lt;li&gt;Float.MAX_VALUE, Float.MIN_VALUE, Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY&lt;/li&gt;
&lt;li&gt;Double.MAX_VALUE, Double.MIN_VALUE, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NaN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    There is no way to represent infinity as an integer in Python. This matches the behaviour of many other languages. However, due to Python&amp;rsquo;s dynamic typing system, you can use float(&amp;lsquo;inf&amp;rsquo;) in place of an integer, and it will behave as you would expect.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    To Be Continued
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;mapdict-composite-key&#34;&gt;Map/Dict Composite key&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  map = {(1, 0) : 2, (1, 1) : 3, (2, 0) : 4, (2, 1) : 5}
  map[(1,0)]
  map.get((1,0))
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java&lt;br&gt;
Not so easy to do&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;string-equals-vs-&#34;&gt;String equals vs ==&lt;/h3&gt;
&lt;p&gt;Check if the characters in two strings are identical&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Python ==&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  s1 = &amp;quot;Hello&amp;quot;
  s2 = &amp;quot;Hello&amp;quot;
  s3 = &amp;quot;Hello3&amp;quot;
  s4 = &amp;quot;Hell&amp;quot; + &amp;quot;o&amp;quot;
  s5 = &amp;quot;Hell&amp;quot;
  s5 += &amp;quot;o&amp;quot;
  id(s1)                 #  140701928086752
  id(s2)                 #  140701928086752
  id(s3)                 #  140701928160032
  id(s4)                 #  140701928086752
  id(s5)                 #  140701884560640
  s1 == s2               #  True
  s1 == s3               #  False
  s1 == s4               #  True
  s1 == s5               #  True
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java equals() vs ==&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;==&lt;/strong&gt; to compare memory address or say identity in system
&lt;strong&gt;equals()&lt;/strong&gt; to compare the content of strings&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    String s1 = &amp;quot;Hello&amp;quot;;
    String s2 = &amp;quot;Hello&amp;quot;;
    String s3 = &amp;quot;Hello3&amp;quot;;
    String s4 = &amp;quot;Hell&amp;quot; + &amp;quot;o&amp;quot;;
    String s5 = &amp;quot;Hell&amp;quot;;
    s5 = s5 + &amp;quot;o&amp;quot;;
    System.out.println(Integer.toHexString(s1.hashCode()));                //  42628b2
    System.out.println(Integer.toHexString(s2.hashCode()));                //  42628b2
    System.out.println(Integer.toHexString(s3.hashCode()));                //  809eedc1
    System.out.println(Integer.toHexString(s4.hashCode()));                //  42628b2
    System.out.println(Integer.toHexString(s5.hashCode()));                //  42628b2
    System.out.println(Integer.toHexString(System.identityHashCode(s1)));  //  2038ae61
    System.out.println(Integer.toHexString(System.identityHashCode(s2)));  //  2038ae61
    System.out.println(Integer.toHexString(System.identityHashCode(s3)));  //  3c0f93f1
    System.out.println(Integer.toHexString(System.identityHashCode(s4)));  //  2038ae61
    System.out.println(Integer.toHexString(System.identityHashCode(s5)));  //  31dc339b
    System.out.println(s1 == s2);                                          //  true
    System.out.println(s1 == s3);                                          //  false
    System.out.println(s1 == s4);                                          //  true
    System.out.println(s1 == s5);                                          //  false, not same identity
    System.out.println(s1.equals(s2));                                     //  true
    System.out.println(s1.equals(s3));                                     //  false
    System.out.println(s1.equals(s4));                                     //  true
    System.out.println(s1.equals(s5));                                     //  true, contents are equal
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
  </channel>
</rss>
