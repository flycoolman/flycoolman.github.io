<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java | flycoolman</title>
    <link>/category/java/</link>
      <atom:link href="/category/java/index.xml" rel="self" type="application/rss+xml" />
    <description>Java</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>©2020 flycoolman.com All Rights Reserved</copyright><lastBuildDate>Sat, 31 Oct 2020 23:59:59 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu42a5118afc49636e6fda7ce5d4b48056_3366_512x512_fill_lanczos_center_2.png</url>
      <title>Java</title>
      <link>/category/java/</link>
    </image>
    
    <item>
      <title>Checked vs Unchecked Exceptions in Java</title>
      <link>/coding/java/checked-vs-unchecked-exceptions-in-java/</link>
      <pubDate>Sat, 31 Oct 2020 23:59:59 +0000</pubDate>
      <guid>/coding/java/checked-vs-unchecked-exceptions-in-java/</guid>
      <description>&lt;h2 id=&#34;checked-vs-unchecked-exceptions-in-java&#34;&gt;Checked vs Unchecked Exceptions in Java&lt;/h2&gt;
&lt;h3 id=&#34;exception-in-java&#34;&gt;Exception in Java&lt;/h3&gt;
&lt;h4 id=&#34;what-is-an-exception&#34;&gt;What is an Exception?&lt;/h4&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Definition:&lt;/strong&gt; An exception is an event, which occurs during the execution of a program, that disrupts the normal flow of the program&amp;rsquo;s instructions.&lt;br&gt;
The general meaning of an exception is the breaching of predefined assumption of the application.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;In Java, all errors and exceptions are represented with &lt;strong&gt;Throwable&lt;/strong&gt; class. When an error occurs within a method, the method creates an object (of any subtype of Throwable) and hands it off to the runtime system. The object, called an &lt;strong&gt;exception object&lt;/strong&gt;, contains information about the error, including its type and the state of the program when the error occurred. Creating an exception object and handing it to the runtime system is called &lt;strong&gt;throwing an exception&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id=&#34;call-stack&#34;&gt;Call Stack&lt;/h4&gt;
&lt;p&gt;After a method throws an exception, the runtime system attempts to find something to handle it. The set of possible &amp;ldquo;somethings&amp;rdquo; to handle the exception is the ordered list of methods that had been called to get to the method where the error occurred. The list of methods is known as the &lt;strong&gt;call stack&lt;/strong&gt; (see the next figure).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./exceptions-callstack.gif&#34; alt=&#34;exceptions-callstack&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;exception-handler&#34;&gt;Exception Handler&lt;/h4&gt;
&lt;p&gt;The runtime system searches the call stack for a method that contains a block of code that can handle the exception. This block of code is called an exception handler. The search begins with the method in which the error occurred and proceeds through the call stack in the reverse order in which the methods were called. When an appropriate handler is found, the runtime system passes the exception to the handler. An exception handler is considered appropriate if the type of the exception object thrown matches the type that can be handled by the handler.&lt;/p&gt;
&lt;p&gt;The exception handler chosen is said to catch the exception. If the runtime system exhaustively searches all the methods on the call stack without finding an appropriate exception handler, as shown in the next figure, the runtime system (and, consequently, the program) terminates.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./Searching-the-call-stack-for-the-exception-handler.gif&#34; alt=&#34;Searching-the-call-stack-for-the-exception-handler&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;exception-handling&#34;&gt;Exception Handling&lt;/h4&gt;
&lt;p&gt;When an exception object is created in application, there are two choices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Either handle it within method&lt;/li&gt;
&lt;li&gt;Or pass it to the caller method to handle.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In reality, there are 3 basic options to react when a exception occurs at runtime:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ignore the exception&lt;/strong&gt; and let it move up the call stack to another catch block for the exception.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Catch the exception and perform required action&lt;/strong&gt; for your application. If you can not recover from the exception, rethrow it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Catch the exception and wrap it with another exception&lt;/strong&gt; which is more relevant for your application. Exception wrapping is used to avoid breaking the layer abstraction caught in the exception. You can assign the original exception to the InnerException property of the Exception object you throw. This enables the original exception to be wrapped inside a new exception (which is more relevant for your application). To understand the wrapping of an exception lets consider a method that caught an exception called IOException. You can wrap the original exception (IOException) with a application level exception called LoadingException or FailtoLoadInfoException, as examples, rather than alerting the lower-level IOException to the user.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    If an exception is not handled in the application, then it will be propagated to JVM and JVM will usually terminate the program itself.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;exception-hierarchy-in-java&#34;&gt;Exception Hierarchy in Java&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./exception-hierarchy-java.png&#34; alt=&#34;exception-hierarchy-java&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The terms &amp;ldquo;exception&amp;rdquo; and &amp;ldquo;error&amp;rdquo; are not the same.&lt;br&gt;
Whether should a general error in application be handled as Error or Exception in Java, depends on &lt;strong&gt;the context&lt;/strong&gt; in the application.&lt;/p&gt;
&lt;p&gt;In Java, exceptions are broadly categorized into two sections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Checked exceptions&lt;/strong&gt;&lt;br&gt;
Checked Exceptions are subclasses of java.lang.&lt;strong&gt;Exception&lt;/strong&gt;, i.e. IOException, SQLException, ClassNotFoundException, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Unchecked exceptions&lt;/strong&gt;.&lt;br&gt;
Unchecked Exceptions are subclasses of java.lang.&lt;strong&gt;RuntimeException&lt;/strong&gt;, i.e. NullPointerException, NumberFormatException, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;Errors&lt;/strong&gt; are serious runtime environment problems that are almost certainly not recoverable, i.e. OutOfMemoryError, LinkageError, and StackOverflowError. They generally crash you program or part of program. Only a good logging practice will help you in determining the exact causes of errors.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;checked-exceptions&#34;&gt;Checked Exceptions&lt;/h3&gt;
&lt;p&gt;The exceptions that are checked at &lt;strong&gt;compile time&lt;/strong&gt; (A.K.A.compile-time exceptions). If some code within a method throws a checked exception, then the method must either handle the exception by using &lt;strong&gt;try-catch block&lt;/strong&gt; or it must specify the exception using &lt;strong&gt;throws&lt;/strong&gt; keyword.&lt;/p&gt;
&lt;p&gt;Generally, checked exceptions denote error scenarios which are outside the immediate control of the program. They occur usually interacting with outside resources/network resources e.g. database problems, network connection errors, missing files etc.&lt;/p&gt;
&lt;h3 id=&#34;unchecked-exceptions&#34;&gt;Unchecked Exceptions&lt;/h3&gt;
&lt;p&gt;The exceptions that are &lt;strong&gt;not&lt;/strong&gt; checked at &lt;strong&gt;compiled time&lt;/strong&gt;.&lt;br&gt;
These are exceptions that do not need to be declared in a throws clause. JVM simply doesn’t force you to handle them as they are mostly generated at runtime due to programmatic errors.&lt;/p&gt;
&lt;h3 id=&#34;checked-vs-unchecked-exceptions&#34;&gt;Checked vs Unchecked Exceptions&lt;/h3&gt;
&lt;h4 id=&#34;class-definition&#34;&gt;Class definition&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Checked exceptions are subclasses of Exception class. All other Exceptions and Throwable are unchecked exceptions.&lt;/li&gt;
&lt;li&gt;RuntimeException, Error, and their subclasses are unchecked Exceptions. (From 
&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/exceptions/runtime.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Unchecked Exceptions — The Controversy&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;As the javadoc for Throwable says: &amp;ldquo;Throwable and any subclass of Throwable that is not also a subclass of either RuntimeException or Error are regarded as checked exceptions&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;compiler-check&#34;&gt;Compiler check&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Checked exceptions are forced by compiler and used to indicate exceptional conditions that are out of the control of the program (for example, I/O errors).&lt;/li&gt;
&lt;li&gt;Unchecked exceptions are occurred during runtime and used to indicate programming errors (for example, a null pointer).&lt;/li&gt;
&lt;li&gt;Compiler checks each method call and deceleration to determine whether the method throws checked exception.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;contract&#34;&gt;Contract&lt;/h4&gt;
&lt;p&gt;There&amp;rsquo;s also an important bit of information in the Java Language Specification:&lt;br&gt;
The checked exception classes named in the throws clause are part of the contract between the implementor and user of the method or constructor.&lt;/p&gt;
&lt;h4 id=&#34;experience-when-and-how&#34;&gt;Experience: When and How&lt;/h4&gt;
&lt;p&gt;The below statements are some experiences of developers. These can provide a feel on the use of checked and unchecked exceptions, though they are not so accurate or absolutely correct. In reality, this all depends on the app and specific context. Just feel it&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Checked exceptions ideally should never be used for programming errors, but absolutely should be used for resource errors and for flow control in such cases.
Throw only those exceptions which a method can not handle by any mean. Method should first try to handle it as soon as it encounters. Throw the exception only if it is not possible to handle inside method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Checked exceptions can be used when a method cannot do what its name says it does. e.g. A method named prepareSystem() which pre-populate configuration files and do some configuration using them, can declare throwing FileNotFoundException which implies that method uses configuration files from file system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rule is if a client can reasonably be expected to recover from an exception, make it a checked exception. If a client cannot do anything to recover from the exception, make it an unchecked exception.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The only time it is normally legal to shut down an application is during startup. For example, if a configuration file is missing and the application cannot do anything sensible without it, then it is legal to shut down the application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Myself, I prefer using checked exceptions as I can.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you are an API Developer (back-end developer), use checked exceptions, otherwise, use Runtime exceptions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;My rules are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if statements for business logic errors (like your code)&lt;/li&gt;
&lt;li&gt;cheched exceptions for environment errors where the application can recover&lt;/li&gt;
&lt;li&gt;uncheched exception for environment errors where there is no recovery&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Line is not always clear, but for me usually RuntimeException = programming errors, checked exceptions = external errors. This is very rough categorization though. Like others say, checked exceptions force you to handle, or at least think for a very tiny fraction of time, about it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In general I use the following rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In my components &amp;amp; libraries I only catch an exception if I intend to handle it or do something based on it. Or if I want to provide additional contextual information in an exception.&lt;/li&gt;
&lt;li&gt;I use a general try catch at the application entry point, or the highest level possible. If an exception gets here I just log it and let it fail. Ideally exceptions should never get here.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;In Effective Java by Joshua Bloch:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use checked expections for recoverable conditions and runtime exceptions for programming errors (Item 58 in 2nd edition).&lt;/li&gt;
&lt;li&gt;Avoid unnecessary use of checked exceptions (Item 59)&lt;/li&gt;
&lt;li&gt;Use exceptions only for exceptional conditions (Item 57). As others have pointed out, this case may not warrant an exception at all. Consider returning false (or perhaps a status object with details about what happened) if there is not enough credit.&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;the-controversy&#34;&gt;The Controversy&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;Checked exceptions are a controversial issue in general, and in Java in particular.&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Some say checked exceptions should be eliminated completely, given the verbosity, tediousness and error-proneness they introduce.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some believe the decision to have these two types of exceptions has its plus(es). It forces the developer to think that an exception is likely to happen in this situation, so he must take measures. The API declares that it will throw exceptions and the developer sees this compile-time. It enforces compile-time safety. You should not wait until the code goes to production to discover that something might fail. Javadoc? Well, a good option to say that, but I bet no one will read the javadoc until the exception actually happens.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fundamentally the only difference between checked exceptions and unchecked exceptions is that the compiler forces you to document checked exceptions. You should be documenting any exceptions your code can throw anyway; I can&amp;rsquo;t see why anyone would be against this being statically checkable to prevent it from being stale or from any exceptions being missed out. Exceptions are part of your API whether checked or not; checked just ensures you declare your API accurately.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Like every other trade, there is a trade-off. The advantage of having the compiler do the checks means that there is no way to accidentally leak exceptions (and humans do make mistakes). If the calling code does not handle the exception, it has to leak it explicitly. This is exactly the same trade-off we get from loosely-typed vs strongly-typed languages.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;
&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/exceptions/runtime.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Unchecked Exceptions — The Controversy&lt;/a&gt;&lt;br&gt;
Because the Java programming language does not require methods to catch or to specify unchecked exceptions (RuntimeException, Error, and their subclasses), programmers may be tempted to write code that throws only unchecked exceptions or to make all their exception subclasses inherit from RuntimeException. Both of these shortcuts allow programmers to write code without bothering with compiler errors and without bothering to specify or to catch any exceptions. Although this may seem convenient to the programmer, it sidesteps the intent of the catch or specify requirement and can cause problems for others using your classes.&lt;/p&gt;
&lt;p&gt;Why did the designers decide to force a method to specify all uncaught checked exceptions that can be thrown within its scope? Any Exception that can be thrown by a method is part of the method&amp;rsquo;s public programming interface. Those who call a method must know about the exceptions that a method can throw so that they can decide what to do about them. These exceptions are as much a part of that method&amp;rsquo;s programming interface as its parameters and return value.&lt;/p&gt;
&lt;p&gt;The next question might be: &amp;ldquo;If it&amp;rsquo;s so good to document a method&amp;rsquo;s API, including the exceptions it can throw, why not specify runtime exceptions too?&amp;rdquo; Runtime exceptions represent problems that are the result of a programming problem, and as such, the API client code cannot reasonably be expected to recover from them or to handle them in any way. Such problems include arithmetic exceptions, such as dividing by zero; pointer exceptions, such as trying to access an object through a null reference; and indexing exceptions, such as attempting to access an array element through an index that is too large or too small.&lt;/p&gt;
&lt;p&gt;Runtime exceptions can occur anywhere in a program, and in a typical one they can be very numerous. Having to add runtime exceptions in every method declaration would reduce a program&amp;rsquo;s clarity. Thus, the compiler does not require that you catch or specify runtime exceptions (although you can).&lt;/p&gt;
&lt;p&gt;One case where it is common practice to throw a RuntimeException is when the user calls a method incorrectly. For example, a method can check if one of its arguments is incorrectly null. If an argument is null, the method might throw a NullPointerException, which is an unchecked exception.&lt;/p&gt;
&lt;p&gt;Generally speaking, do not throw a RuntimeException or create a subclass of RuntimeException simply because you don&amp;rsquo;t want to be bothered with specifying the exceptions your methods can throw.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the bottom line guideline: If a client can reasonably be expected to recover from an exception, make it a checked exception. If a client cannot do anything to recover from the exception, make it an unchecked exception.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;best-practices&#34;&gt;Best Practices&lt;/h3&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;If a client can reasonably be expected to recover from an exception, make it a checked exception.&lt;/li&gt;
&lt;li&gt;If a client cannot do anything to recover from the exception, make it an unchecked exception.&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;Never swallow the exception in catch block&lt;/li&gt;
&lt;li&gt;Declare the specific checked exceptions that your method can throw&lt;/li&gt;
&lt;li&gt;Do not catch the Exception class, always catch a specific exception class&lt;/li&gt;
&lt;li&gt;Never catch Throwable class&lt;/li&gt;
&lt;li&gt;Never (ever) catch Errors&lt;br&gt;
Errors are problems you will most likely never be able to handle (e.g. OutOfMemory, or other JVM issues)&lt;/li&gt;
&lt;li&gt;Always correctly wrap the exceptions in custom exceptions so that stack trace is not lost&lt;/li&gt;
&lt;li&gt;Either log the exception or throw it but never do the both&lt;/li&gt;
&lt;li&gt;Never throw any exception from finally block&lt;/li&gt;
&lt;li&gt;Always catch only those exceptions that you can actually handle&lt;/li&gt;
&lt;li&gt;Catch exceptions and handle them, don&amp;rsquo;t just throw them up the stack&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t use printStackTrace() statement or similar&lt;br&gt;
Chances are one of your users will get one of those stack traces eventually, and have exactly zero knowledge as to what to do with it.&lt;/li&gt;
&lt;li&gt;Pass all relevant information to exceptions to make them informative as much as possible&lt;br&gt;
At least rethrow an exception that explains what was happening at the time and has the caught exception inside of it.&lt;/li&gt;
&lt;li&gt;Always log exceptions for the sake of maintainability&lt;br&gt;
When starting seeing bugs, the log will assist in pointing you to the place your bug has likely started.&lt;/li&gt;
&lt;li&gt;Always include all information about an exception in single log message&lt;/li&gt;
&lt;li&gt;Use finally blocks instead of catch blocks if you are not going to handle exception&lt;/li&gt;
&lt;li&gt;Remember &amp;ldquo;Throw early catch late&amp;rdquo; principle&lt;/li&gt;
&lt;li&gt;Always clean up after handling the exception&lt;/li&gt;
&lt;li&gt;Throw only relevant exception from a method&lt;/li&gt;
&lt;li&gt;Never use exceptions for flow control in your program&lt;/li&gt;
&lt;li&gt;Validate user input to catch adverse conditions very early in request processing&lt;/li&gt;
&lt;li&gt;Always terminate the thread which it is interrupted&lt;/li&gt;
&lt;li&gt;Use template methods for repeated try-catch&lt;/li&gt;
&lt;li&gt;Document all exceptions in your application in javadoc&lt;/li&gt;
&lt;li&gt;Do something useful with the errors (logs, restarts, recoveries, etc)&lt;/li&gt;
&lt;li&gt;Use one big handler at the higher-level to manage any or all of the weird conditions arising in the code that aren&amp;rsquo;t caught at a low-level&lt;/li&gt;
&lt;li&gt;Think about validation check vs exception&lt;br&gt;
Throwing an exception is a expensive process.
&lt;ul&gt;
&lt;li&gt;NullPointerException&lt;br&gt;
Catching a NullPointerException should replaced with a graceful null-check.&lt;/li&gt;
&lt;li&gt;NumberFormatException&lt;br&gt;
Catching a NumberFormatException explicitly to avoid possible introduction of error prone code to handle different number formats.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Avoid exception handling inside loops&lt;br&gt;
If it is truly necessary implement a try/catch block arround the entire loop.&lt;/li&gt;
&lt;li&gt;Adopt a standard way of handling exceptions through try/catch/finally blocks&lt;br&gt;
This is the recommended approach to handle exceptions in managed code. Finally blocks ensure that resources are closed in the event of an exception.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Be respectful of the language and how it traditionally manages such issues. For example, don&amp;rsquo;t bring a C mindset into a Java world.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;faq&#34;&gt;FAQ&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Is RuntimeException an unchecked exception?&lt;/strong&gt;&lt;br&gt;
Yes, exactly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Why do people add class Exception in the throws clause?&lt;/strong&gt;&lt;br&gt;
Most often because people are lazy to consider what to catch and what to rethrow. Throwing Exception is a &lt;strong&gt;bad practice&lt;/strong&gt; and should be avoided.&lt;br&gt;
But it&amp;rsquo;s common when implementing frameworks, let users of the framework be able to throw any exception, e.g. the signature of the Callable interface in JSE.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Should I bubble up the exact exception or mask it using Exception?&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Yes&lt;/strong&gt; and &lt;strong&gt;No&lt;/strong&gt;.&lt;br&gt;
&lt;strong&gt;Yes&lt;/strong&gt; for bubble up the exact exception and always declare the most precise exception possible, or a list of such.&lt;br&gt;
&lt;strong&gt;No&lt;/strong&gt; for mask any exception.&lt;br&gt;
The exceptions you declare your method as capable of throwing are a part of the contract between your method and the caller. Throwing &amp;ldquo;FileNotFoundException&amp;rdquo; means that something wrong with the file, either the file name isn&amp;rsquo;t valid or the file is not there. Throwing Exception causes very difficult to find the root cuase.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Why bubble up?&lt;/strong&gt;&lt;br&gt;
Should the error be handled sooner better?&lt;br&gt;
What it means is to bubble it up to the top most responsible layer that controls the logic flow and oversees the business logic for the application. It would be impossible, for example, for the database layer to communicate to the client that something critical is missing or unresponsive. When it bubbles up to the top most server layer then it is straight forward to refresh the client&amp;rsquo;s view with a critical error message.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;How to handle exception?&lt;/strong&gt;&lt;br&gt;
Basically it depends on context of the application, such as where this code is and what you want to happen. Here are some examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If it is in the UI layer - catch it and show a warning.&lt;/li&gt;
&lt;li&gt;If it&amp;rsquo;s in the service layer - don&amp;rsquo;t catch it at all - let it bubble. Just don&amp;rsquo;t swallow the exception.&lt;/li&gt;
&lt;li&gt;If an exception occurs in most of the cases you should choose one of these:
&lt;ul&gt;
&lt;li&gt;log it and return&lt;/li&gt;
&lt;li&gt;rethrow it (declare it to be thrown by the method)&lt;/li&gt;
&lt;li&gt;construct a new exception by passing the current one in constructor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Why did the designers decide to force a method to specify all uncaught checked exceptions that can be thrown within its scope?&lt;/strong&gt;&lt;br&gt;
Any Exception that can be thrown by a method is part of the method&amp;rsquo;s public programming interface. Those who call a method must know about the exceptions that a method can throw so that they can decide what to do about them. These exceptions are as much a part of that method&amp;rsquo;s programming interface as its parameters and return value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;If it&amp;rsquo;s so good to document a method&amp;rsquo;s API, including the exceptions it can throw, why not specify runtime exceptions too?&lt;/strong&gt;&lt;br&gt;
Runtime exceptions represent problems that are the result of a programming problem, and as such, the API client code cannot reasonably be expected to recover from them or to handle them in any way. Such problems include arithmetic exceptions, such as dividing by zero; pointer exceptions, such as trying to access an object through a null reference; and indexing exceptions, such as attempting to access an array element through an index that is too large or too small.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;wrapping-exceptions&#34;&gt;Wrapping Exceptions&lt;/h3&gt;
&lt;p&gt;wrapping exceptions (checked or otherwise) has several benefits that are worth the cost:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It encourages you to think about the failure modes for the code you write.&lt;/strong&gt; Basically, you have to consider the exceptions that the code you call may throw, and in turn you&amp;rsquo;ll consider the exceptions you&amp;rsquo;ll throw for the code that calls yours.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It gives you the opportunity to add additional debugging information into the exception chain.&lt;/strong&gt; For instance, if you have a method that throws an exception on a duplicate username, you might wrap that exception with one that includes additional information about the circumstances of the failure (for example, the IP of the request that provided the dupe username) that wasn&amp;rsquo;t available to the lower-level code. The cookie trail of exceptions may help you debug a complex problem (it certainly has for me).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It lets you become implementation-independent from the lower level code.&lt;/strong&gt; If you&amp;rsquo;re wrapping exceptions and need to swap out Hibernate for some other ORM, you only have to change your Hibernate-handling code. All the other layers of code will still be successfully using the wrapped exceptions and will interpret them in the same way, even though the underlying circumstances have changed. Note that this applies even if Hibernate changes in some way (ex: they switch exceptions in a new version); it&amp;rsquo;s not just for wholesale technology replacement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It encourages you use different classes of exceptions to represent different situations.&lt;/strong&gt; For example, you may have a DuplicateUsernameException when the user tries to reuse a username, and a DatabaseFailureException when you can&amp;rsquo;t check for dupe usernames due to a broken DB connection. This, in turn, lets you answer your question (&amp;ldquo;how do I recover?&amp;quot;) in flexible and powerful ways. If you get a DuplicateUsernameException, you may decide to suggest a different username to the user. If you get a DatabaseFailureException, you may let it bubble up to the point where it displays a &amp;ldquo;down for maintenance&amp;rdquo; page to the user and send off a notification email to you. Once you have custom exceptions, you have customizeable responses &amp;ndash; and that&amp;rsquo;s a good thing.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;exception-management-architecture&#34;&gt;Exception Management Architecture&lt;/h3&gt;
&lt;p&gt;The exception management architecture of an application should be capable of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Detecting exceptions&lt;/li&gt;
&lt;li&gt;Performing code clean up&lt;/li&gt;
&lt;li&gt;Wrapping one exception inside another&lt;/li&gt;
&lt;li&gt;Replacing one exception with another&lt;/li&gt;
&lt;li&gt;Logging and reporting error information&lt;/li&gt;
&lt;li&gt;Generating events that can be monitored externally to assist system operation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At the beginning of the design you must plan for a consist and robust exception management architecture. It should be well encapsulated and abstract the details of logging and reporting throughout all of your application.&lt;/p&gt;
&lt;p&gt;Once you embrace exceptions, you should find that it makes your code simpler and clearer, by moving your error handling code away from your core logic. Aim to have lots of statements in a single try block.&lt;/p&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/6115896/understanding-checked-vs-unchecked-exceptions-in-java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Understanding checked vs unchecked exceptions in Java&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://techblog.bozho.net/checked-and-unchecked-exceptions-in-java/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CHECKED AND UNCHECKED EXCEPTIONS IN JAVA&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/409563/best-practices-for-exception-management-in-java-or-c-sharp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Best practices for exception management in Java or C#&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://web.archive.org/web/20081207002838/http://www.dotnetjunkies.ddj.com/Article/197E493F-BA73-45A2-B39A-4EA282A2E562.dcik&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Best Practices: Exception Management&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/exceptions/runtime.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Unchecked Exceptions — The Controversy&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/exceptions/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lesson: Exceptions&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://howtodoinjava.com/java/exception-handling/checked-vs-unchecked-exceptions-in-java/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Checked vs Unchecked Exceptions&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.artima.com/intv/solid.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Failure and Exceptions&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://howtodoinjava.com/best-practices/java-exception-handling-best-practices/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Top 20 Java Exception Handling Best Practices&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/33497/how-do-i-recover-from-an-unchecked-exception#33564&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How do I recover from an unchecked exception?&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/27578/when-to-choose-checked-and-unchecked-exceptions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;When to choose checked and unchecked exceptions&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Java Collections</title>
      <link>/coding/java/java-collection/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/coding/java/java-collection/</guid>
      <description>&lt;h1 id=&#34;java-collections&#34;&gt;Java Collections&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Any group of individual objects which are represented as a single unit is known as the collection of the objects.&lt;/li&gt;
&lt;li&gt;The **Collection in Java is a framework that provides an architecture to store and manipulate the group of objects.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Collection&lt;/strong&gt; interface (&lt;strong&gt;java.util.Collection&lt;/strong&gt;) and Map interface (&lt;strong&gt;java.util.Map&lt;/strong&gt;) are the two main “root” interfaces of Java collection classes.&lt;/li&gt;
&lt;li&gt;Java Collections can achieve all the operations that you perform on a data such as &lt;strong&gt;searching&lt;/strong&gt;, &lt;strong&gt;sorting&lt;/strong&gt;, &lt;strong&gt;insertion&lt;/strong&gt;, &lt;strong&gt;manipulation&lt;/strong&gt;, and &lt;strong&gt;deletion&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;java-collection-hierarchy&#34;&gt;Java Collection Hierarchy&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;./java-collection-hierarchy.png&#34; alt=&#34;java-collection-hierarchy&#34;&gt;&lt;br&gt;
&lt;img src=&#34;./java-collections-hierarchy-1.png&#34; alt=&#34;java-collections-hierarchy-1&#34;&gt;&lt;br&gt;
&lt;img src=&#34;./java-collections-hierarchy-2.jpg&#34; alt=&#34;java-collections-hierarchy-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;The utility package, (java.util) contains all the classes and interfaces that are required by the collection framework. The collection framework contains an interface named as an iterable interface which provides the iterator to iterate through all the collections. This interface is extended by the main collection interface which acts as a root for the collection framework. All the collections extend this collection interface thereby extending the properties of the iterator and the methods of this interface.&lt;/p&gt;
&lt;h3 id=&#34;iterable-interface&#34;&gt;Iterable Interface&lt;/h3&gt;
&lt;p&gt;This is the root interface for the entire collection framework. The collection interface extends the iterable interface. Therefore, inherently, all the interfaces and classes implement this interface. The main functionality of this interface is to provide an iterator for the collections. Therefore, this interface contains only one abstract method which is the iterator. It returns the&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Iterator iterator();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;list-interface&#34;&gt;List Interface&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This interface is dedicated to the data of the list type in which we can store all the ordered collection of the objects.&lt;/li&gt;
&lt;li&gt;This also allows duplicate data to be present in it.&lt;/li&gt;
&lt;li&gt;It is implemented by various classes like &lt;strong&gt;ArrayList&lt;/strong&gt;, &lt;strong&gt;Vector&lt;/strong&gt;, &lt;strong&gt;Stack&lt;/strong&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;arraylist&#34;&gt;ArrayList&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;ArrayList provides us with &lt;strong&gt;dynamic arrays&lt;/strong&gt; in Java. Though, it may be slower than standard arrays but can be helpful in programs where lots of manipulation in the array is needed. The size of an ArrayList is increased automatically if the collection grows or shrinks if the objects are removed from the collection.&lt;/li&gt;
&lt;li&gt;It is like an array, but there is no size limit.&lt;/li&gt;
&lt;li&gt;Java ArrayList allows us to randomly access the list. ArrayList can not be used for primitive types, like int, char, etc. We will need a wrapper class for such cases.&lt;/li&gt;
&lt;li&gt;The ArrayList class maintains the insertion order and is non-synchronized.&lt;/li&gt;
&lt;li&gt;The elements stored in the ArrayList class can be randomly accessed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;linkedlist&#34;&gt;LinkedList&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;LinkedList is a linear data structure where the elements are not stored in contiguous locations and every element is a separate object with a data part and address part.&lt;/li&gt;
&lt;li&gt;The elements are linked using pointers and addresses. Each element is known as a node.&lt;/li&gt;
&lt;li&gt;It uses a doubly linked list internally to store the elements.&lt;/li&gt;
&lt;li&gt;It can store the duplicate elements.&lt;/li&gt;
&lt;li&gt;It maintains the insertion order and is not synchronized.&lt;/li&gt;
&lt;li&gt;In LinkedList, the manipulation is fast because no shifting is required.&lt;/li&gt;
&lt;li&gt;It can be used as a list, stack or queue.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;vector&#34;&gt;Vector&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Vector uses a dynamic array to store the data elements.&lt;/li&gt;
&lt;li&gt;It may be slower than standard arrays but can be helpful in programs where lots of manipulation in the array is needed.&lt;/li&gt;
&lt;li&gt;The primary difference between a vector and an ArrayList is that a Vector is synchronized and an ArrayList is non-synchronized.&lt;/li&gt;
&lt;li&gt;It is synchronized and contains many methods that are not the part of Collection framework.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;stack&#34;&gt;Stack&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;It implements the last-in-first-out data structure.&lt;/li&gt;
&lt;li&gt;The stack is the subclass of Vector. The stack contains all of the methods of Vector class and also provides its methods like boolean push(), boolean peek(), boolean push(object o), which defines its properties.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Stack is a subclass of Vector and a legacy class. It is thread safe which might be an overhead in an environment where thread safety is not needed.&lt;br&gt;
An alternate to Stack is to use ArrayDequeue which is not thread safe and faster array implementation.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;queue-interface&#34;&gt;Queue Interface&lt;/h3&gt;
&lt;p&gt;A queue interface maintains the FIFO(First In First Out) order similar to a real-world queue line. This interface is dedicated to storing all the elements where the order of the elements matter. There are various classes like &lt;strong&gt;PriorityQueue&lt;/strong&gt;, &lt;strong&gt;Deque&lt;/strong&gt;, &lt;strong&gt;ArrayDeque&lt;/strong&gt;, etc.&lt;/p&gt;
&lt;h4 id=&#34;priority-queue&#34;&gt;Priority Queue&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;A PriorityQueue is used when the objects are supposed to be processed based on the priority.&lt;/li&gt;
&lt;li&gt;It is known that a queue follows the First-In-First-Out algorithm, but sometimes the elements of the queue are needed to be processed according to the priority and this class is used in these cases.&lt;/li&gt;
&lt;li&gt;The PriorityQueue is based on the priority heap.&lt;/li&gt;
&lt;li&gt;The elements of the priority queue are ordered according to the natural ordering, or by a Comparator provided at queue construction time, depending on which constructor is used.&lt;/li&gt;
&lt;li&gt;PriorityQueue doesn&amp;rsquo;t allow null values to be stored in the queue.&lt;/li&gt;
&lt;li&gt;The elements in PriorityQueue must be of Comparable type. String and Wrapper classes are Comparable by default.&lt;/li&gt;
&lt;li&gt;To add user-defined objects in PriorityQueue, you need to implement Comparable interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;deque-interface&#34;&gt;Deque Interface&lt;/h3&gt;
&lt;p&gt;Deque, also known as a double-ended queue, is a data structure where we can add and remove the elements from both the ends of the queue.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This interface extends the queue interface.&lt;/li&gt;
&lt;li&gt;The class which implements this interface is &lt;strong&gt;ArrayDeque&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;arraydeque&#34;&gt;ArrayDeque&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The ArrayDeque class provides the facility of using deque and resizable-array. This is a special kind of array that grows and allows users to add or remove an element from both sides of the queue.&lt;/li&gt;
&lt;li&gt;Array deques have no capacity restrictions and they grow as necessary to support usage.&lt;/li&gt;
&lt;li&gt;ArrayDeque is faster than ArrayList and Stack.&lt;/li&gt;
&lt;li&gt;Unlike Queue, we can add or remove elements from both sides.&lt;/li&gt;
&lt;li&gt;Null elements are not allowed in the ArrayDeque.&lt;/li&gt;
&lt;li&gt;ArrayDeque is not thread safe, in the absence of external synchronization.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;set-interface&#34;&gt;Set Interface&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A set is an unordered collection of objects in which duplicate values cannot be stored.&lt;/li&gt;
&lt;li&gt;This collection is used when we wish to avoid the duplication of the objects and wish to store only the unique objects.&lt;/li&gt;
&lt;li&gt;This set interface is implemented by various classes like &lt;strong&gt;HashSet&lt;/strong&gt;, &lt;strong&gt;TreeSet&lt;/strong&gt;, &lt;strong&gt;LinkedHashSet&lt;/strong&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hashset&#34;&gt;HashSet&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The HashSet class is an inherent implementation of the hash table data structure.&lt;/li&gt;
&lt;li&gt;HashSet stores the elements by using a mechanism called hashing.&lt;/li&gt;
&lt;li&gt;HashSet contains unique elements only.&lt;/li&gt;
&lt;li&gt;HashSet allows null value.&lt;/li&gt;
&lt;li&gt;HashSet class is non synchronized.&lt;/li&gt;
&lt;li&gt;HashSet doesn&amp;rsquo;t maintain the insertion order. Here, elements are inserted on the basis of their hashcode.&lt;/li&gt;
&lt;li&gt;HashSet is the best approach for search operations.&lt;/li&gt;
&lt;li&gt;The initial default capacity of HashSet is 16, and the load factor is 0.75.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./hashset.png&#34; alt=&#34;hashset&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;linkedhashset&#34;&gt;LinkedHashSet&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;LinkedHashSet uses a doubly linked list to store the data and retains the ordering of the elements.&lt;/li&gt;
&lt;li&gt;Like HashSet, It also contains unique elements only.&lt;/li&gt;
&lt;li&gt;It maintains the insertion order.&lt;/li&gt;
&lt;li&gt;It permits null elements.&lt;/li&gt;
&lt;li&gt;LinkedHashSet class is non synchronized.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./linkedhashset.png&#34; alt=&#34;linkedhashset&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;sortedset-interface&#34;&gt;SortedSet Interface&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This interface is very similar to the set interface. The only difference is that this interface has extra methods that maintain the ordering of the elements.&lt;/li&gt;
&lt;li&gt;The sorted set interface extends the set interface and is used to handle the data which needs to be sorted.&lt;/li&gt;
&lt;li&gt;The class which implements this interface is &lt;strong&gt;TreeSet&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;treeset&#34;&gt;TreeSet&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;TreeSet class contains unique elements only like HashSet.&lt;/li&gt;
&lt;li&gt;TreeSet class &lt;strong&gt;doesn&amp;rsquo;t&lt;/strong&gt; allow null element.&lt;/li&gt;
&lt;li&gt;The TreeSet class uses a Tree for storage.&lt;/li&gt;
&lt;li&gt;The ordering of the elements is maintained by a set using their natural ordering whether or not an explicit comparator is provided.&lt;/li&gt;
&lt;li&gt;It can also be ordered by a Comparator provided at set creation time, depending on which constructor is used.&lt;/li&gt;
&lt;li&gt;the access and retrieval time of TreeSet is quite fast.&lt;/li&gt;
&lt;li&gt;The elements in TreeSet stored in ascending order.&lt;/li&gt;
&lt;li&gt;TreeSet class is non synchronized.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./treeset.png&#34; alt=&#34;treeset&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;map-interface&#34;&gt;Map Interface&lt;/h3&gt;
&lt;p&gt;A map is a data structure which supports the key-value pair mapping for the data. This interface doesn’t support duplicate keys because the same key cannot have multiple mappings. A map is useful if there is a data and we wish to perform operations on the basis of the key. This map interface is implemented by various classes like &lt;strong&gt;HashMap&lt;/strong&gt;, &lt;strong&gt;TreeMap&lt;/strong&gt;, etc.&lt;br&gt;
There are two interfaces for implementing Map in java: &lt;strong&gt;Map&lt;/strong&gt; and &lt;strong&gt;SortedMap&lt;/strong&gt;, and three classes: &lt;strong&gt;HashMap&lt;/strong&gt;, &lt;strong&gt;LinkedHashMap&lt;/strong&gt;, and &lt;strong&gt;TreeMap&lt;/strong&gt;. The hierarchy of Java Map is given below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./java-map-hierarchy.png&#34; alt=&#34;java-map-hierarchy&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;hashmap&#34;&gt;HashMap&lt;/h4&gt;
&lt;p&gt;HashMap provides the basic implementation of the Map interface of Java. It stores the data in (Key, Value) pairs. To access a value in a HashMap, we must know its key. HashMap uses a technique called Hashing. Hashing is a technique of converting a large String to small String that represents the same String so that the indexing and search operations are faster. HashSet also uses HashMap internally.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java HashMap contains values based on the key.&lt;/li&gt;
&lt;li&gt;Java HashMap contains only unique keys.&lt;/li&gt;
&lt;li&gt;Java HashMap may have one null key and multiple null values.&lt;/li&gt;
&lt;li&gt;Java HashMap is non synchronized.&lt;/li&gt;
&lt;li&gt;Java HashMap maintains no order.&lt;/li&gt;
&lt;li&gt;The initial default capacity of Java HashMap class is 16 with a load factor of 0.75.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;HashMap implementation&lt;/strong&gt;&lt;br&gt;

&lt;a href=&#34;https://www.javatpoint.com/working-of-hashmap-in-java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Working of HashMap in Java&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It stores the data in the pair of Key and Value.&lt;/li&gt;
&lt;li&gt;HashMap contains an array of the nodes, and the node is represented as a class.&lt;/li&gt;
&lt;li&gt;It uses an array and LinkedList data structure internally for storing Key and Value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;linkedhashmap&#34;&gt;LinkedHashMap&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;LinkedHashMap contains values based on the key.&lt;/li&gt;
&lt;li&gt;LinkedHashMap contains unique elements.&lt;/li&gt;
&lt;li&gt;LinkedHashMap may have one null key and multiple null values.&lt;/li&gt;
&lt;li&gt;LinkedHashMap is non synchronized.&lt;/li&gt;
&lt;li&gt;LinkedHashMap maintains insertion order.&lt;/li&gt;
&lt;li&gt;The initial default capacity of Java HashMap class is 16 with a load factor of 0.75.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;treemap&#34;&gt;TreeMap&lt;/h4&gt;
&lt;p&gt;Java TreeMap class is a &lt;strong&gt;red-black tree&lt;/strong&gt; based implementation. It provides an efficient means of storing key-value pairs in sorted order.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TreeMap contains values based on the key.&lt;/li&gt;
&lt;li&gt;It implements the NavigableMap interface and extends AbstractMap class.&lt;/li&gt;
&lt;li&gt;TreeMap contains only unique elements.&lt;/li&gt;
&lt;li&gt;TreeMap cannot have a null key but can have multiple null values.&lt;/li&gt;
&lt;li&gt;TreeMap is non synchronized.&lt;/li&gt;
&lt;li&gt;TreeMap maintains ascending order.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;hashtable&#34;&gt;HashTable&lt;/h3&gt;
&lt;p&gt;Java Hashtable class inherits Dictionary class and implements the Map interface.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Hashtable is an array of a list. Each list is known as a bucket. The position of the bucket is identified by calling the hashcode() method. A Hashtable contains values based on the key.&lt;/li&gt;
&lt;li&gt;Hashtable class contains unique elements.&lt;/li&gt;
&lt;li&gt;Hashtable class doesn&amp;rsquo;t allow null key or value.&lt;/li&gt;
&lt;li&gt;Hashtable class is synchronized.&lt;/li&gt;
&lt;li&gt;The initial default capacity of Hashtable class is 11 whereas loadFactor is 0.75.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;enumset&#34;&gt;EnumSet&lt;/h3&gt;
&lt;p&gt;EnumSet class is the specialized Set implementation for use with enum types. It inherits AbstractSet class and implements the Set interface.&lt;/p&gt;
&lt;h3 id=&#34;enummap&#34;&gt;EnumMap&lt;/h3&gt;
&lt;p&gt;EnumMap class is the specialized Map implementation for enum keys. It inherits Enum and AbstractMap classes.&lt;/p&gt;
&lt;h3 id=&#34;a-little-deep-in-queues&#34;&gt;A Little Deep In Queues&lt;/h3&gt;
&lt;h4 id=&#34;the-queue-a-fifo-list&#34;&gt;The queue (a FIFO list)&lt;/h4&gt;
&lt;p&gt;Implementation of a queue&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A queue (of bounded size) can be efficiently implemented in an array.&lt;/li&gt;
&lt;li&gt;A queue can be efficiently implemented using any linked list that supports deletion in the front and insertion at the end in constant time. The first (last) element of the queue is at the front (end) of the linked list.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-stack-a-lifo-list&#34;&gt;The stack (a LIFO list)&lt;/h4&gt;
&lt;p&gt;Implementation of a stack&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A stack (of bounded size) can be efficiently implemented using an array b and an int variable n: The n elements of the stack are in b[0..n-1], with b[0] being the bottom element and b[n-1] being the top element.&lt;/li&gt;
&lt;li&gt;A stack can be efficiently implemented using a linked list. The first element is the top of the stack and the last element is the bottom. It’s easy to push (prepend) an element and pop (remove) the first element in constant time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-deque&#34;&gt;The deque&lt;/h4&gt;
&lt;p&gt;The word deque, usually pronounced deck, is short for double-ended queue. A deque is a list that supports insertion and removal at both ends. Thus, a deque can be used as a queue or as a stack.&lt;/p&gt;
&lt;h4 id=&#34;stacks-queues-and-deques-in-the-java-collection-framework&#34;&gt;Stacks, queues, and deques in the Java Collection framework&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java has interface Deque&lt;E&gt;. It is implemented by classes ArrayDeque&lt;E&gt; (which implements a list in an expandable array) and LinkedList&lt;E&gt;, so these two classes can be used for a queue and for a stack.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both ArrayDeque and LinkedList also implement interface Queue&lt;E&gt;, so you can use this interface to restrict operations to queue operations. For example, create a LinkedList and assign it to a Queue variable.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Queue&amp;lt;E&amp;gt; q= new LinkedList&amp;lt;&amp;gt;();  
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thereafter, use only q for the LinkedList and operations are restricted to queue operations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java also has a class Stack&lt;E&gt;, which implements a stack in an expandable array. However, the Java API would rather you use an ArrayDeque. The problem is that there is no suitable way to restrict the operations of an Array-Deque to stack operations, so we prefer to use class Stack&lt;E&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;some-implementations&#34;&gt;Some Implementations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;LinkedList:&lt;/strong&gt; Although mainly known to be a List implementation, this class also implements the Queue interface. This implementation works by linking its elements together and going through that chain when iterating or searching for elements.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ArrayDeque:&lt;/strong&gt; An implementation of both Queue and Deque. Its backed up by an array, which can be increased when the number of elements increase over its current capacity.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DelayQueue:&lt;/strong&gt; Can only contain elements which implement the Delayed interface - elements that become active after a certain time. The DelayQueue will only deliver elements whose delays have expired.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PriorityQueue:&lt;/strong&gt; Orders its elements according to their natural order or a Comparator (if provided). This means it doesn&amp;rsquo;t work using the FIFO principle, but rather returns the element with the highest priority (defined by how they compare to each other).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;non-generic-vs-generic&#34;&gt;Non-generic vs Generic&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java collection framework was non-generic before JDK 1.5. Since 1.5, it is generic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java new generic collection allows you to have only one type of object in a collection. Now it is type safe so typecasting is not required at runtime.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In a generic collection, the type is specified in angular braces.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If trying to add another type of object into generic collection, it gives compile time error.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  ArrayList list=new ArrayList();//creating old non-generic arraylist  
  ArrayList&amp;lt;String&amp;gt; list=new ArrayList&amp;lt;String&amp;gt;();//creating new generic arraylist  
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ways-to-iterate-the-elements-of-the-collection-in-java&#34;&gt;Ways to iterate the elements of the collection in Java&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;By Iterator interface.&lt;/li&gt;
&lt;li&gt;By for-each loop.&lt;/li&gt;
&lt;li&gt;By ListIterator interface.&lt;/li&gt;
&lt;li&gt;By for loop.&lt;/li&gt;
&lt;li&gt;By forEach() method.&lt;/li&gt;
&lt;li&gt;By forEachRemaining() method.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;comparison&#34;&gt;Comparison&lt;/h3&gt;
&lt;h4 id=&#34;array-vs-arraylist&#34;&gt;Array vs ArrayList&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Basis&lt;/th&gt;
&lt;th&gt;Array&lt;/th&gt;
&lt;th&gt;ArrayList&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Definition&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;An array is a dynamically-created object. It serves as a container that holds the constant number of values of the same type. It has a contiguous memory location.&lt;/td&gt;
&lt;td&gt;The ArrayList is a class of Java Collections framework. It contains popular classes like Vector, HashTable, and HashMap.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Size&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Array is static in size.&lt;/td&gt;
&lt;td&gt;ArrayList is dynamic in size.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Resizable&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;An array is a fixed-length data structure.&lt;/td&gt;
&lt;td&gt;ArrayList is a variable-length data structure. It can be resized itself when needed.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Initialization&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;It is mandatory to provide the size of an array while initializing it directly or indirectly.&lt;/td&gt;
&lt;td&gt;We can create an instance of ArrayList without specifying its size. Java creates ArrayList of default size.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Performance&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;It performs fast in comparison to ArrayList because of fixed size.&lt;/td&gt;
&lt;td&gt;ArrayList is internally backed by the array in Java. The resize operation in ArrayList slows down the performance.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Primitive/ Generic type&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;An array can store both objects and primitives type.&lt;/td&gt;
&lt;td&gt;We cannot store primitive type in ArrayList. It automatically converts primitive type to object.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Iterating Values&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;We use for loop or for each loop to iterate over an array.&lt;/td&gt;
&lt;td&gt;We use an iterator to iterate over ArrayList.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Type-Safety&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;We cannot use generics along with array because it is not a convertible type of array.&lt;/td&gt;
&lt;td&gt;ArrayList allows us to store only generic/ type, that&amp;rsquo;s why it is type-safe.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Array provides a length variable which denotes the length of an array.&lt;/td&gt;
&lt;td&gt;ArrayList provides the size() method to determine the size of ArrayList.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Adding Elements&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;We can add elements in an array by using the assignment operator.&lt;/td&gt;
&lt;td&gt;Java provides the add() method to add elements in the ArrayList.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Single/ Multi-Dimensional&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Array can be multi-dimensional.&lt;/td&gt;
&lt;td&gt;ArrayList is always single-dimensional.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;arraylist-vs-linkedlist&#34;&gt;ArrayList vs LinkedList&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ArrayList&lt;/th&gt;
&lt;th&gt;LinkedList&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ArrayList internally uses a dynamic array to store the elements.&lt;/td&gt;
&lt;td&gt;LinkedList internally uses a doubly linked list to store the elements.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Manipulation with ArrayList is slow because it internally uses an array. If any element is removed from the array, all the bits are shifted in memory.&lt;/td&gt;
&lt;td&gt;Manipulation with LinkedList is faster than ArrayList because it uses a doubly linked list, so no bit shifting is required in memory.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;An ArrayList class can act as a list only because it implements List only.&lt;/td&gt;
&lt;td&gt;LinkedList class can act as a list and queue both because it implements List and Deque interfaces.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ArrayList is better for storing and accessing data.&lt;/td&gt;
&lt;td&gt;LinkedList is better for manipulating data.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;list-vs-set&#34;&gt;List vs Set&lt;/h4&gt;
&lt;p&gt;A list can contain duplicate elements whereas Set contains unique elements only.&lt;/p&gt;
&lt;h4 id=&#34;hashmap-vs-linkedhashmap-vs-treemap&#34;&gt;HashMap vs LinkedHashMap vs TreeMap&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;A Map doesn&amp;rsquo;t allow duplicate keys, but you can have duplicate values.&lt;/li&gt;
&lt;li&gt;HashMap and LinkedHashMap allow null keys and values, but TreeMap doesn&amp;rsquo;t allow any null key or value.&lt;/li&gt;
&lt;li&gt;A Map can&amp;rsquo;t be traversed, so you need to convert it into Set using keySet() or entrySet() method.&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Class&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HashMap&lt;/td&gt;
&lt;td&gt;HashMap is the implementation of Map, but it doesn&amp;rsquo;t maintain any order.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LinkedHashMap&lt;/td&gt;
&lt;td&gt;LinkedHashMap is the implementation of Map. It inherits HashMap class. It maintains insertion order.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TreeMap&lt;/td&gt;
&lt;td&gt;TreeMap is the implementation of Map and SortedMap. It maintains ascending order.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;HashMap&lt;/th&gt;
&lt;th&gt;TreeMap&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HashMap can contain one null key.&lt;/td&gt;
&lt;td&gt;TreeMap cannot contain any null key.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HashMap maintains no order.&lt;/td&gt;
&lt;td&gt;TreeMap maintains ascending order.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;hashmap-vs-hashtable&#34;&gt;HashMap vs Hashtable&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;HashMap&lt;/th&gt;
&lt;th&gt;Hashtable&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HashMap and Hashtable both are used to store data in key and value form. Both are using hashing technique to store unique keys.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1) HashMap is non synchronized. It is not-thread safe and can&amp;rsquo;t be shared between many threads without proper synchronization code.&lt;/td&gt;
&lt;td&gt;Hashtable is synchronized. It is thread-safe and can be shared with many threads.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2) HashMap allows one null key and multiple null values.&lt;/td&gt;
&lt;td&gt;Hashtable doesn&amp;rsquo;t allow any null key or value.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3) HashMap is fast.&lt;/td&gt;
&lt;td&gt;Hashtable is slow.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4) We can make the HashMap as synchronized by calling this code&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Map m = Collections.synchronizedMap(hashMap);&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hashtable is internally synchronized and can&amp;rsquo;t be unsynchronized.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5) HashMap is traversed by Iterator.&lt;/td&gt;
&lt;td&gt;Hashtable is traversed by Enumerator and Iterator.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6) Iterator in HashMap is fail-fast.&lt;/td&gt;
&lt;td&gt;Enumerator in Hashtable is not fail-fast.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7) HashMap inherits AbstractMap class.&lt;/td&gt;
&lt;td&gt;Hashtable inherits Dictionary class.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.geeksforgeeks.org/collections-in-java-2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Collections in Java&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackabuse.com/java-collections-queue-and-deque-interfaces/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Collections: Queue and Deque Interfaces&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.javatpoint.com/java-arraylist&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java ArrayList&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
</description>
    </item>
    
    <item>
      <title>Set Up Shardingsphere Development Environment</title>
      <link>/coding/java/shardingsphere-dev-env-setup/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/coding/java/shardingsphere-dev-env-setup/</guid>
      <description>&lt;h2 id=&#34;set-up-shardingsphere-development-environment&#34;&gt;Set Up Shardingsphere Development Environment&lt;/h2&gt;
&lt;p&gt;This document used the official release version to set up and verify development environment.
This way could help to rule out any unstable issues of source code and to focus the issues on environment.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Linux (Ubuntu 18.04)&lt;/li&gt;
&lt;li&gt;Source code 
&lt;a href=&#34;https://www.apache.org/dyn/closer.cgi/shardingsphere/4.1.1/apache-shardingsphere-4.1.1-src.zip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;4.1.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Eclipse&lt;/li&gt;
&lt;li&gt;IntelliJ IDEA&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Choose the proper IDE (Eclipse or IntelliJ IDEA), even No IDE
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;java-development-environment-no-ide&#34;&gt;Java Development Environment (No IDE)&lt;/h3&gt;
&lt;h4 id=&#34;install-jdk-8&#34;&gt;Install JDK 8&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install openjdk-8-jdk

$ java -version
openjdk version &amp;quot;1.8.0_252&amp;quot;
OpenJDK Runtime Environment (build 1.8.0_252-8u252-b09-1~18.04-b09)
OpenJDK 64-Bit Server VM (build 25.252-b09, mixed mode)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;install-maven-optional&#34;&gt;Install Maven (Optional)&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install maven

$ mvn -version
Apache Maven 3.6.0
Maven home: /usr/share/maven
Java version: 1.8.0_252, vendor: Private Build, runtime: /usr/lib/jvm/java-8-openjdk-amd64/jre
Default locale: en_US, platform encoding: UTF-8
OS name: &amp;quot;linux&amp;quot;, version: &amp;quot;5.4.0-42-generic&amp;quot;, arch: &amp;quot;amd64&amp;quot;, family: &amp;quot;unix&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;unzip-source-code&#34;&gt;Unzip Source Code&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Download 
&lt;a href=&#34;https://www.apache.org/dyn/closer.cgi/shardingsphere/4.1.1/apache-shardingsphere-4.1.1-src.zip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Source Code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unzip the source code&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  unzip apache-shardingsphere-4.1.1-src.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change file permissions&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  chmod -R 755 apache-shardingsphere-4.1.1-src-release/
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;build-and-test&#34;&gt;Build and Test&lt;/h4&gt;
&lt;p&gt;Based the Github page 
&lt;a href=&#34;https://github.com/apache/shardingsphere&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Build Apache ShardingSphere&lt;/a&gt;, there is a script to do the build&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./mvnw clean install -Prelease
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Make sure all the tests pass
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;issues-and-tricks&#34;&gt;Issues and Tricks&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Lombok in the project not support Java 11&lt;br&gt;
If Java 11 is set as default, this may cause the error below for Lombok does not support Java 11.
&lt;img src=&#34;./java-11-not-support-error.png&#34; alt=&#34;java.lang.ExceptionInInitializerError&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;br&gt;
Use Java 8.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multiple Java version installed&lt;br&gt;
If multiple versions of Java are installed on the system, such as Java 11 and Java 8, in the mean time, Java 11 is set as default, the above error will cause the build failure.
Even the default JDK is changed to Java 8 by &lt;strong&gt;update-alternatives &amp;ndash;config java&lt;/strong&gt;, the above issue may still be there.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;br&gt;
Uninstall all the JDKs by the command&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get remove openjdk* 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and reinstall JDK 8.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;eclipse&#34;&gt;Eclipse&lt;/h3&gt;
&lt;h4 id=&#34;import-the-project&#34;&gt;Import the Project&lt;/h4&gt;
&lt;p&gt;Follow the steps below to import the project.&lt;/p&gt;
&lt;p&gt;Import projects&amp;hellip; or File &amp;mdash;&amp;gt; Import&amp;hellip;
&lt;img src=&#34;./import-projects.png&#34; alt=&#34;import-projects&#34;&gt;&lt;br&gt;
&lt;img src=&#34;./existing-maven-projects.png&#34; alt=&#34;existing-maven-projects&#34;&gt;&lt;br&gt;
&lt;img src=&#34;./select-all-pom-files.png&#34; alt=&#34;select-all-pom-files&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The import is done by m2e plugin.&lt;br&gt;
The &lt;strong&gt;warning&lt;/strong&gt; shown below can be ignored.&lt;br&gt;
maven-remote-resources-plugin (goal &amp;ldquo;process&amp;rdquo;) is ignored by m2e.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;build-and-test-1&#34;&gt;Build and Test&lt;/h4&gt;
&lt;p&gt;Build and test as separate steps, i.e.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run As &amp;mdash;&amp;gt; Maven clean&lt;/li&gt;
&lt;li&gt;Run As &amp;mdash;&amp;gt; Maven build&lt;/li&gt;
&lt;li&gt;Run As &amp;mdash;&amp;gt; Maven test&lt;/li&gt;
&lt;li&gt;Run As &amp;mdash;&amp;gt; Maven install&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./maven-run-as-options.png&#34; alt=&#34;maven-run-as-options&#34;&gt;&lt;/p&gt;
&lt;p&gt;Or define the goals at one time, i.e.
Run As &amp;mdash;&amp;gt; Maven build&amp;hellip;  &amp;mdash;&amp;gt; Goals: (clean install)
&lt;img src=&#34;./maven-custom-build.png&#34; alt=&#34;maven-custom-build&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Specific module can be chosen and do the same build.&lt;br&gt;
Maven will build the dependencies automatically.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;issues-and-tricks-1&#34;&gt;Issues and Tricks&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Too many files with unapproved license&lt;br&gt;
When doing &amp;lsquo;install&amp;rsquo;, the below error occurs. No issue with &amp;lsquo;build&amp;rsquo; and &amp;lsquo;test&amp;rsquo;, but with &amp;lsquo;install&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;[INFO] BUILD FAILURE
Too many files with unapproved license&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;br&gt;
Use or check out clean source code, then do &amp;lsquo;install&amp;rsquo;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build failed with 8 threads&lt;br&gt;
When setting 8 threads for build, the build failed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;br&gt;
Set build threads as 1.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./1-thread.png&#34; alt=&#34;1-thread&#34;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;intellij-idea&#34;&gt;IntelliJ IDEA&lt;/h3&gt;
&lt;h4 id=&#34;import-the-project-1&#34;&gt;Import the Project&lt;/h4&gt;
&lt;p&gt;Follow the steps below to import the project.&lt;/p&gt;
&lt;p&gt;On the Welcome window, select &lt;strong&gt;Import Project&lt;/strong&gt;, then select the project POM file in the next window.
&lt;img src=&#34;./intellij-idea-import.png&#34; alt=&#34;intellij-idea-import&#34;&gt;&lt;br&gt;
&lt;img src=&#34;./select-project-pom-file.png&#34; alt=&#34;select-project-pom-file&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The &lt;strong&gt;errors&lt;/strong&gt; and &lt;strong&gt;warnings&lt;/strong&gt; of the POM file analysis can be ignored.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;build-and-test-2&#34;&gt;Build and Test&lt;/h4&gt;
&lt;p&gt;As there are errors in the POM file, the tool window of Maven lifecyle may not show up automatically.&lt;br&gt;
To add Maven support, right click on the project name in the project view, then select &lt;strong&gt;Add Framework Support&amp;hellip;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In the &lt;strong&gt;Maven&lt;/strong&gt; window, different phase of lifecyle of project or module can be chosen to build.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./intellij-idea-maven-build.png&#34; alt=&#34;intellij-idea-maven-build&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Specific module can be chosen and do the build.&lt;br&gt;
Maven will build the dependencies automatically.
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.tutorialspoint.com/maven/maven_build_life_cycle.htm#:~:text=When%20Maven%20starts%20building%20a,are%20registered%20with%20each%20phase.&amp;amp;text=A%20goal%20represents%20a%20specific,and%20managing%20of%20a%20project.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Maven - Build Life Cycle&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Introduction to the Build Lifecycle&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Inversion of Control and Dependency Injection</title>
      <link>/coding/java/ioc-di/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/coding/java/ioc-di/</guid>
      <description>&lt;h3 id=&#34;inversion-of-control-ioc&#34;&gt;Inversion of Control (IoC)&lt;/h3&gt;
&lt;p&gt;A real system might have dozens of services and components. To make a loosely coupled application, the way is to plug in the plugins (components and services) at some point.
So the core problem is how to assemble the plugins into an application. Then frameworks aim to resolve the problem. Usually &lt;strong&gt;Inversion of Control&lt;/strong&gt; is used in frameworks, so does Spring Framework. That&amp;rsquo;s why Inversion of Control (IoC) is the core technology of Spring Framework.&lt;/p&gt;
&lt;h4 id=&#34;inversion-of-control-ioc-vs-traditional-control&#34;&gt;Inversion of Control (IoC) vs. Traditional Control&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Traditional Control&lt;br&gt;
In traditional programming, the custom code that expresses the purpose of the program calls into reusable libraries to take care of generic tasks.&lt;br&gt;
I.e.&lt;br&gt;
the custom object instantiates its dependent objects, then uses the objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inversion of Control (IoC)&lt;br&gt;
IoC inverts the flow of control as compared to traditional control flow. In IoC, custom-written portions of a computer program receive the flow of control from a generic framework.
Usually it is the framework that calls into the custom, or task-specific, code.&lt;br&gt;
I.e.&lt;br&gt;
the custom object receives the instantiated dependent objects from framework.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;what-can-ioc-serve&#34;&gt;What Can IoC Serve&lt;/h4&gt;
&lt;p&gt;IoC as a design guideline, is used to increase modularity of the program and make it extensible. It serves the following purposes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To decouple the execution of a task from implementation.&lt;/li&gt;
&lt;li&gt;To make every module focus on what it is designed for.&lt;/li&gt;
&lt;li&gt;To free modules from assumptions about how and what other systems do, and instead rely on contracts.&lt;/li&gt;
&lt;li&gt;To prevent side effects on other modules when replacing a module.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;spring-implementation-of-ioc-principle&#34;&gt;Spring Implementation of IoC Principle&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;IoC&lt;/strong&gt; is also known as &lt;strong&gt;dependency injection (DI)&lt;/strong&gt;. It is a process whereby objects define their dependencies (that is, the other objects they work with) only through constructor arguments, arguments to a factory method, or properties that are set on the object instance after it is constructed or returned from a factory method. The container then injects those dependencies when it creates the bean. This process is fundamentally the inverse (hence the name, Inversion of Control) of the bean itself controlling the instantiation or location of its dependencies by using direct construction of classes or a mechanism such as the Service Locator pattern.&lt;/p&gt;
&lt;p&gt;This is common characteristic of frameworks, IoC manages java objects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;from instantiation to destruction through its BeanFactory.&lt;/li&gt;
&lt;li&gt;Java components that are instantiated by the IoC container are called beans, and the IoC container manages a bean&amp;rsquo;s scope, lifecycle events, and any AOP features for which it has been configured and coded.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    In Spring framework, the IoC Container does that job of injecting dependancies (DI) and not us, The flow of control is reversed, (Framework to Application) it is IoC with DI.
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&#34;spring-ioc-container&#34;&gt;Spring IoC Container&lt;/h3&gt;
&lt;p&gt;Central to the Spring Framework is its inversion of control (IoC) container, which provides a consistent means of configuring and managing Java objects using reflection. The container is responsible for managing object lifecycles of specific objects: creating these objects, calling their initialization methods, and configuring these objects by wiring them together.&lt;/p&gt;
&lt;p&gt;The interface &lt;strong&gt;org.springframework.context.ApplicationContext&lt;/strong&gt; represents the Spring IoC container and is responsible for &lt;strong&gt;instantiating&lt;/strong&gt;, &lt;strong&gt;configuring&lt;/strong&gt;, and &lt;strong&gt;assembling&lt;/strong&gt; the aforementioned beans. The container gets its instructions on what objects to instantiate, configure, and assemble by reading &lt;strong&gt;configuration metadata&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;Representation - org.springframework.context.ApplicationContext&lt;/li&gt;
&lt;li&gt;Responsibilities - instantiating, configuring, and assembling Beans&lt;/li&gt;
&lt;li&gt;Tool: configuration metadata&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;types-of-ioc-containers&#34;&gt;Types of IoC Containers&lt;/h4&gt;
&lt;p&gt;The &lt;strong&gt;org.springframework.beans&lt;/strong&gt; and &lt;strong&gt;org.springframework.context&lt;/strong&gt; packages provide the basis for the Spring Framework’s IoC container.&lt;br&gt;
The &lt;strong&gt;BeanFactory interface&lt;/strong&gt; provides an advanced configuration mechanism capable of managing objects of any nature.&lt;br&gt;
The &lt;strong&gt;ApplicationContext interface&lt;/strong&gt; builds on top of the BeanFactory (it is a sub-interface) and adds other functionality such as easier integration with Spring’s AOP features, message resource handling (for use in internationalization), event propagation, and application-layer specific contexts such as the WebApplicationContext for use in web applications.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BeanFactory container&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The BeanFactory is the actual representation of the Spring IoC container that is responsible for containing and otherwise managing the aforementioned beans.&lt;/li&gt;
&lt;li&gt;The BeanFactory interface is the central IoC container interface in Spring. The BeanFactory API provides the underlying basis for Spring’s IoC functionality.&lt;/li&gt;
&lt;li&gt;Its specific contracts are mostly used in integration with other parts of Spring and related third-party frameworks.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ApplicationContext container&lt;br&gt;
Because an ApplicationContext includes all the functionality of a BeanFactory, it is generally recommended over a plain BeanFactory, except for scenarios where full control over bean processing is needed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;In short, the BeanFactory provides the configuration framework and basic functionality, and the ApplicationContext adds more enterprise-specific functionality. The ApplicationContext is a complete superset of the BeanFactory.&lt;/li&gt;
&lt;li&gt;You should use an ApplicationContext unless you have a good reason for not doing so, with GenericApplicationContext and its subclass AnnotationConfigApplicationContext as the common implementations for custom bootstrapping.&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&#34;dependency-injection-di&#34;&gt;Dependency Injection (DI)&lt;/h3&gt;
&lt;p&gt;Inversion of Control is too generic a term, and thus people find it confusing. As a result with a lot of discussion with various IoC advocates, the name was settled on &lt;strong&gt;Dependency Injection&lt;/strong&gt;.&lt;br&gt;
Dependency injection generally means passing a dependent object as a parameter to a method, rather than having the method create the dependent object.
What it means in practice is that the method does not have a direct dependency on a particular implementation; any implementation that meets the requirements can be passed as a parameter.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The Spring IoC Container is the leading dependency injection framework.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;dependency-lookup-vs-dependency-injection&#34;&gt;Dependency Lookup vs. Dependency Injection&lt;/h4&gt;
&lt;p&gt;Objects can be obtained by means of either dependency lookup or dependency injection.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dependency lookup is a pattern where a caller asks the container object for an object with a specific name or of a specific type.&lt;/li&gt;
&lt;li&gt;Dependency injection is a pattern where the container passes objects by name to other objects, via either constructors, properties, or factory methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-styles-of-di&#34;&gt;The Styles of DI&lt;/h4&gt;
&lt;p&gt;Dependency Injection can be done by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Constructor-based dependency injection&lt;br&gt;
Constructor-based DI is accomplished by the container invoking a constructor with a number of arguments, each representing a dependency.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public class SimpleMovieLister {

      // the SimpleMovieLister has a dependency on a MovieFinder
      private MovieFinder movieFinder;

      // a constructor so that the Spring container can inject a MovieFinder
      public SimpleMovieLister(MovieFinder movieFinder) {
          this.movieFinder = movieFinder;
      }

      // business logic that actually uses the injected MovieFinder is omitted...
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setter-based dependency injection&lt;br&gt;
Setter-based DI is accomplished by the container calling setter methods on your beans after invoking a no-argument constructor or a no-argument static factory method to instantiate your bean.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public class SimpleMovieLister {

      // the SimpleMovieLister has a dependency on the MovieFinder
      private MovieFinder movieFinder;

      // a setter method so that the Spring container can inject a MovieFinder
      public void setMovieFinder(MovieFinder movieFinder) {
          this.movieFinder = movieFinder;
      }

      // business logic that actually uses the injected MovieFinder is omitted...
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;constructor-based-or-setter-based-di&#34;&gt;Constructor-based or Setter-based DI&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Constructor-based and setter-based DI can be mixed&lt;/li&gt;
&lt;li&gt;Constructors for mandatory dependencies and setter methods or configuration methods for optional dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Why&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Constructor injection lets you implement application components as immutable objects and ensures that required dependencies are not null. Furthermore, constructor-injected components are always returned to the client (calling) code in a fully initialized state.&lt;/li&gt;
&lt;li&gt;Setter injection should primarily only be used for optional dependencies that can be assigned reasonable default values within the class. Otherwise, not-null checks must be performed everywhere the code uses the dependency. One benefit of setter injection is that setter methods make objects of that class amenable to reconfiguration or re-injection later.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Use the DI style that makes the most sense for a particular class.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;ioc-vs-di&#34;&gt;IoC vs. DI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Interchangable&lt;br&gt;
IoC and DI are used interchangeably.&lt;/li&gt;
&lt;li&gt;Process and Result&lt;br&gt;
IoC is achieved through DI. DI is the process of providing the dependencies and IoC is the end result of DI.&lt;/li&gt;
&lt;li&gt;One to Many&lt;br&gt;
DI is a specific type of IoC and is not the only way to achieve IoC. There are other ways as well, such as:
&lt;ul&gt;
&lt;li&gt;Service Locator pattern&lt;/li&gt;
&lt;li&gt;Template method design pattern&lt;/li&gt;
&lt;li&gt;Strategy design pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;IoC basically facilitates having different components designed and coded separately and later used together by defining their relation with DI.&lt;/li&gt;
&lt;li&gt;By DI, the responsibility of creating objects is shifted from our application code to the Spring container; this phenomenon is called IoC.&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-introduction&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The IoC Container&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://martinfowler.com/articles/injection.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Inversion of Control Containers and the Dependency Injection pattern&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://en.wikipedia.org/wiki/Spring_Framework#Inversion_of_control_container_.28dependency_injection.29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Framework&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/9403155/what-is-dependency-injection-and-inversion-of-control-in-spring-framework&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What is Dependency Injection and Inversion of Control in Spring Framework?&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://howtodoinjava.com/spring-core/spring-ioc-vs-di/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring – Inversion of Control vs Dependency Injection&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://howtodoinjava.com/spring-core/different-spring-ioc-containers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring – IoC Containers&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://en.wikipedia.org/wiki/Inversion_of_control#Implementation_techniques&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Inversion of control&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/9403155/what-is-dependency-injection-and-inversion-of-control-in-spring-framework&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What is Dependency Injection and Inversion of Control in Spring Framework?&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/BeanFactory.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Interface BeanFactory&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/ApplicationContext.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Interface ApplicationContext&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-beanfactory&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The BeanFactory&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Spring Beans</title>
      <link>/coding/java/spring-beans/</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/coding/java/spring-beans/</guid>
      <description>&lt;h3 id=&#34;spring-beans&#34;&gt;Spring Beans&lt;/h3&gt;
&lt;br&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;The objects that are managed by Spring IoC container&lt;/strong&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;The objects that form the backbone of your application and that are managed by the &lt;strong&gt;Spring IoC container&lt;/strong&gt; are called beans. A bean is an object that is instantiated, assembled, and otherwise managed by a Spring IoC container. These beans are created with the &lt;strong&gt;configuration metadata&lt;/strong&gt; that you supply to the container, for example, in the form of XML &lt;bean/&gt; definitions.&lt;/p&gt;
&lt;p&gt;In Spring, the objects that form the backbone of your application and that are managed by the Spring IoC container are called beans. A bean is an object that is instantiated, assembled, and otherwise managed by a Spring IoC container. Otherwise, a bean is simply one of many objects in your application. Beans, and the dependencies among them, are reflected in the configuration metadata used by a container.&lt;/p&gt;
&lt;p&gt;Spring Bean is nothing special, any object in the Spring framework that we initialize through Spring container is called Spring Bean. Any normal Java POJO class can be a Spring Bean if it’s configured to be initialized via container by providing configuration metadata information.&lt;/p&gt;
&lt;h3 id=&#34;spring-ioc-container&#34;&gt;Spring IoC Container&lt;/h3&gt;
&lt;br&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;Representation - org.springframework.context.ApplicationContext&lt;/li&gt;
&lt;li&gt;Responsibilities - instantiating, configuring, and assembling Beans&lt;/li&gt;
&lt;li&gt;Tool: configuration metadata&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;The interface org.springframework.context.ApplicationContext represents the Spring IoC container and is responsible for instantiating, configuring, and assembling the aforementioned beans. The container gets its instructions on what objects to instantiate, configure, and assemble by reading configuration metadata.&lt;/p&gt;
&lt;h3 id=&#34;configuration-metadata&#34;&gt;Configuration Metadata&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This configuration metadata represents how you as an application developer tell the Spring container to instantiate, configure, and assemble the objects in your application.&lt;/li&gt;
&lt;li&gt;The configuration metadata is represented in &lt;strong&gt;XML&lt;/strong&gt;, &lt;strong&gt;Java annotations&lt;/strong&gt;, or &lt;strong&gt;Java code&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;It allows you to express the objects that compose your application and the rich interdependencies between such objects.&lt;/li&gt;
&lt;li&gt;Spring configuration consists of at least one and typically more than one bean definition that the container must manage.&lt;/li&gt;
&lt;li&gt;Consumed by Spring IoC container&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;spring-bean-scopes&#34;&gt;Spring Bean Scopes&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;7 scopes (Spring 4.2.x) are supported out of the box. You can also create a custom scope.&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Singleton&lt;/strong&gt; – Only one instance of the bean will be created for each container. This is the default scope for the spring beans. While using this scope, make sure bean doesn’t have shared instance variables otherwise it might lead to data inconsistency issues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prototype&lt;/strong&gt; – A new instance will be created every time the bean is requested.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Request&lt;/strong&gt; – This is same as prototype scope, however it’s meant to be used for web applications. A new instance of the bean will be created for each HTTP request.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Session&lt;/strong&gt; – A new bean will be created for each HTTP session by the container.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Global-session&lt;/strong&gt; – This is used to create global session beans for Portlet applications.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Application&lt;/strong&gt; - Scopes a single bean definition to the lifecycle of a ServletContext. Only valid in the context of a web-aware Spring ApplicationContext.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Websocket&lt;/strong&gt; - Scopes a single bean definition to the lifecycle of a WebSocket. Only valid in the context of a web-aware Spring ApplicationContext.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    As of Spring 3.0, a thread scope is available, but is not registered by default.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;As a rule, use the prototype scope for all stateful beans and the singleton scope for stateless beans.&lt;/li&gt;
&lt;li&gt;The client code must clean up prototype-scoped objects and release expensive resources that the prototype bean(s) are holding.&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;5 of the above are available only if you use a &lt;strong&gt;web-aware ApplicationContext&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;request&lt;/li&gt;
&lt;li&gt;session&lt;/li&gt;
&lt;li&gt;globalSession&lt;/li&gt;
&lt;li&gt;application&lt;/li&gt;
&lt;li&gt;websocket&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;spring-singleton-vs-singleton-pattern&#34;&gt;Spring Singleton vs Singleton Pattern&lt;/h4&gt;
&lt;p&gt;Spring’s concept of a singleton bean differs from the &lt;strong&gt;Singleton pattern&lt;/strong&gt; as defined in the Gang of Four (GoF) patterns book. The GoF Singleton hard-codes the scope of an object such that one and only one instance of a particular class is created per ClassLoader.&lt;/p&gt;
&lt;p&gt;The scope of the &lt;strong&gt;Spring singleton&lt;/strong&gt; is best described as per container and per bean. This means that if you define one bean for a particular class in a single Spring container, then the Spring container creates one and only one instance of the class defined by that bean definition.&lt;/p&gt;
&lt;h3 id=&#34;spring-bean-lifecycle&#34;&gt;Spring Bean Lifecycle&lt;/h3&gt;
&lt;h4 id=&#34;lifecycle-overview&#34;&gt;Lifecycle Overview&lt;/h4&gt;
&lt;p&gt;The lifecycle of any object means when &amp;amp; how it is born, how it behaves throughout its life, and when &amp;amp; how it dies.
The lifecycle of Spring Beans is not different from normal beans or objects. The below picture shows the overview of the lifecycle of objects, or Spring Beans.&lt;br&gt;
&lt;img src=&#34;./lifecycle-overview.png&#34; alt=&#34;lifecycle-overview&#34;&gt;&lt;/p&gt;
&lt;p&gt;As the Spring Beans are managed by Spring IoC containers. This makes the application developers not able to control the full lifecycle of Spring Beans. But Spring provides ways to add customizations into the lifecycle of Spring Beans, such as aware interfaces and callback methods, which are added in the below picture to show the lifecycle.
&lt;img src=&#34;./lifecycle-detailed-1.png&#34; alt=&#34;lifecycle-detailed-1&#34;&gt;
&lt;img src=&#34;./lifecycle-detailed-2.png&#34; alt=&#34;lifecycle-detailed-2&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;aware-interfaces&#34;&gt;Aware Interfaces&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BeanNameAware&lt;br&gt;
The BeanNameAware interface is implemented by beans that need access to its name defined in the Spring container.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  import org.springframework.beans.factory.BeanNameAware;

  public class BeanNameAwareImpl implements BeanNameAware {
      @Override
      public void setBeanName(String s) {
          System.out.println(&amp;quot;Bean Name: &amp;quot; + s);
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BeanFactoryAware&lt;br&gt;
Beans might need access to the bean factory that created it, say to call any service from the bean factory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  import org.springframework.beans.BeansException;
  import org.springframework.beans.factory.BeanFactory;
  import org.springframework.beans.factory.BeanFactoryAware;

  public class BeanFactoryAwareImpl implements BeanFactoryAware {

      @Override
      public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
          System.out.println(beanFactory.getBean(&amp;quot;fooBean&amp;quot;));
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ApplicationContextAware&lt;br&gt;
In Spring beans, you might require access to the ApplicationContext. For example, if your bean needs to look up some other beans. Similarly, if your bean needs access to some application file resource in your bean or even publish some application events, you need access to the ApplicationContext.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  import org.springframework.beans.BeansException;
  import org.springframework.context.ApplicationContext;
  import org.springframework.context.ApplicationContextAware;

  public class ApplicationContextAwareImpl implements ApplicationContextAware {

      @Override
      public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
          FooBean userBean = (FooBean) applicationContext.getBean(&amp;quot;fooBean&amp;quot;);
          System.out.println(&amp;quot;User Id: &amp;quot; + fooBean.getFooBeanId() + &amp;quot;  Bean Name :&amp;quot; + fooBean.getName());
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more aware interfaces and details, go to the link  
&lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/Aware.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Interface Aware&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;lifecycle-callbacks&#34;&gt;Lifecycle Callbacks&lt;/h4&gt;
&lt;h5 id=&#34;callback-methods&#34;&gt;Callback Methods&lt;/h5&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;InitializingBean&lt;/strong&gt; and &lt;strong&gt;DisposableBean&lt;/strong&gt; callback interfaces are not recommended.
  &lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Initialization callbacks&lt;/strong&gt;&lt;br&gt;
3 options:
&lt;ul&gt;
&lt;li&gt;Annotation-based&lt;br&gt;
&lt;strong&gt;@PostConstruct&lt;/strong&gt; annotation or specify a POJO initialization method&lt;/li&gt;
&lt;li&gt;XML-based&lt;br&gt;
&lt;strong&gt;init-method&lt;/strong&gt; attribute to specify the name of the method that has a void no-argument signature&lt;/li&gt;
&lt;li&gt;Java Config&lt;br&gt;
initMethod attribute of &lt;strong&gt;@Bean&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Destruction callbacks&lt;/strong&gt;&lt;br&gt;
3 options:
&lt;ul&gt;
&lt;li&gt;Annotation-based&lt;br&gt;
&lt;strong&gt;@PreDestroy&lt;/strong&gt; annotation or specify a generic method that is supported by bean definitions&lt;/li&gt;
&lt;li&gt;XML-Based&lt;br&gt;
&lt;strong&gt;destroy-method&lt;/strong&gt; attribute on the &lt;strong&gt;&amp;lt;bean/&amp;gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Java Config&lt;br&gt;
&lt;strong&gt;destroyMethod&lt;/strong&gt; attribute of &lt;strong&gt;@Bean&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Startup and shutdown callbacks&lt;/strong&gt;&lt;br&gt;
The Lifecycle interface defines the essential methods for any object that has its own lifecycle requirements (e.g. starts and stops some background process)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;callback-examples&#34;&gt;Callback Examples&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;XML-based: Custom init() and destroy() methods&lt;br&gt;
The default init and destroy methods in bean configuration file can be defined in two ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bean local definition&lt;/strong&gt; applicable to a single bean&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Global definition&lt;/strong&gt; applicable to all beans defined in beans context&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;beans.xml&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Local definition&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;beans&amp;gt;
     
      &amp;lt;bean id=&amp;quot;demoBean&amp;quot; class=&amp;quot;com.flycoolman.callbackdemo.DemoBean&amp;quot;
                      init-method=&amp;quot;customInit&amp;quot;
                      destroy-method=&amp;quot;customDestroy&amp;quot;&amp;gt;&amp;lt;/bean&amp;gt;
     
  &amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Global definition&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;beans default-init-method=&amp;quot;customInit&amp;quot; default-destroy-method=&amp;quot;customDestroy&amp;quot;&amp;gt;   
     
          &amp;lt;bean id=&amp;quot;demoBean&amp;quot; class=&amp;quot;com.flycoolman.callbackdemo.DemoBean&amp;quot;&amp;gt;&amp;lt;/bean&amp;gt;
     
  &amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;DemoBean.java&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  package com.flycoolman.callbackdemo;
     
  public class DemoBean 
  {
      public void customInit() 
      {
          System.out.println(&amp;quot;Method customInit() invoked...&amp;quot;);
      }
     
      public void customDestroy() 
      {
          System.out.println(&amp;quot;Method customDestroy() invoked...&amp;quot;);
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Annotation-based: @PostConstruct and @PreDestroy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;@PostConstruct annotated method will be invoked after the bean has been constructed using default constructor and just before it’s instance is returned to requesting object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@PreDestroy annotated method is called just before the bean is about be destroyed inside bean container.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  package com.flycoolman.callbackdemo;  
         
  import javax.annotation.PostConstruct;  
  import javax.annotation.PreDestroy;  
         
  public class DemoBean  
  {
      @PostConstruct
      public void customInit() 
      {
          System.out.println(&amp;quot;Method customInit() invoked...&amp;quot;);
      }
             
      @PreDestroy
      public void customDestroy() 
      {
          System.out.println(&amp;quot;Method customDestroy() invoked...&amp;quot;);
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java Config&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public class Foo {
      public void init() {
          // initialization logic
      }
      public void cleanup() {
              // destruction logic
          }
  }

  @Configuration
  public class AppConfig {
      @Bean(initMethod = &amp;quot;init&amp;quot;, destroyMethod = &amp;quot;cleanup&amp;quot;)
      public Foo foo() {
          return new Foo();
      }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;multiple-lifecycle-mechanismsexecution-orders&#34;&gt;Multiple Lifecycle Mechanisms/Execution Orders&lt;/h4&gt;
&lt;p&gt;Multiple lifecycle mechanisms configured for the same bean, with different initialization methods, are called as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Methods annotated with @PostConstruct&lt;/li&gt;
&lt;li&gt;afterPropertiesSet() as defined by the InitializingBean callback interface&lt;/li&gt;
&lt;li&gt;A custom configured init() method&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;p&gt;Destroy methods are called in the same order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Methods annotated with &lt;strong&gt;@PreDestroy&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;destroy()&lt;/strong&gt; as defined by the DisposableBean callback interface&lt;/li&gt;
&lt;li&gt;A custom configured &lt;strong&gt;destroy()&lt;/strong&gt; method&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;what-is-callback&#34;&gt;What is Callback&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;From Wikipedia&lt;/strong&gt;&lt;br&gt;
In computer programming, a &lt;strong&gt;callback&lt;/strong&gt;, also known as a &amp;ldquo;&lt;strong&gt;call-after&lt;/strong&gt;&amp;rdquo; function, is &lt;strong&gt;any executable code that is passed as an argument to other code&lt;/strong&gt;; that other code is expected to call back (execute) the argument at a given time. This execution may be immediate as in a &lt;strong&gt;synchronous callback&lt;/strong&gt;, or it might happen at a later time as in an &lt;strong&gt;asynchronous callback&lt;/strong&gt;. Programming languages support callbacks in different ways, often implementing them with&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;subroutines,&lt;/li&gt;
&lt;li&gt;lambda expressions,&lt;/li&gt;
&lt;li&gt;blocks,&lt;/li&gt;
&lt;li&gt;or function pointers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;For Java&lt;/strong&gt;&lt;br&gt;
In object-oriented programming languages without function-valued arguments, such as in Java before its 1.7 version, callbacks can be simulated by passing an instance of an abstract class or interface, of which the receiver will call one or more methods, while the calling end provides a concrete implementation. Something like below (from Stackoverflow)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class Test {
    public static void main(String[] args) throws  Exception {
        new Test().doWork(new Callback() { // implementing class            
            @Override
            public void call() {
                System.out.println(&amp;quot;callback called&amp;quot;);
            }
        });
    }

    public void doWork(Callback callback) {
        System.out.println(&amp;quot;doing work&amp;quot;);
        callback.call();
    }

    public interface Callback {
        void call();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;spring-bean-instantiation&#34;&gt;Spring Bean Instantiation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Instantiation with a constructor&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;bean id=&amp;quot;exampleBean&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instantiation with a static factory method&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;bean id=&amp;quot;exampleBean&amp;quot; factory-method=&amp;quot;createInstance&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instantiation using an instance factory method&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;bean id=&amp;quot;myFactoryBean&amp;quot;  class=&amp;quot;...&amp;quot;&amp;gt;
     
  &amp;lt;bean id=&amp;quot;exampleBean&amp;quot;  factory-bean=&amp;quot;myFactoryBean&amp;quot; factory-method=&amp;quot;createInstance&amp;quot;&amp;gt;&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more details, go to the link 
&lt;a href=&#34;https://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/beans.html#beans-factory-class&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Instantiating beans&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;spring-bean-configurationcontainer-configuration&#34;&gt;Spring Bean Configuration/Container Configuration&lt;/h3&gt;
&lt;h4 id=&#34;xml-based&#34;&gt;XML-based&lt;/h4&gt;
&lt;p&gt;XML-based configuration metadata shows these beans configured as &lt;bean/&gt; elements inside a top-level &lt;beans/&gt; element.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Bean Configuration with Property&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
  &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
      xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
      xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans.xsd&amp;quot;&amp;gt;

      &amp;lt;!-- services --&amp;gt;

      &amp;lt;bean id=&amp;quot;petStore&amp;quot; class=&amp;quot;org.springframework.samples.jpetstore.services.PetStoreServiceImpl&amp;quot;&amp;gt;
          &amp;lt;property name=&amp;quot;accountDao&amp;quot; ref=&amp;quot;accountDao&amp;quot;/&amp;gt;
          &amp;lt;property name=&amp;quot;itemDao&amp;quot; ref=&amp;quot;itemDao&amp;quot;/&amp;gt;
          &amp;lt;!-- additional collaborators and configuration for this bean go here --&amp;gt;
      &amp;lt;/bean&amp;gt;

      &amp;lt;!-- more bean definitions for services go here --&amp;gt;

  &amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multiple Bean Configuration&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
  &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
      xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
      xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans.xsd&amp;quot;&amp;gt;

      &amp;lt;bean id=&amp;quot;accountDao&amp;quot;
          class=&amp;quot;org.springframework.samples.jpetstore.dao.jpa.JpaAccountDao&amp;quot;&amp;gt;
          &amp;lt;!-- additional collaborators and configuration for this bean go here --&amp;gt;
      &amp;lt;/bean&amp;gt;

      &amp;lt;bean id=&amp;quot;itemDao&amp;quot; class=&amp;quot;org.springframework.samples.jpetstore.dao.jpa.JpaItemDao&amp;quot;&amp;gt;
          &amp;lt;!-- additional collaborators and configuration for this bean go here --&amp;gt;
      &amp;lt;/bean&amp;gt;

      &amp;lt;!-- more bean definitions for data access objects go here --&amp;gt;

  &amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multiple XML Files&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;beans&amp;gt;
      &amp;lt;import resource=&amp;quot;services.xml&amp;quot;/&amp;gt;
      &amp;lt;import resource=&amp;quot;resources/messageSource.xml&amp;quot;/&amp;gt;
      &amp;lt;import resource=&amp;quot;/resources/themeSource.xml&amp;quot;/&amp;gt;

      &amp;lt;bean id=&amp;quot;bean1&amp;quot; class=&amp;quot;...&amp;quot;/&amp;gt;
      &amp;lt;bean id=&amp;quot;bean2&amp;quot; class=&amp;quot;...&amp;quot;/&amp;gt;
  &amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;annotation-based&#34;&gt;Annotation-based&lt;/h4&gt;
&lt;p&gt;Spring 2.5 introduced support for annotation-based configuration metadata.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Annotation injection is performed before XML injection, thus the latter configuration will override the former for properties wired through both approaches.
  &lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Implicit Registeration&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
  &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
      xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
      xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot;
      xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context.xsd&amp;quot;&amp;gt;

      &amp;lt;context:annotation-config/&amp;gt;

  &amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;a href=&#34;context:annotation-config/&#34;&gt;context:annotation-config/&lt;/a&gt; only looks for annotations on beans in the same application context in which it is defined.&lt;br&gt;
This means that, if you put &lt;a href=&#34;context:annotation-config/&#34;&gt;context:annotation-config/&lt;/a&gt; in a WebApplicationContext for a DispatcherServlet, it only checks for @Autowired beans in your controllers, and not your services.
  &lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Annotate the Method&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public class SimpleMovieLister {

      private MovieFinder movieFinder;

      @Autowired
      public void setMovieFinder(MovieFinder movieFinder) {
          this.movieFinder = movieFinder;
      }

      // ...

  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    @Autowired annotation can be applied to setter methods, constructors, methods with arbitrary names and/or multiple arguments, fields, etc.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For more details, go to the link

&lt;a href=&#34;https://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/beans.html#beans-annotation-config&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Annotation-based container configuration&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;java-based-javaconfig&#34;&gt;Java-based (JavaConfig)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;JavaConfig Overview&lt;/p&gt;
&lt;p&gt;Starting with Spring 3.0, many features provided by the Spring JavaConfig project became part of the core Spring Framework. Thus you can define beans external to your application  classes by using Java rather than XML files. To use these new features, see the @Configuration, @Bean, @Import and @DependsOn annotations.&lt;/p&gt;
&lt;p&gt;Java configuration typically uses @Bean annotated methods within a @Configuration class.&lt;/p&gt;
&lt;p&gt;Spring JavaConfig is a product of the Spring community that provides a pure-Java approach to configuring the Spring IoC Container. While JavaConfig aims to be a feature-complete     option for configuration, it can be (and often is) used in conjunction with the more well-known XML-based configuration approach.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@Bean Annotation&lt;/p&gt;
&lt;p&gt;The @Bean annotation is used to indicate that a method instantiates, configures and initializes a new object to be managed by the Spring IoC container. For those familiar with Spring’s &lt;beans/&gt; XML configuration the @Bean annotation plays the same role as the &lt;bean/&gt; element. You can use @Bean annotated methods with any Spring @Component, however, they are most often used with @Configuration beans.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@Configuration Annotation&lt;/p&gt;
&lt;p&gt;Annotating a class with @Configuration indicates that its primary purpose is as a source of bean definitions. Furthermore, @Configuration classes allow inter-bean dependencies to be defined by simply calling other @Bean methods in the same class. The simplest possible @Configuration class would read as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  @Configuration
  public class AppConfig {

      @Bean
      public MyService myService() {
          return new MyServiceImpl();
      }

  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more details, go to the link

&lt;a href=&#34;https://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/beans.html#beans-java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java-based container configuration&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/beans.html#beans-definition&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Core Technologies - beans definition&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://juejin.im/post/6844903618567471112&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;初识Spring —— Bean的装配（一）&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://juejin.im/post/6844903619834150919&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;初识Spring —— Bean的装配（二）&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/17193365/what-in-the-world-are-spring-beans&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What in the world are Spring beans?&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://juejin.im/post/6844903813753602056&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring注入Bean的几种方式&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://docs.huihoo.com/spring/zh-cn/beans.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Beans, BeanFactory和ApplicationContext&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.journaldev.com/2461/spring-ioc-bean-example-tutorial&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring IoC and Bean&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/21163355/spring-context-and-bean-lifecycle-callbacks-practical-examples-of-usage&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Context and Bean Lifecycle callbacks: practical examples of usage&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/25469369/what-do-you-mean-by-callbacks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;what do you mean by callbacks?&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://dzone.com/articles/spring-bean-lifecycle-using-spring-aware-interface&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Bean Lifecycle: Using Spring Aware Interfaces&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.geeksforgeeks.org/bean-life-cycle-in-java-spring/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bean life cycle in Java Spring&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://en.wikipedia.org/wiki/Callback_%28computer_programming%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Callback (computer programming)&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://howtodoinjava.com/spring-core/spring-bean-life-cycle/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring – Bean Life Cycle&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://dzone.com/articles/spring-bean-lifecycle&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Bean Lifecycle&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Java Beans</title>
      <link>/coding/java/javabeans/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/coding/java/javabeans/</guid>
      <description>&lt;h2 id=&#34;java-beans&#34;&gt;Java Beans&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Software Components&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JavaBeans are classes that encapsulate many objects into a single object. They are serializable, have a zero-argument constructor, and allow access to properties using getter and setter methods.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;a Java classs&lt;/li&gt;
&lt;li&gt;serializable&lt;/li&gt;
&lt;li&gt;zero-argument constructor&lt;/li&gt;
&lt;li&gt;getter and setter&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A bean is a Java class with method names that follow the JavaBeans guidelines. A bean builder tool uses introspection to examine the bean class. Based on this inspection, the bean builder tool can figure out the bean&amp;rsquo;s properties, methods, and events.&lt;br&gt;
Almost any code can be packaged as a bean.&lt;br&gt;
The power of JavaBeans is that you can use software components without having to write them or understand their implementation.&lt;/p&gt;
&lt;h3 id=&#34;java-beans-example&#34;&gt;Java Beans Example&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;import java.io.Serializable;

public class Car implements Serializable {
    //Private Properties
    private String color;
    private Boolean isCar;

    //Zero-argument Constructor
    public Car(){}

    //Getter and Setter
    public void setColor(String color) { this.color = color; }
    
    public String getColor() { return color; }
    
    public void setCar(Boolean car) { isCar = car; }

    //&#39;is&#39; for Boolean getter
    public Boolean isCar() { return isCar; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;bean-properties&#34;&gt;Bean Properties&lt;/h3&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;Read and write property has getter and setter&lt;/li&gt;
&lt;li&gt;A read-only property has a getter method but no setter&lt;/li&gt;
&lt;li&gt;A write-only property has a setter method only&lt;/li&gt;
&lt;li&gt;Boolean property using is instead of get&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Indexed Properties&lt;br&gt;
an array instead of a single value&lt;/li&gt;
&lt;li&gt;Bound Properties&lt;br&gt;
PropertyChangeListeners&lt;/li&gt;
&lt;li&gt;Constrained Properties&lt;br&gt;
VetoableChangeListeners&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bean-methods&#34;&gt;Bean Methods&lt;/h3&gt;
&lt;p&gt;Any public method that is not part of a property definition is a bean method.&lt;/p&gt;
&lt;h3 id=&#34;bean-events&#34;&gt;Bean Events&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A bean class can fire off any type of event&lt;/li&gt;
&lt;li&gt;Method names with a specific pattern&lt;/li&gt;
&lt;li&gt;Can be used in wiring components together&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;beaninfo&#34;&gt;BeanInfo&lt;/h3&gt;
&lt;p&gt;A BeanInfo is a class that changes how your bean appears in a builder tool.&lt;/p&gt;
&lt;h3 id=&#34;bean-persistence&#34;&gt;Bean Persistence&lt;/h3&gt;
&lt;h4 id=&#34;serialization&#34;&gt;Serialization&lt;/h4&gt;
&lt;p&gt;A bean has the property of persistence when its properties, fields, and state information are saved to and retrieved from storage.&lt;br&gt;
All beans must persist. To persist, must implement either of below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;java.io.Serializable&lt;/li&gt;
&lt;li&gt;java.io.Externalizable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any class is serializable as long as that class or a parent class implements the java.io.Serializable interface.&lt;br&gt;
Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Component&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Date&lt;/li&gt;
&lt;li&gt;Vector&lt;/li&gt;
&lt;li&gt;Hashtable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not serializable:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Image&lt;/li&gt;
&lt;li&gt;Thread&lt;/li&gt;
&lt;li&gt;Socket&lt;/li&gt;
&lt;li&gt;InputStream&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Controlling Serialization:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automatic serialization&lt;/li&gt;
&lt;li&gt;Customized serialization&lt;/li&gt;
&lt;li&gt;Customized file format&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;long-term-persistence&#34;&gt;Long Term Persistence&lt;/h4&gt;
&lt;p&gt;Long-term persistence is a model that enables beans to be saved in XML format.&lt;/p&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/JavaBeans&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaBeans&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://download.oracle.com/javase/tutorial/javabeans/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Oracle&amp;rsquo;s JavaBeans tutorials&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaBeans specification&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://juejin.im/post/6844903618567471112&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;初识Spring —— Bean的装配（一）&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Java Notes</title>
      <link>/coding/java/java-notes/</link>
      <pubDate>Tue, 31 Dec 2019 23:59:59 +0000</pubDate>
      <guid>/coding/java/java-notes/</guid>
      <description>&lt;h2 id=&#34;java-notes&#34;&gt;Java Notes&lt;/h2&gt;
&lt;p&gt;A free style notes of Java.&lt;/p&gt;
&lt;h3 id=&#34;basic-knowledge&#34;&gt;Basic knowledge&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Static blocks&lt;/li&gt;
&lt;li&gt;Non static blocks&lt;/li&gt;
&lt;li&gt;Static methods&lt;/li&gt;
&lt;li&gt;Non-Static methods&lt;/li&gt;
&lt;li&gt;Static blank final variables&lt;/li&gt;
&lt;li&gt;Non-Static blank final variables&lt;/li&gt;
&lt;li&gt;Static classes&lt;/li&gt;
&lt;li&gt;Non-Static inner classes&lt;/li&gt;
&lt;li&gt;Static and dynamic polymorphism&lt;/li&gt;
&lt;li&gt;Static binding/Early binding&lt;/li&gt;
&lt;li&gt;Dynamic binding/Late binding&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;top-10-mistakes-java-developers-make&#34;&gt;Top 10 Mistakes Java Developers Make&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.programcreek.com/2014/05/top-10-mistakes-java-developers-make/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Top 10 Mistakes Java Developers Make&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;differentiate-jvm-jre-jdk-jit&#34;&gt;Differentiate JVM JRE JDK JIT&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Java Virtual Machine (JVM) is an abstract computing machine.&lt;/li&gt;
&lt;li&gt;Java Runtime Environment (JRE) is an implementation of the JVM.&lt;/li&gt;
&lt;li&gt;Java Development Kit (JDK) contains JRE along with various development tools like Java libraries, Java source compilers, Java debuggers, bundling and deployment tools.&lt;/li&gt;
&lt;li&gt;Just In Time compiler (JIT) is runs after the program has started executing, on the fly. It has access to runtime information and makes optimizations of the code for better performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://javapapers.com/core-java/differentiate-jvm-jre-jdk-jit/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Differentiate JVM JRE JDK JIT&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;class-vs-interface&#34;&gt;Class vs Interface&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Class:&lt;/strong&gt; A class is a user-defined blueprint or prototype from which objects are created. It represents the set of properties or methods that are common to all objects of one type.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interface:&lt;/strong&gt; Like a class, an interface can have methods and variables, but the methods declared in an interface are by default abstract (only method signature, no body). Interfaces specify what a class must do and not how. It is the blueprint of the class.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An interface defines a protocol of behavior and not how we should be implemented. A class that implements an interface adheres to the protocol defined by that interface.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Interface variables are static because java interfaces cannot be instantiated on their own. The value of the variable must be assigned in a static context in which no instance exists.&lt;/li&gt;
&lt;li&gt;The final modifier ensures the value assigned to the interface variable is a true constant that cannot be re-assigned. In other words, interfaces can declare only constants, not instance variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pass-by-value-and-pass-by-reference-and-pass-reference-by-value&#34;&gt;Pass By Value and Pass By Reference and Pass Reference by Value&lt;/h3&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Java uses pass by value. There is no pass by reference in Java.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Pass By Value and Pass By Reference and Pass Reference by Value

&lt;a href=&#34;https://javapapers.com/core-java/java-pass-by-value-and-pass-by-reference/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Pass By Value and Pass By Reference&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java always passes parameter variables by value.&lt;/li&gt;
&lt;li&gt;Object variables in Java always point to the real object in the memory heap.&lt;/li&gt;
&lt;li&gt;A mutable object’s value can be changed when it is passed to a method.&lt;/li&gt;
&lt;li&gt;An immutable object’s value cannot be changed, even if it is passed a new value.&lt;/li&gt;
&lt;li&gt;“Passing by value” refers to passing a copy of the value.&lt;/li&gt;
&lt;li&gt;“Passing by reference” refers to passing the real reference of the variable in memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.infoworld.com/article/3512039/does-java-pass-by-reference-or-pass-by-value.html#:~:text=Java%20always%20passes%20parameter%20variables,is%20passed%20to%20a%20method.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Does Java pass by reference or pass by value?&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;java-jvm-memory-types&#34;&gt;Java (JVM) Memory Types&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Shared/Common Area&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Heap Memory&lt;br&gt;
Class instances and arrays are stored in heap memory. Heap memory is also called as shared memory. As this is the place where multiple threads will share the same data.&lt;br&gt;
Heap data area is created at VM startup. Claiming the memory back is done automatically by the garbage collector (GC).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Non-heap Memory&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Method area
Method area is created at JVM startup and shared among all the threads.
&lt;ol&gt;
&lt;li&gt;per-class structures (runtime constants and static fields)&lt;/li&gt;
&lt;li&gt;code for methods&lt;/li&gt;
&lt;li&gt;constructors&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Run-time Constant Pool&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Per-Thread Area&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Program Counter (PC) Register
PC keeps a pointer to the current statement that is being executed in its thread. If the current executing method is ‘native’, then the value of program counter register will be undefined.&lt;/li&gt;
&lt;li&gt;JVM Stacks or Frames
Java JVM frames are created when a method is invoked, it performs the dynamic linking. JVM stacks are created and managed for each thread.&lt;/li&gt;
&lt;li&gt;Native Method Stacks
It is used for native methods, and created per thread.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Memory Generations&lt;/strong&gt;
HotSpot VM’s garbage collector uses generational garbage collection. It separates the JVM’s memory into and they are called young generation and old generation.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Young Generation&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Eden space&lt;/li&gt;
&lt;li&gt;Survivor space&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Old Generation&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Tenured Generation
GC moves live objects from survivor space to tenured generation.&lt;/li&gt;
&lt;li&gt;PermGen (Permanent Generation)
The permanent generation contains meta data of the virtual machine, class and method objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Java JVM Run-time Data Areas)[https://javapapers.com/core-java/java-jvm-run-time-data-areas/#Java_Virtual_Machine_Stacks]&lt;br&gt;
(Java (JVM) Memory Types)[https://javapapers.com/core-java/java-jvm-memory-types/]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key Takeaways&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Local Variables are stored in Frames during runtime.&lt;/li&gt;
&lt;li&gt;Static Variables are stored in Method Area.&lt;/li&gt;
&lt;li&gt;Arrays are stored in heap memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java-static&#34;&gt;Java Static&lt;/h3&gt;
&lt;h4 id=&#34;java-static-variables&#34;&gt;Java Static Variables&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Java instance variables are given separate memory for storage. If there is a need for a variable to be common to all the objects of a single java class, then the static modifier should be used in the variable declaration.&lt;/li&gt;
&lt;li&gt;Any java object that belongs to that class can modify its static variables.&lt;/li&gt;
&lt;li&gt;Also, an instance is not a must to modify the static variable and it can be accessed using the java class directly.&lt;/li&gt;
&lt;li&gt;Static variables can be accessed by java instance methods also.&lt;/li&gt;
&lt;li&gt;When the value of a constant is known at compile time it is declared ‘final’ using the ‘static’ keyword.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;java-static-methods&#34;&gt;Java Static Methods&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Similar to static variables, java static methods are also common to classes and not tied to a java instance.&lt;/li&gt;
&lt;li&gt;Good practice in java is that, static methods should be invoked with using the class name though it can be invoked using an object. ClassName.methodName(arguments) or objectName.methodName(arguments)&lt;/li&gt;
&lt;li&gt;General use for java static methods is to access static fields.&lt;/li&gt;
&lt;li&gt;Static methods can be accessed by java instance methods.&lt;/li&gt;
&lt;li&gt;Java static methods cannot access instance variables or instance methods directly.&lt;/li&gt;
&lt;li&gt;Java static methods cannot use the ‘this’ keyword.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;java-static-classes&#34;&gt;Java Static Classes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;For java classes, only an inner class can be declared using the static modifier.&lt;/li&gt;
&lt;li&gt;For java a static inner class it does not mean that, all their members are static. These are called nested static classes in java.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://javapapers.com/core-java/explain-the-java-static-modifier/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Static&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;static-block&#34;&gt;Static Block&lt;/h3&gt;
&lt;p&gt;It&amp;rsquo;s a static initializer. It&amp;rsquo;s executed when the class is loaded (or initialized, to be precise, but you usually don&amp;rsquo;t notice the difference).&lt;br&gt;
It can be thought of as a &amp;ldquo;class constructor&amp;rdquo;.&lt;br&gt;
Note that there are also instance initializers, which look the same, except that they don&amp;rsquo;t have the static keyword. Those are run in addition to the code in the constructor when a new instance of the object is created.&lt;br&gt;
A static block in Java is a block of code that is executed at the time of loading a class for use in a Java application. It starts with a &amp;lsquo;static {&amp;rsquo; and it is used for initializing static Class members in general — and is also known as a &amp;lsquo;Static Initializer&amp;rsquo;. The most powerful use of a static block can be realized while performing operations that are required to be executed only once for a Class in an application lifecycle.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/2943556/static-block-in-java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Static Block in Java&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://dzone.com/articles/the-hidden-synchronized-keyword-with-a-static-bloc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Hidden Synchronized Keyword With a Static Block&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;builder-patter&#34;&gt;Builder Patter&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Builder&lt;/strong&gt; is a creational design pattern that lets you construct complex objects step by step. The pattern allows you to produce different types and representations of an object using the same construction code.&lt;/p&gt;
&lt;p&gt;Builder pattern builds a complex object using simple objects and using a step by step approach. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object.&lt;/p&gt;
&lt;p&gt;A Builder class builds the final object step by step. This builder is independent of other objects.&lt;/p&gt;
&lt;h4 id=&#34;pros-and-cons&#34;&gt;Pros and Cons&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can construct objects step-by-step, defer construction steps or run steps recursively.&lt;/li&gt;
&lt;li&gt;You can reuse the same construction code when building various representations of products.&lt;/li&gt;
&lt;li&gt;Single Responsibility Principle. You can isolate complex construction code from the business logic of the product.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The overall complexity of the code increases since the pattern requires creating multiple new classes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;relations-with-other-patterns&#34;&gt;Relations with Other Patterns&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Many designs start by using &lt;strong&gt;Factory Method&lt;/strong&gt; (less complicated and more customizable via subclasses) and evolve toward &lt;strong&gt;Abstract Factory&lt;/strong&gt;, &lt;strong&gt;Prototype&lt;/strong&gt;, or &lt;strong&gt;Builder&lt;/strong&gt; (more flexible, but more complicated).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Builder&lt;/strong&gt; focuses on constructing complex objects step by step. &lt;strong&gt;Abstract Factory&lt;/strong&gt; specializes in creating families of related objects. Abstract Factory returns the product immediately, whereas Builder lets you run some additional construction steps before fetching the product.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;strong&gt;Builder&lt;/strong&gt; when creating complex &lt;strong&gt;Composite&lt;/strong&gt; trees because you can program its construction steps to work recursively.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can combine &lt;strong&gt;Builder&lt;/strong&gt; with &lt;strong&gt;Bridge&lt;/strong&gt;: the director class plays the role of the abstraction, while different builders act as implementations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Abstract Factories&lt;/strong&gt;, &lt;strong&gt;Builders&lt;/strong&gt; and &lt;strong&gt;Prototypes&lt;/strong&gt; can all be implemented as &lt;strong&gt;Singletons&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Builder_pattern&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Builder pattern&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://refactoring.guru/design-patterns/builder&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Builder&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.tutorialspoint.com/design_pattern/builder_pattern.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Design Patterns - Builder Pattern&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;transient-keyword-in-java&#34;&gt;transient keyword in Java&lt;/h3&gt;
&lt;p&gt;The transient keyword in Java is used to indicate that a field should not be part of the serialization (which means saved, like to a file) process.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/910374/why-does-java-have-transient-fields&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Why does Java have transient fields?&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;array-vs-arraylist&#34;&gt;Array vs. ArrayList&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Array&lt;/strong&gt; is a fixed length data structure whereas &lt;strong&gt;ArrayList&lt;/strong&gt; is a variable length Collection class.&lt;/li&gt;
&lt;li&gt;We cannot change length of array once created in Java but ArrayList can be changed.&lt;/li&gt;
&lt;li&gt;We cannot store primitives in ArrayList, it can only store objects. But array can contain both primitives and objects in Java.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.javatpoint.com/array-vs-arraylist-in-java#:~:text=Array%20is%20a%20fixed%20length,primitives%20and%20objects%20in%20Java.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Array vs ArrayList in Java&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.geeksforgeeks.org/array-vs-arraylist-in-java/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Array vs ArrayList in Java&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;arraysaslist-vs-new-arraylist&#34;&gt;Arrays.asList() vs new ArrayList()&lt;/h3&gt;
&lt;p&gt;When you call Arrays.asList it does not return a java.util.ArrayList. It returns a java.util.Arrays$ArrayList which is a fixed size list backed by the original source array. In other words, it is a view for the array exposed with Java&amp;rsquo;s collection-based APIs.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/16748030/difference-between-arrays-aslistarray-and-new-arraylistintegerarrays-aslist/16748184#:~:text=asList%28ia%29%20returns%20a%20List,from%20new%20ArrayList%20.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Difference between Arrays.asList(array) and new ArrayList&lt;Integer&gt;(Arrays.asList(array))&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/4658867/why-does-arrays-aslist-return-its-own-arraylist-implementation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Why does Arrays.asList() return its own ArrayList implementation&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;access-level&#34;&gt;Access Level&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./access-level.png&#34; alt=&#34;access-level&#34;&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.programcreek.com/2011/11/java-access-level-public-protected-private/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Access Level for Members: public, protected, private&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;set-vs-set&#34;&gt;Set vs. Set&amp;lt;?&amp;gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;an unbounded wildcard Set&amp;lt;?&amp;gt; can hold elements of any type, and a raw type Set can also hold elements of any type.&lt;/li&gt;
&lt;li&gt;wildcard type is safe and the raw type is not. We can not put any element into a Set&amp;lt;?&amp;gt;&lt;/li&gt;
&lt;li&gt;When you want to use a generic type, but you don&amp;rsquo;t know or care what the actual type the parameter is, you can use &amp;lt;?&amp;gt;[1]. It can only be used as parameters for a method.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.programcreek.com/2013/12/raw-type-set-vs-unbounded-wildcard-set/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Raw type vs. Unbounded wildcard&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;arraylist-vs-linkedlist-vs-vector&#34;&gt;ArrayList vs. LinkedList vs. Vector&lt;/h3&gt;
&lt;h4 id=&#34;implementation&#34;&gt;Implementation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ArrayList&lt;/strong&gt; is implemented as a resizable array. As more elements are added to ArrayList, its size is increased dynamically. It&amp;rsquo;s elements can be accessed directly by using the get and set methods, since ArrayList is essentially an array.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LinkedList&lt;/strong&gt; is implemented as a double linked list. Its performance on add and remove is better than Arraylist, but worse on get and set methods.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vector&lt;/strong&gt; is similar with ArrayList, but it is synchronized.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;some-details&#34;&gt;Some details&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;ArrayList is a better choice if your program is thread-safe.&lt;/li&gt;
&lt;li&gt;Vector and ArrayList require more space as more elements are added.&lt;/li&gt;
&lt;li&gt;Vector each time doubles its array size, while ArrayList grow 50% of its size each time.&lt;/li&gt;
&lt;li&gt;LinkedList, however, also implements Queue interface which adds more methods than ArrayList and Vector, such as offer(), peek(), poll(), etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The default initial capacity of an ArrayList is pretty small. It is a good habit to construct the ArrayList with a higher initial capacity. This can avoid the resizing cost.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;how-to-use&#34;&gt;How to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;LinkedList should be preferred if there are a large number of add/remove operations&lt;/li&gt;
&lt;li&gt;LinkedList should be preferred if there are not a lot of random access operations.&lt;/li&gt;
&lt;li&gt;Vector is almost identical to ArrayList, and the difference is that Vector is synchronized. Because of this, it has an overhead than ArrayList. Normally, most Java programmers use ArrayList instead of Vector because they can synchronize explicitly by themselves.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./time-complexity-arraylist-linkedlist.png&#34; alt=&#34;time-complexity-arraylist-linkedlist&#34;&gt;&lt;br&gt;
add() in the table refers to add(E e), and remove() refers to remove(int index)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ArrayList has O(n) time complexity for arbitrary indices of add/remove, but O(1) for the operation at the end of the list.&lt;/li&gt;
&lt;li&gt;LinkedList has O(n) time complexity for arbitrary indices of add/remove, but O(1) for operations at end/beginning of the List.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java-collection-hierarchy&#34;&gt;Java Collection Hierarchy&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./java-collection-hierarchy.png&#34; alt=&#34;java-collection-hierarchy&#34;&gt;&lt;br&gt;
&lt;img src=&#34;./java-collections-hierarchy-1.png&#34; alt=&#34;java-collections-hierarchy-1&#34;&gt;&lt;br&gt;
&lt;img src=&#34;./java-collections-hierarchy-2.jpg&#34; alt=&#34;java-collections-hierarchy-2&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;the-queue-a-fifo-list&#34;&gt;The queue (a FIFO list)&lt;/h4&gt;
&lt;p&gt;Implementation of a queue&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A queue (of bounded size) can be efficiently implemented in an array. Look at JavaHypertext entry “queue”.&lt;/li&gt;
&lt;li&gt;A queue can be efficiently implemented using any linked list that supports deletion in the front and insertion at the end in constant time. The first (last) element of the queue is at the front (end) of the linked list.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-stack-a-lifo-list&#34;&gt;The stack (a LIFO list)&lt;/h4&gt;
&lt;p&gt;Implementation of a stack&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A stack (of bounded size) can be efficiently implemented using an array b and an int variable n: The n elements of the stack are in b[0..n-1], with b[0] being the bottom element and b[n-1] being the top element.&lt;/li&gt;
&lt;li&gt;A stack can be efficiently implemented using a linked list. The first element is the top of the stack and the last element is the bottom. It’s easy to push (prepend) an element and pop (remove) the first element in constant time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-deque&#34;&gt;The deque&lt;/h4&gt;
&lt;p&gt;The word deque, usually pronounced deck, is short for double-ended queue. A deque is a list that supports insertion and removal at both ends. Thus, a deque can be used as a queue or as a stack.&lt;/p&gt;
&lt;h4 id=&#34;stacks-queues-and-deques-in-the-java-collection-framework&#34;&gt;Stacks, queues, and deques in the Java Collection framework&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java has interface Deque&lt;E&gt;. It is implemented by classes ArrayDeque&lt;E&gt; (which implements a list in an expandable array) and LinkedList&lt;E&gt;, so these two classes can be used for a queue and for a stack.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Both ArrayDeque and LinkedList also implement interface Queue&lt;E&gt;, so you can use this interface to restrict operations to queue operations. For example, create a LinkedList and assign it to a Queue variable.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  Queue&amp;lt;E&amp;gt; q= new LinkedList&amp;lt;&amp;gt;();  
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thereafter, use only q for the LinkedList and operations are restricted to queue operations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java also has a class Stack&lt;E&gt;, which implements a stack in an expandable array. However, the Java API would rather you use an ArrayDeque. The problem is that there is no suitable way to restrict the operations of an Array-Deque to stack operations, so we prefer to use class Stack&lt;E&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;arraysaslist-variable-arguments&#34;&gt;Arrays.asList() Variable Arguments&lt;/h3&gt;
&lt;p&gt;Since the asList method in Arrays uses variable arguments, and &lt;strong&gt;variable arguments expressions are mapped to arrays&lt;/strong&gt;, you could either pass an inline array as in:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;List&amp;lt;String&amp;gt; list = Arrays.asList(new String[]{&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;});  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or simply pass the variable arguments that will be automatically mapped to an array:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;List&amp;lt;String&amp;gt; list = Arrays.asList(&amp;quot;a&amp;quot;,&amp;quot;b&amp;quot;,&amp;quot;c&amp;quot;);  
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;varargs-variable-length-arguments&#34;&gt;Varargs (Variable-length Arguments)&lt;/h3&gt;
&lt;p&gt;A method that takes a variable number of arguments is a varargs method.&lt;/p&gt;
&lt;p&gt;A variable-length argument is specified by three periods(…). For Example,&lt;/p&gt;
&lt;p&gt;public static void varargFunction(dataType &amp;hellip; dataVar)
{
// method body
}&lt;/p&gt;
&lt;p&gt;The &amp;hellip; syntax tells the Java compiler that the method can be called with zero or more arguments. As a result, &lt;strong&gt;dataVar&lt;/strong&gt; variable is implicitly declared as an array of type dataType[ ]. Thus, inside the method, &lt;strong&gt;dataVar&lt;/strong&gt; variable is accessed using the array syntax.&lt;br&gt;
In case of no arguments, the length of nums is 0.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vararg Methods can also be overloaded but overloading may lead to ambiguity.&lt;/li&gt;
&lt;li&gt;Prior to JDK 5, variable length arguments could be handled into two ways : One was using overloading, other was using array argument.&lt;/li&gt;
&lt;li&gt;There can be only one variable argument in a method.&lt;/li&gt;
&lt;li&gt;Variable argument (varargs) must be the last argument.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;patterns-by-type&#34;&gt;Patterns by type&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Creational
Creational patterns are ones that create objects, rather than having to instantiate objects directly. This gives the program more flexibility in deciding which objects need to be created for a given case.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Abstract factory
groups object factories that have a common theme.&lt;/li&gt;
&lt;li&gt;Builder
constructs complex objects by separating construction and representation.&lt;/li&gt;
&lt;li&gt;Factory method
creates objects without specifying the exact class to create.&lt;/li&gt;
&lt;li&gt;Prototype
creates objects by cloning an existing object.&lt;/li&gt;
&lt;li&gt;Singleton
restricts object creation for a class to only one instance.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Structural
These concern class and object composition. They use inheritance to compose interfaces and define ways to compose objects to obtain new functionality.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adapter
allows classes with incompatible interfaces to work together by wrapping its own interface around that of an already existing class.&lt;/li&gt;
&lt;li&gt;Bridge
decouples an abstraction from its implementation so that the two can vary independently.&lt;/li&gt;
&lt;li&gt;Composite
composes zero-or-more similar objects so that they can be manipulated as one object.&lt;/li&gt;
&lt;li&gt;Decorator
dynamically adds/overrides behaviour in an existing method of an object.&lt;/li&gt;
&lt;li&gt;Facade
provides a simplified interface to a large body of code.&lt;/li&gt;
&lt;li&gt;Flyweight
reduces the cost of creating and manipulating a large number of similar objects.&lt;/li&gt;
&lt;li&gt;Proxy
provides a placeholder for another object to control access, reduce cost, and reduce complexity.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Behavioral
Most of these design patterns are specifically concerned with communication between objects.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chain of responsibility
delegates commands to a chain of processing objects.&lt;/li&gt;
&lt;li&gt;Command
creates objects which encapsulate actions and parameters.&lt;/li&gt;
&lt;li&gt;Interpreter
implements a specialized language.&lt;/li&gt;
&lt;li&gt;Iterator
accesses the elements of an object sequentially without exposing its underlying representation.&lt;/li&gt;
&lt;li&gt;Mediator
allows loose coupling between classes by being the only class that has detailed knowledge of their methods.&lt;/li&gt;
&lt;li&gt;Memento
provides the ability to restore an object to its previous state (undo).&lt;/li&gt;
&lt;li&gt;Observer
is a publish/subscribe pattern which allows a number of observer objects to see an event.&lt;/li&gt;
&lt;li&gt;State
allows an object to alter its behavior when its internal state changes.&lt;/li&gt;
&lt;li&gt;Strategy
allows one of a family of algorithms to be selected on-the-fly at runtime.&lt;/li&gt;
&lt;li&gt;Template method
defines the skeleton of an algorithm as an abstract class, allowing its subclasses to provide concrete behavior.&lt;/li&gt;
&lt;li&gt;Visitor
separates an algorithm from an object structure by moving the hierarchy of methods into one object.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Design_Patterns&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Design Patterns&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;factory-pattern&#34;&gt;Factory Pattern&lt;/h3&gt;
&lt;h3 id=&#34;java-best-practice&#34;&gt;Java Best Practice&lt;/h3&gt;
&lt;h4 id=&#34;return-a-list-not-a-linkedlist&#34;&gt;Return a List, not a LinkedList&lt;/h4&gt;
&lt;h4 id=&#34;return-a-list-not-an-arraylist&#34;&gt;Return a List, not an ArrayList&lt;/h4&gt;
&lt;p&gt;Your Java code will be more flexible when you learn to return more-general object references. In most cases other developers only need to see your interface, not your implementation. Put another way, does it matter to anyone else if you used a LinkedList or an ArrayList? If it doesn&amp;rsquo;t matter, then return a List, or perhaps even a Collection.&lt;br&gt;
It&amp;rsquo;s best to return the most generic type that&amp;rsquo;s appropriate for your interface.&lt;br&gt;
If there&amp;rsquo;s some reason why ArrayList is inherently appropriate for the data you&amp;rsquo;re returning then you should use that. Typically List is fine but you might also consider using Collection if the returned values are inherently unordered.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/10328658/should-i-return-list-or-arraylist#:~:text=The%20only%20reason%20to%20return,properly%20serialize%20generic%20list%20interface.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Should i return List or ArrayList&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://alvinalexander.com/blog/post/java/java-return-collection-list-not-linkedlist/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Best Practice  - return a List, not a LinkedList&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;mutable-vs-immutable&#34;&gt;Mutable vs. Immutable&lt;/h3&gt;
&lt;h4 id=&#34;string-vs-stringbuilder-vs-stringbuffer&#34;&gt;String vs StringBuilder vs StringBuffer&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.geeksforgeeks.org/string-vs-stringbuilder-vs-stringbuffer-in-java/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;String vs StringBuilder vs StringBuffer in Java&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String is immutable&lt;/li&gt;
&lt;li&gt;StringBuilder is mutable&lt;/li&gt;
&lt;li&gt;StringBuffer is similar to StringBuilder except one difference that StringBuffer is thread safe, i.e., multiple threads can use it without any issue. The thread safety brings a penalty of performance&lt;/li&gt;
&lt;li&gt;When to use
&lt;ul&gt;
&lt;li&gt;If a string is going to remain constant throughout the program, then use String class object because a String object is immutable.&lt;/li&gt;
&lt;li&gt;If a string can change (example: lots of logic and operations in the construction of the string) and will only be accessed from a single thread, using a StringBuilder is good enough.&lt;/li&gt;
&lt;li&gt;If a string can change, and will be accessed from multiple threads, use a StringBuffer because StringBuffer is synchronous so you have thread-safety.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.ntu.edu.sg/home/ehchua/programming/java/JavaGeneric.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Generics&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.cs.wcupa.edu/rkline/cs3/generic-lists.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Generic Lists&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;http://tutorials.jenkov.com/java-generics/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Generics Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;java-x-ables&#34;&gt;Java X-ables&lt;/h3&gt;
&lt;p&gt;Mutable vs. Immutable
Closable
Serialable
Comparable&lt;/p&gt;
&lt;h3 id=&#34;java-tostring-works-differently-between-array-and-arraylist&#34;&gt;Java toString() works differently between Array and ArrayList&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/13780374/why-tostring-method-works-differently-between-array-and-arraylist-object-in-ja&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Why toString() method works differently between Array and ArrayList object in Java&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The main difference between an array and an arraylist is that an arraylist is a class that is written in Java and has its own implementation (including the decision to override toString) whereas arrays are part of the language specification itself.&lt;br&gt;
In other words the language specification prevents the toString method of an array to be overriden and it therefore uses the default implementation defined in Object which prints the class name and hashcode.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An array, i.e. int[], String[], does not have toString(), but use the default implementation defined in Object&lt;/li&gt;
&lt;li&gt;Arrays class has its own toString() implementation, i.e. Arrays.toString(arr)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;comparable-vs-comparator-in-java&#34;&gt;Comparable vs Comparator in Java&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.geeksforgeeks.org/comparable-vs-comparator-in-java/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Comparable vs Comparator in Java&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.geeksforgeeks.org/comparator-interface-java/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Comparator Interface in Java with Examples&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A comparable object is capable of comparing itself with another object. The class itself must implements the java.lang.Comparable interface (override compareTo() method) to compare its instances.&lt;/p&gt;
&lt;p&gt;Unlike Comparable, &lt;strong&gt;Comparator&lt;/strong&gt; is external to the element type we are comparing. It’s a separate class. We create multiple separate classes (that implement Comparator) to compare by different members.&lt;/p&gt;
&lt;p&gt;Collections class has a second sort() method and it takes Comparator. The &lt;strong&gt;sort()&lt;/strong&gt; method invokes the &lt;strong&gt;compare()&lt;/strong&gt; to sort objects.&lt;/p&gt;
&lt;h5 id=&#34;how-does-collectionssort-work&#34;&gt;How does Collections.Sort() work?&lt;/h5&gt;
&lt;p&gt;Internally the Sort method does call Compare method of the classes it is sorting. To compare two elements, it asks “Which is greater?” Compare method returns -1, 0 or 1 to say if it is less than, equal, or greater to the other. It uses this result to then determine if they should be swapped for its sort.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comparable is meant for objects with natural ordering which means the object itself must know how it is to be ordered. Whereas, Comparator interface sorting is done through a separate class.&lt;/li&gt;
&lt;li&gt;Logically, Comparable interface compares “this” reference with the object specified and Comparator in Java compares two different class objects provided.&lt;br&gt;
If any class implements Comparable interface in Java then collection of that object either List or Array can be sorted automatically by using Collections.sort() or Arrays.sort() method and objects will be sorted based on there natural order defined by CompareTo method.&lt;/li&gt;
&lt;li&gt;To summarize, if sorting of objects needs to be based on natural order then use Comparable whereas if you sorting needs to be done on attributes of different objects, then use Comparator in Java.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;javautilproperties&#34;&gt;Java.util.Properties&lt;/h3&gt;
&lt;p&gt;The java.util.Properties class is a class which represents a persistent set of properties.The Properties can be saved to a stream or loaded from a stream.Following are the important points about Properties&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each key and its corresponding value in the property list is a string.&lt;/li&gt;
&lt;li&gt;A property list can contain another property list as its &amp;lsquo;defaults&amp;rsquo;, this second property list is searched if the property key is not found in the original property list.&lt;/li&gt;
&lt;li&gt;This class is thread-safe; multiple threads can share a single Properties object without the need for external synchronization.&lt;/li&gt;
&lt;li&gt;Properties is a subclass of Hashtable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.tutorialspoint.com/java/util/java_util_properties.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java.util.Properties Class&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.geeksforgeeks.org/java-util-properties-class-java/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java.util.Properties class in Java&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;java-8&#34;&gt;Java 8&lt;/h3&gt;
&lt;h4 id=&#34;stream&#34;&gt;Stream&lt;/h4&gt;
&lt;h4 id=&#34;foreach&#34;&gt;forEach&lt;/h4&gt;
&lt;h4 id=&#34;optional&#34;&gt;Optional&lt;/h4&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Python vs. Java</title>
      <link>/coding/python/python-vs-java/</link>
      <pubDate>Tue, 31 Dec 2019 23:59:59 +0000</pubDate>
      <guid>/coding/python/python-vs-java/</guid>
      <description>&lt;h2 id=&#34;python-vs-java&#34;&gt;Python vs. Java&lt;/h2&gt;
&lt;p&gt;A VS. notes between Python and Java.&lt;/p&gt;
&lt;h3 id=&#34;type-casting&#34;&gt;Type casting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python: &lt;strong&gt;int(1.9)&lt;/strong&gt;, &lt;strong&gt;float(1)&lt;/strong&gt;, &lt;strong&gt;str(1.9)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Java:
&lt;ul&gt;
&lt;li&gt;Narrowing casting: (manually) - converting a larger type to a smaller size type
&lt;strong&gt;(int)1.9&lt;/strong&gt;, &lt;strong&gt;(float)9.78&lt;/strong&gt; &lt;br&gt;
double -&amp;gt; float -&amp;gt; long -&amp;gt; int -&amp;gt; char -&amp;gt; short -&amp;gt; byte&lt;/li&gt;
&lt;li&gt;Widening casting: automatically - converting a smaller type to a larger type size&lt;br&gt;
byte -&amp;gt; short -&amp;gt; char -&amp;gt; int -&amp;gt; long -&amp;gt; float -&amp;gt; double&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;true-or-false&#34;&gt;True or False&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python: True/False&lt;/li&gt;
&lt;li&gt;Java: true/false&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;map-sorting&#34;&gt;Map sorting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python:&lt;br&gt;
Easy to use sorted() and lambda to sort dict/map by keys or values&lt;/li&gt;
&lt;li&gt;Java:&lt;br&gt;
Use Collections.sort() and Comparator to sort map by keys or values&lt;br&gt;
Java 8 provides new ways of defining Comparators by using lambda expressions and the comparing() static factory method.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;python-max-vs-java-mathmax-vs-java-collectionsmax&#34;&gt;Python max() vs Java Math.max() vs Java Collections.max()&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Python max()&lt;br&gt;
Can campare multiple items, or iterable, even strings&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  max(n1, n2, n3, ...)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    max(iterable)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or &lt;strong&gt;Compare strings&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    max(&amp;quot;Mike&amp;quot;, &amp;quot;John&amp;quot;, &amp;quot;Vicky&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java max()&lt;br&gt;
Only compare two mathematic items, i.e. int, float, double &amp;hellip;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java Collections.max()&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;max(Collection&amp;lt;? extends T&amp;gt; coll)&lt;br&gt;
Returns the maximum element of the given collection, according to the natural ordering of its elements.&lt;br&gt;
static &lt;T&gt; T	max(Collection&amp;lt;? extends T&amp;gt; coll, Comparator&amp;lt;? super T&amp;gt; comp)&lt;br&gt;
Returns the maximum element of the given collection, according to the order induced by the specified comparator.&lt;br&gt;
&lt;strong&gt;Compare Integers&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    Integer[] num = { 2, 4, 7, 5, 9 };
    // using Collections.min() to
    // find minimum element
    // using only 1 line.
    int min = Collections.min(Arrays.asList(num));
    // using Collections.max()
    // to find maximum element
    // using only 1 line.
    int max = Collections.max(Arrays.asList(num));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or &lt;strong&gt;Compare Strings&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    // List&amp;lt;String&amp;gt; list = new ArrayList&amp;lt;String&amp;gt;(Arrays.asList(&amp;quot;Mike Smith&amp;quot;, &amp;quot;John&amp;quot;, &amp;quot;Vicky&amp;quot;));
    List&amp;lt;String&amp;gt; list = Arrays.asList(&amp;quot;Mike&amp;quot;, &amp;quot;John&amp;quot;, &amp;quot;Vicky&amp;quot;);
    String max = Collections.max(list);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or &lt;strong&gt;Use comparator&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    List&amp;lt;String&amp;gt; list = Arrays.asList(&amp;quot;Mike Smith&amp;quot;, &amp;quot;John&amp;quot;, &amp;quot;Vicky&amp;quot;);
    String max = Collections.max(list, Comparator.comparing(s -&amp;gt; s.length()));
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Python - Java&lt;br&gt;
The aboves are same to min().
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;infinity&#34;&gt;Infinity&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Python&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;math.inf
The &lt;strong&gt;math.inf&lt;/strong&gt; constant returns a floating-point positive infinity.
For negative infinity, use &lt;strong&gt;-math.inf&lt;/strong&gt;.
The inf constant is equivalent to float(&amp;lsquo;inf&amp;rsquo;).&lt;/p&gt;
&lt;p&gt;import math
print(math.inf)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sys.maxsize&lt;br&gt;
An integer giving the maximum value a variable of type Py_ssize_t can take. It’s usually 2&lt;strong&gt;31 - 1 on a 32-bit platform and 2&lt;/strong&gt;63 - 1 on a 64-bit platform.&lt;br&gt;
like sys.maxint in Python2.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Integer.MAX_VALUE, Integer.MIN_VALUE, Integer.MAX_VALUE+1, Integer.MIN_VALUE-1&lt;/li&gt;
&lt;li&gt;Long.MAX_VALUE, Long.MIN_VALUE&lt;/li&gt;
&lt;li&gt;Float.MAX_VALUE, Float.MIN_VALUE, Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY&lt;/li&gt;
&lt;li&gt;Double.MAX_VALUE, Double.MIN_VALUE, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NaN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    There is no way to represent infinity as an integer in Python. This matches the behaviour of many other languages. However, due to Python&amp;rsquo;s dynamic typing system, you can use float(&amp;lsquo;inf&amp;rsquo;) in place of an integer, and it will behave as you would expect.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    To Be Continued
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;mapdict-composite-key&#34;&gt;Map/Dict Composite key&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Python&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  map = {(1, 0) : 2, (1, 1) : 3, (2, 0) : 4, (2, 1) : 5}
  map[(1,0)]
  map.get((1,0))
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java&lt;br&gt;
Not so easy to do&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
  </channel>
</rss>
