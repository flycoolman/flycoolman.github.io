<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>System | flycoolman</title>
    <link>/category/system/</link>
      <atom:link href="/category/system/index.xml" rel="self" type="application/rss+xml" />
    <description>System</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>©2020 flycoolman.com All Rights Reserved</copyright><lastBuildDate>Thu, 10 Sep 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu42a5118afc49636e6fda7ce5d4b48056_3366_512x512_fill_lanczos_center_2.png</url>
      <title>System</title>
      <link>/category/system/</link>
    </image>
    
    <item>
      <title>Docker</title>
      <link>/devops/docker/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/devops/docker/</guid>
      <description>&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;
&lt;h3 id=&#34;what-is-docker&#34;&gt;What is Docker?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; is basically a container engine which uses the Linux Kernel features like &lt;strong&gt;namespaces&lt;/strong&gt; and &lt;strong&gt;control groups&lt;/strong&gt; to create containers on top of an operating system and automates application deployment on the container. Docker uses &lt;strong&gt;Copy-on-write union file system&lt;/strong&gt; for its &lt;strong&gt;backend storage&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;what-is-the-difference-between-a-docker-container-and-a-docker-image&#34;&gt;What is the difference between a docker container and a docker image?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Docker Image&lt;/strong&gt; is a set of files which has no state, whereas &lt;strong&gt;Docker Container&lt;/strong&gt; is the instantiation of Docker Image. In other words, Docker Container is the &lt;strong&gt;run time instance&lt;/strong&gt; of images.&lt;/p&gt;
&lt;h3 id=&#34;what-is-a-container&#34;&gt;What is a container?&lt;/h3&gt;
&lt;p&gt;In 4 bullet points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Containers share the host kernel&lt;/li&gt;
&lt;li&gt;Containers use the kernel ability to group processes for resource control&lt;/li&gt;
&lt;li&gt;Containers ensure isolation through namespaces&lt;/li&gt;
&lt;li&gt;Containers feel like lightweight VMs (lower footprint, faster), but are not Virtual Machines!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;namespaces-and-cgroups----------------docker&#34;&gt;Namespaces and Cgroups  - - - - - - &amp;gt;  Docker&lt;/h3&gt;
&lt;p&gt;Docker makes use of kernel &lt;strong&gt;namespaces&lt;/strong&gt; to provide the &lt;strong&gt;isolated workspace&lt;/strong&gt; called the container.&lt;br&gt;
Docker also makes use of kernel &lt;strong&gt;control groups&lt;/strong&gt; for resource allocation and isolation.&lt;br&gt;
&lt;img src=&#34;./namespace.png&#34; alt=&#34;namespace&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;container-format&#34;&gt;Container Format&lt;/h3&gt;
&lt;p&gt;Docker Engine combines the &lt;strong&gt;namespaces&lt;/strong&gt;, &lt;strong&gt;control groups&lt;/strong&gt; and &lt;strong&gt;UnionFS&lt;/strong&gt; into a wrapper called a container format. The default container format is &lt;strong&gt;libcontainer&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;types-of-containers&#34;&gt;Types of Containers&lt;/h3&gt;
&lt;p&gt;Given the above constructs, containers may be divided into 3 types as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;System Containers&lt;/strong&gt; share rootfs, PID, network, IPC and UTS with host system but live inside a cgroup.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Application Containers&lt;/strong&gt; live inside a cgroup and use namespaces (PID, network, IPC, chroot) for isolation from host system&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pods&lt;/strong&gt; use namespaces for isolation from host system but create sub groups which share PID, network, IPC and UTS except the rootfs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;images--layers&#34;&gt;Images &amp;amp; Layers&lt;/h3&gt;
&lt;p&gt;Each Docker image references a list of &lt;strong&gt;read-only layers&lt;/strong&gt; that represent filesystem differences. Layers are stacked on top of each other to form a base for a container’s rootfs.&lt;br&gt;
One big innovation of the Docker engine was the concept of leveraging Copy-On-Write file systems to significantly speed up the preparation of the rootfs.&lt;/p&gt;
&lt;h3 id=&#34;copy-on-write&#34;&gt;Copy-On-Write&lt;/h3&gt;
&lt;p&gt;When &lt;strong&gt;Docker&lt;/strong&gt; creates a container, it &lt;strong&gt;adds a new, thin, writable layer&lt;/strong&gt; on top of the underlying stack of image layers. This layer is often called the “container layer”.&lt;br&gt;
All changes made to the running container - such as writing new files, modifying existing files, and deleting files - are written to this thin writable container layer.&lt;/p&gt;
&lt;h3 id=&#34;union-file-systems&#34;&gt;Union File Systems&lt;/h3&gt;
&lt;p&gt;Union File Systems provide the following features for storage:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Layering&lt;/li&gt;
&lt;li&gt;Copy-On-Write&lt;/li&gt;
&lt;li&gt;Caching&lt;/li&gt;
&lt;li&gt;Diffing&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dangling-images&#34;&gt;Dangling images&lt;/h3&gt;
&lt;p&gt;Docker images consist of multiple layers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dangling images&lt;/strong&gt; are layers that have no relationship to any tagged images.&lt;/li&gt;
&lt;li&gt;They no longer serve a purpose and consume disk space.&lt;/li&gt;
&lt;li&gt;They can be located by adding the filter flag, &lt;strong&gt;-f&lt;/strong&gt; with a value of &lt;strong&gt;dangling=true&lt;/strong&gt; to the docker images command.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Another description:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An unused image means that it has not been assigned or used in a container. For example, when running docker ps -a - it will list all of your exited and currently running containers. Any images shown being used inside any of containers are a &amp;ldquo;used image&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;On the other hand, a dangling image just means that you&amp;rsquo;ve created the new build of the image, but it wasn&amp;rsquo;t given a new name. So the old images you have becomes the &amp;ldquo;dangling image&amp;rdquo;. Those old images are the ones that are untagged and displays &amp;ldquo;&lt;none&gt;&amp;rdquo; on its name when you run docker images.&lt;/li&gt;
&lt;li&gt;When running &lt;strong&gt;docker system prune -a&lt;/strong&gt;, it will remove both unused and dangling images. Therefore any images being used in a container, whether they have been exited or currently running, will NOT be affected.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-difference-between-copy-and-add-in-a-dockerfile&#34;&gt;The Difference between COPY and ADD in a Dockerfile&lt;/h3&gt;
&lt;p&gt;Sometimes you see &lt;strong&gt;COPY&lt;/strong&gt; or &lt;strong&gt;ADD&lt;/strong&gt; being used in a Dockerfile, but 99% of the time you should be using &lt;strong&gt;COPY&lt;/strong&gt;, here&amp;rsquo;s why.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;COPY&lt;/strong&gt; and &lt;strong&gt;ADD&lt;/strong&gt; are both Dockerfile instructions that serve similar purposes. They let you copy files from a specific location into a Docker image.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;COPY&lt;/strong&gt; takes in a &lt;strong&gt;src&lt;/strong&gt; and &lt;strong&gt;destination&lt;/strong&gt;. It &lt;strong&gt;only&lt;/strong&gt; lets you copy in a local file or directory from your host (the machine building the Docker image) into the Docker image itself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ADD&lt;/strong&gt; lets you do that too, but it also supports &lt;strong&gt;2 other sources&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, you can use a &lt;strong&gt;URL&lt;/strong&gt; instead of a local file / directory.&lt;/li&gt;
&lt;li&gt;Secondly, you can extract a tar file from the source directly into the destination.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In most cases if you’re using a URL, you’re downloading a zip file and are then using the RUN command to extract it. However, you might as well just use RUN with curl instead of ADD here so you chain everything into 1 RUN command to &lt;strong&gt;make a smaller Docker image&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A valid use case for &lt;strong&gt;ADD&lt;/strong&gt; is when you want to extract a local tar file into a specific directory in your Docker image. This is exactly what the Alpine image does with ADD rootfs.tar.gz /.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you’re copying in local files to your Docker image, always use COPY because it’s more explicit.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cmd-vs-entrypoint&#34;&gt;CMD vs. ENTRYPOINT&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Run or execute something when docker starts&lt;/li&gt;
&lt;li&gt;The main purpose of a CMD is to provide defaults for an executing container&lt;/li&gt;
&lt;li&gt;An ENTRYPOINT helps you to configure a container that you can run as an executable&lt;/li&gt;
&lt;li&gt;CMD can be overridden, The ENTRYPOINT instruction works very similarly to CMD in that it is used to specify the command executed when the container is started. However, where it differs is that ENTRYPOINT doesn’t allow you to override the command.&lt;/li&gt;
&lt;li&gt;CMD will be overridden by the ‘docker run …….’ command line, ENTRYPOINT just gets the parameter from ‘docker run …….’ command line&lt;/li&gt;
&lt;li&gt;One important thing to call out about the ENTRYPOINT instruction is that syntax is critical. Technically, ENTRYPOINT supports both the ENTRYPOINT [&amp;ldquo;command&amp;rdquo;] syntax and the ENTRYPOINT command syntax. However, while both of these are supported, they have two different meanings and change how ENTRYPOINT works.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cmd-and-entrypoint-syntax&#34;&gt;CMD and ENTRYPOINT syntax&lt;/h3&gt;
&lt;p&gt;Both CMD and ENTRYPOINT are straight forward but they have a hidden, err, &amp;ldquo;feature&amp;rdquo; that can cause issues if you are not aware. Two different syntaxes are supported for these instructions.&lt;/p&gt;
&lt;p&gt;CMD /bin/echo&lt;br&gt;
or&lt;br&gt;
CMD [&amp;quot;/bin/echo&amp;rdquo;]&lt;br&gt;
This may not look like it would be an issues but the devil in the details will trip you up. If you use the second syntax where the CMD ( or ENTRYPOINT ) is an array, it acts exactly like you would expect. If you use the first syntax without the array, docker pre-pends /bin/sh -c to your command. This has always been in docker as far as I can remember.&lt;/p&gt;
&lt;p&gt;Pre-pending /bin/sh -c can cause some unexpected issues and functionality that is not easily understood if you did not know that docker modified your CMD. Therefore, you should always use the array syntax for both instructions because both will be executed exactly how you intended.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Always use the array syntax when using CMD and ENTRYPOINT.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;docker-commands&#34;&gt;Docker commands&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;docker build&lt;/li&gt;
&lt;li&gt;docker pull&lt;/li&gt;
&lt;li&gt;docker push&lt;/li&gt;
&lt;li&gt;docker images …&lt;/li&gt;
&lt;li&gt;docker commit&lt;/li&gt;
&lt;li&gt;docker exec -it&lt;/li&gt;
&lt;li&gt;docker run -it&lt;/li&gt;
&lt;li&gt;docker system
&lt;ul&gt;
&lt;li&gt;df&lt;/li&gt;
&lt;li&gt;events&lt;/li&gt;
&lt;li&gt;info&lt;/li&gt;
&lt;li&gt;prune&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;docker ps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./docker-commands.png&#34; alt=&#34;docker-commands&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;docker-instructions-in-dockerfile&#34;&gt;Docker instructions in dockerfile&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ENV&lt;/li&gt;
&lt;li&gt;RUN&lt;/li&gt;
&lt;li&gt;CMD&lt;/li&gt;
&lt;li&gt;ENTRYPOINT&lt;/li&gt;
&lt;li&gt;COPY&lt;/li&gt;
&lt;li&gt;ADD&lt;/li&gt;
&lt;li&gt;USER&lt;/li&gt;
&lt;li&gt;WORKDIR&lt;/li&gt;
&lt;li&gt;ARG&lt;/li&gt;
&lt;li&gt;EXPOSE&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dockerfile-best-practices&#34;&gt;Dockerfile Best Practices&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Best practices for writing Dockerfiles&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.docker.com/blog/intro-guide-to-dockerfile-best-practices/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Intro Guide to Dockerfile Best Practices&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://docs.docker.com/develop/dev-best-practices/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker development best practices&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://engineering.bitnami.com/articles/best-practices-writing-a-dockerfile.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Best practices writing a Dockerfile&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://nickjanetakis.com/blog/docker-tip-2-the-difference-between-copy-and-add-in-a-dockerile&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Difference between COPY and ADD in a Dockerfile&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Whatis Locate Which Whereis</title>
      <link>/linux/whatis-locate-which-whereis/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/linux/whatis-locate-which-whereis/</guid>
      <description>&lt;h2 id=&#34;whatis-locate-which-whereis&#34;&gt;Whatis Locate Which Whereis&lt;/h2&gt;
&lt;h3 id=&#34;whatis&#34;&gt;Whatis&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;hongwei@840-g5:~$ whatis whatis
whatis (1)           - display one-line manual page descriptions
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;locate&#34;&gt;Locate&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;hongwei@840-g5:~$ whatis locate
locate (1)           - find files by name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;locate&lt;/strong&gt; indeed finds all the files that have the pattern specified anywhere in their paths. You can tell it to only find files and directories whose names (rather than full paths) include the pattern with the &lt;strong&gt;-b&lt;/strong&gt; option, which is usually what you want, and gives a less unwieldy list.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;locate&lt;/strong&gt; is fast because it uses a binary database that gets periodically updated (once daily, by cron). You can update it yourself to ensure recently added files are found by running &lt;strong&gt;sudo updatedb&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;One more thing about locate - &lt;strong&gt;it doesn&amp;rsquo;t care whether files still exist or not&lt;/strong&gt;, so to avoid finding recently deleted files, use -e. Often I also pipe to less as the list can be long. Typically I do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo updatedb &amp;amp;&amp;amp; locate -b -e psql | less
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;which&#34;&gt;Which&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;hongwei@840-g5:~$ whatis which
which (1)            - locate a command
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;which&lt;/strong&gt; finds the binary executable of the program (if it is in your PATH)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;which&lt;/strong&gt; returns the  pathnames of the files (or links) which would be executed in the current environment, had its arguments been given as commands in a strictly POSIX-conformant shell.  It does this by searching the &lt;strong&gt;PATH&lt;/strong&gt; for executable files matching the names of the arguments. It does not canonicalize path names.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hongwei@840-g5:~$ which psql
/usr/bin/psql
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;whereis&#34;&gt;Whereis&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;hongwei@840-g5:~$ whatis whereis
whereis (1)          - locate the binary, source, and manual page files for a command
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;whereis&lt;/strong&gt; finds the binary, the source, and the man page files for a program.&lt;br&gt;
&lt;strong&gt;whereis&lt;/strong&gt; locates the binary, source and manual files for the specified command names.&lt;br&gt;
&lt;strong&gt;whereis&lt;/strong&gt; attempts to locate the desired program in the standard Linux places, and in the places specified by &lt;strong&gt;$PATH&lt;/strong&gt; and &lt;strong&gt;$MANPATH&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hongwei@840-g5:~$ whereis psql
psql: /usr/bin/psql /usr/share/man/man1/psql.1.gz
hongwei@840-g5:~$ whereis postgresql
postgresql: /usr/lib/postgresql /etc/postgresql /usr/share/postgresql
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://askubuntu.com/questions/799776/what-is-the-difference-between-locate-whereis-which&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What is the difference between locate/whereis/which&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Set Up MySQL Cluster</title>
      <link>/linux/set-up-mysql-master-slave-cluster/</link>
      <pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/linux/set-up-mysql-master-slave-cluster/</guid>
      <description>&lt;p&gt;This document preassumes that you are familiar with VirtualBox, Vagrant on Linux.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;VirtualBox&lt;/li&gt;
&lt;li&gt;Vagrant&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-to-build&#34;&gt;What to Build&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;3 Virtual Machines&lt;/li&gt;
&lt;li&gt;3 MySQL instances running on the 3 VMs&lt;/li&gt;
&lt;li&gt;Employees Sample Database&lt;/li&gt;
&lt;li&gt;Data replication&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ip-settings&#34;&gt;IP Settings&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Master  - 192.168.0.201&lt;/li&gt;
&lt;li&gt;Slave-1 - 192.168.0.202&lt;/li&gt;
&lt;li&gt;Slave-2 - 192.168.0.203&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vagrantfiles&#34;&gt;Vagrantfiles&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;./Vagrantfile-master&#34;&gt;Vagrantfile-Master&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;./Vagrantfile-slave-1&#34;&gt;Vagrantfile-Slave-1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;./Vagrantfile-slave-2&#34;&gt;Vagrantfile-Slave-2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;steps&#34;&gt;Steps&lt;/h2&gt;
&lt;h3 id=&#34;boot-up-virtual-machines&#34;&gt;Boot up Virtual Machines&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use &amp;lsquo;vagrant up&amp;rsquo; to boot up 3 virtual machines.&lt;/li&gt;
&lt;li&gt;Use &amp;lsquo;vagrant halt&amp;rsquo; to power off the VMs&lt;/li&gt;
&lt;li&gt;Open VirtualBox GUI and change the MAC addresses of the 3 VMs&lt;br&gt;
Make sure the 3 VMs have different MAC addresses&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;install-mysql-server&#34;&gt;Install MySQL Server&lt;/h3&gt;
&lt;p&gt;Install MySQL server on the 3 VMs separately.&lt;br&gt;
The guide 
&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-centos-8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How To Install MySQL on CentOS 8&lt;/a&gt; can be referenced.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo dnf install mysql-server
sudo systemctl start mysqld.service
sudo systemctl status mysqld
sudo systemctl enable mysqld
sudo mysql_secure_installation
mysqladmin -u root -p version
mysql -u root -p
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;configure-mysql-server-on-master-vm&#34;&gt;Configure MySQL Server on Master VM&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Edit MySQL configuration file &amp;lsquo;/etc/my.cnf&amp;rsquo;. Add the below configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;[mysqld]&lt;br&gt;
log-bin=mysql-bin # Optinal&lt;br&gt;
server-id=1　　　　# Must&lt;/p&gt;
&lt;p&gt;bind-address = 0.0.0.0 # Must&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;./config-master.png&#34; alt=&#34;config-master&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Restart MySQL server service&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;System command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo systemctl restart mysqld
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Create user for syncing data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MySQL commands:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CREATE USER &#39;repl&#39;@&#39;192.168.0.%&#39; IDENTIFIED BY &#39;123456&#39;;  
GRANT REPLICATION SLAVE ON *.* TO &#39;repl&#39;@&#39;192.168.0.%&#39;;  
FLUSH PRIVILEGES;  
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Check master status&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./master-status.png&#34; alt=&#34;master-status&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;configure-mysql-server-on-slave-vm&#34;&gt;Configure MySQL Server on Slave VM&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Edit MySQL configuration file &amp;lsquo;/etc/my.cnf&amp;rsquo;. Add the below configuration.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;[mysqld]&lt;br&gt;
server-id=2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;./config-slave-1.png&#34; alt=&#34;config-slave-1&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Restart MySQL server service&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;System command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo systemctl restart mysqld
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Configure syncronization&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MySQL command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;change master to master_host=&#39;192.168.0.201&#39;, master_user=&#39;repl&#39;, master_password=&#39;123456&#39;, master_log_file=&#39;mysql-bin.000001&#39;, master_log_pos=155;

start slave;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./sync-config-slave-1.png&#34; alt=&#34;sync-config-slave-1&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check slave status&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both &lt;strong&gt;Slave_IO_Running&lt;/strong&gt; and &lt;strong&gt;Slave_SQL_Running&lt;/strong&gt; should be &amp;lsquo;&lt;strong&gt;Yes&lt;/strong&gt;&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./slave-1-status.png&#34; alt=&#34;slave-1-status&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Same configuration and steps on Slave-2 VM, except the &lt;strong&gt;server-id=3&lt;/strong&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;import-the-employees-sample-database&#34;&gt;Import the &amp;lsquo;Employees Sample Database&amp;rsquo;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Sync folder&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Note that when you vagrant ssh into your machine, you&amp;rsquo;re in /home/vagrant. /home/vagrant is a different directory from the synced /vagrant directory.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;./sync-folder.png&#34; alt=&#34;sync-folder&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    By default, Vagrant only syncs the folders on &lt;strong&gt;vagrant up&lt;/strong&gt; or &lt;strong&gt;vagrant reload&lt;/strong&gt;.&lt;br&gt;
The tool &lt;strong&gt;rsync&lt;/strong&gt; can be used for data syncronization.
  &lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Download the &amp;lsquo;Employees Sample Database&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Download the zip file from 
&lt;a href=&#34;https://github.com/datacharmer/test_db&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Employees DB on GitHub&lt;/a&gt;, unzip the file and put the unzipped folder into the master VM folder of the host machine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./database-folder.png&#34; alt=&#34;database-folder&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reload the master VM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here we use the simple way, just reload the master VM.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Import the database&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On master VM:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd test_db-master/
mysql -u root -p -t &amp;lt; employees.sql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./import-result.png&#34; alt=&#34;import-result&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Validating the Employee Data&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;time mysql -u root -p -t &amp;lt; test_employees_sha.sql&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./validating-result.png&#34; alt=&#34;validating-result&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check data on slaves&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you can see all the data has been replicated on the slave servers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./data-synced-1.png&#34; alt=&#34;data-synced-1&#34;&gt;
&lt;img src=&#34;./data-synced-2.png&#34; alt=&#34;data-synced-2&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;errors&#34;&gt;Errors&lt;/h3&gt;
&lt;h4 id=&#34;slave_io_running-no&#34;&gt;Slave_IO_Running: No&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;./Slave_IO_Running-error.png&#34; alt=&#34;Slave_IO_Running-error&#34;&gt;&lt;/p&gt;
&lt;p&gt;Possible reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Forget to restart mysqld service&lt;/li&gt;
&lt;li&gt;Forget to bind address.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Solution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Restart mysqld service&lt;/li&gt;
&lt;li&gt;Use netstat to check the status, i.e.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./Slave_IO_Running-solution.png&#34; alt=&#34;Slave_IO_Running-solution&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.vagrantup.com/intro/getting-started/synced_folders&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Synced Folders&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-centos-8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How To Install MySQL on CentOS 8&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://dev.mysql.com/doc/employee/en/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Employees Sample Database&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.cnblogs.com/cjsblog/p/9706370.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MySQL Cluster COnfiguration&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/17666249/how-do-i-import-an-sql-file-using-the-command-line-in-mysql&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How To Import SQL File&lt;/a&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Upgrade to VirtualBox 6.1 and Vagrant 2.9.9 on Ubuntu 18.04</title>
      <link>/linux/ubuntu-18.04-upgrade-virtualbox-vagrant/</link>
      <pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/linux/ubuntu-18.04-upgrade-virtualbox-vagrant/</guid>
      <description>&lt;p&gt;I needed to set up a development environment for this week&amp;rsquo;s IETF code sprint. As this was a very short term project, I would like to
set up the environment in a VM. Instead of downloading Linux image, install it on VirtualBox or KVM, Vagrant is handy to use, particularly
for development environment. I was thinking to get some new exeperience. Then CentOS 8 came up, as I have been using CentOS 7, but no
CentOS 8 experience. And also I wanted the environment with GUI, so that I dould test my code on the VM directly.&lt;/p&gt;
&lt;h3 id=&#34;why-to-upgrade-virtualbox-and-vagrant&#34;&gt;Why to upgrade VirtualBox and Vagrant&lt;/h3&gt;
&lt;p&gt;I had VirtualBox and Vagrant on my machine(Ubuntu 18.04). So it was straight forward to boot up CentOS 8 by changing the Vagrantfile.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;# -*- mode: ruby -*-&lt;br&gt;
# vi: set ft=ruby :&lt;/p&gt;
&lt;p&gt;Vagrant.configure(&amp;ldquo;2&amp;rdquo;) do |config|&lt;br&gt;
     config.vm.box = &amp;ldquo;centos/8&amp;rdquo;&lt;br&gt;
     config.vm.box_check_update = false&lt;br&gt;
     config.vm.hostname = &amp;ldquo;centos8&amp;rdquo;&lt;br&gt;
     config.vm.provider &amp;ldquo;virtualbox&amp;rdquo; do |vb|&lt;br&gt;
     # Display the VirtualBox GUI when booting the machine&lt;br&gt;
           vb.gui = true&lt;br&gt;
           vb.memory = &amp;ldquo;4096&amp;rdquo;&lt;br&gt;
           vb.cpus = 4&lt;br&gt;
     end&lt;br&gt;
end&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;a href=&#34;./Vagrantfile&#34;&gt;Vagrantfile&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Vagrant up&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I could &lt;strong&gt;vagrant ssh&lt;/strong&gt; to the VM and there was terminal on VirtualBox console. Everything worked well until the GUI was installed and started.
I &lt;strong&gt;could not&lt;/strong&gt; get into the GUI of CentOS.&lt;br&gt;
I guessed to upgrade the VirtualBox might resolve the issue, because I had VirtualBox 5.2. The latest version of VirtualBox is 6.1. So I started upgrading VirutalBox.&lt;/p&gt;
&lt;h3 id=&#34;upgrade-virtualbox-61&#34;&gt;Upgrade VirtualBox 6.1&lt;/h3&gt;
&lt;p&gt;To install the latest version of VirtualBox, the usual way is to download the .DEB binary package simply from

&lt;a href=&#34;https://www.virtualbox.org/wiki/Linux_Downloads&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VirtualBox downloads page&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget https://download.virtualbox.org/virtualbox/6.1.12/virtualbox-6.1_6.1.12-139181~Ubuntu~bionic_amd64.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install the package by dpkg&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dpkg -i virtualbox-6.1_6.1.12-139181~Ubuntu~bionic_amd64.deb
sudo apt install -f
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or apt&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install ./virtualbox-6.1_6.1.12-139181~Ubuntu~bionic_amd64.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;upgrade-vagrant-299&#34;&gt;Upgrade Vagrant 2.9.9&lt;/h3&gt;
&lt;p&gt;To support VirtualBox 6.1, I also have to upgrade Vagrant to 2.9.9. Again download the DEB package from  Vagrant release website and install with dpkg or apt.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -O https://releases.hashicorp.com/vagrant/2.2.9/vagrant_2.2.9_x86_64.deb
sudo apt install ./vagrant_2.2.9_x86_64.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To verify that the installation was successful, run the following command which prints the Vagrant version:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vagrant --version 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;install-virtualbox-dkms&#34;&gt;Install Virtualbox-dkms&lt;/h3&gt;
&lt;p&gt;When VirtualBox is upgraded, the old virtual machines might fail to open. Some error information like below:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Failed to open a session for the virtual machine xxxxxxx.&lt;/p&gt;
&lt;p&gt;The VM session was closed before any attempt to power it on.&lt;/p&gt;
&lt;p&gt;Result Code: NS_ERROR_FAILURE (0x80004005)&lt;br&gt;
Component: SessionMachine&lt;br&gt;
Interface: ISession {7844aa05-b02e-4cdd-a04f-ade4a762e6b7}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Even running the command &amp;lsquo;sudo /sbin/vboxconfig&amp;rsquo; can&amp;rsquo;t resolve the issue. the dkms package needs to be reinstalled.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dpkg -l | grep virtualbox-dkms
sudo apt-get purge virtualbox-dkms &amp;amp;&amp;amp; sudo apt-get install dkms
sudo /sbin/vboxconfig
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;install-virtualbox-extension-pack&#34;&gt;Install VirtualBox Extension Pack&lt;/h3&gt;
&lt;p&gt;After the Vagrant and VirtualBox had been upgraded, unfortunately I still couldn&amp;rsquo;t make the CentOS 8 GUI working, even though
I tried all the options of &amp;lsquo;Graphics Controller&amp;rsquo;. When I tried to connect the VM by RDP, I got an error message of no
VirtualBox Extension Pack. Here is the step to install the VirtualBox Extension Pack.&lt;/p&gt;
&lt;h4 id=&#34;step-1&#34;&gt;Step 1&lt;/h4&gt;
&lt;p&gt;Go to the 
&lt;a href=&#34;https://www.virtualbox.org/wiki/Downloads&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;virtualbox official website&lt;/a&gt; and download the package.&lt;/p&gt;
&lt;h4 id=&#34;step-2&#34;&gt;Step 2&lt;/h4&gt;
&lt;p&gt;Double click the file, such as&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Oracle_VM_VirtualBox_Extension_Pack-6.1.12&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;then follow the wizard to install.&lt;/p&gt;
&lt;p&gt;Unfortunately the RDP did not show me the desktop successfully either.&lt;/p&gt;
&lt;h3 id=&#34;install-vagrant-plugin-vagrant-libvirt&#34;&gt;Install Vagrant Plugin vagrant-libvirt&lt;/h3&gt;
&lt;p&gt;As I couldn&amp;rsquo;t make the CentOS 8 GUI working on VirtualBox with Vagrant, then I moved to Libvirt with Vagrant.
But When I did &amp;lsquo;vagrant up&amp;rsquo;, got the below error.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./libvirt-not-found.png&#34; alt=&#34;libvirt-not-found&#34;&gt;&lt;/p&gt;
&lt;p&gt;It seemed that the libvirt plugin was not installed, because I installed Vagrant by DEB package, not apt.
To install Vagrant Plugin vagrant-libvert, please follow the

&lt;a href=&#34;https://github.com/vagrant-libvirt/vagrant-libvirt#installation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vagrant Libvirt Provider&lt;/a&gt;
on GitHub.&lt;/p&gt;
&lt;h4 id=&#34;step-1-1&#34;&gt;Step 1&lt;/h4&gt;
&lt;p&gt;The packages for building needs to be installed.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt-get build-dep vagrant ruby-libvirt  
apt-get install qemu libvirt-bin ebtables dnsmasq-base  
apt-get install libxslt-dev libxml2-dev libvirt-dev zlib1g-dev ruby-dev  
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;step-2-1&#34;&gt;Step 2&lt;/h4&gt;
&lt;p&gt;Install the plugin.
vagrant plugin install vagrant-libvirt&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./install-vagrant-libvirt.png&#34; alt=&#34;install-vagrant-libvirt&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;non-exist-box-error&#34;&gt;Non-exist Box Error&lt;/h3&gt;
&lt;p&gt;I even tried some pre-built box with GUI, but the box was gone when I used the new version Vagrant.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./nonexist-box.png&#34; alt=&#34;nonexist-box&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;terminal-mode&#34;&gt;Terminal Mode&lt;/h3&gt;
&lt;div class=&#34;alert alert-warning&#34;&gt;
  &lt;div&gt;
    Bad news - I have not made the CentOS 8 GUI working on VM through Vagrant with either VirtualBox or Libvirt.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The pictures below show the successful terminal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./successful-vagrant-up.png&#34; alt=&#34;successful-vagrant-up&#34;&gt;
&lt;img src=&#34;./vagrant-ssh.png&#34; alt=&#34;vagrant-ssh&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The username and password for console are vagrant and vagrant.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;./username-password-vagrant.png&#34; alt=&#34;username-password-vagrant&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://linuxize.com/post/how-to-install-vagrant-on-ubuntu-18-04/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to Install Vagrant on Ubuntu 18.04&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.golinuxcloud.com/install-gnome-enable-gui-mode-rhel-centos-8/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Install GNOME | How to enable GUI mode | RHEL CentOS 8&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.techrepublic.com/article/how-to-install-a-gui-on-top-of-centos-7/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to install a GUI on top of CentOS 7&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://computingforgeeks.com/run-centos-8-vm-using-vagrant-on-kvm-virtualbox-vmware-parallels/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Run CentOS 8 VM using Vagrant on KVM / VirtualBox / VMWare / Parallels&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Ubuntu 18.04 System Python 3 Upgrade</title>
      <link>/linux/ubuntu-18.04-system-python-3-upgrade/</link>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/linux/ubuntu-18.04-system-python-3-upgrade/</guid>
      <description>&lt;h3 id=&#34;symptom&#34;&gt;Symptom&lt;/h3&gt;
&lt;p&gt;After the upgrade from Python 3.6 to Python 3.8:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ubuntu Software Center not working&lt;/li&gt;
&lt;li&gt;Can&amp;rsquo;t start terminal by Ctl+Alt+t&lt;/li&gt;
&lt;li&gt;Can&amp;rsquo;t start terminal or software&lt;/li&gt;
&lt;li&gt;Error Message - A problem occured when checking for the updates&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;root-cause&#34;&gt;Root cause&lt;/h3&gt;
&lt;p&gt;After the Python 3 upgrade, I changed the Update-alternatives configuration. Fortunately I remembered it!&lt;/p&gt;
&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;
&lt;p&gt;Start terminal in right click menu and change back to the original configuration of update-alternatives, as below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./update-alternatives-config.png&#34; alt=&#34;update-alternatives-config&#34;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
  </channel>
</rss>
