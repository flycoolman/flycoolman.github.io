<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SRE | flycoolman</title>
    <link>/category/sre/</link>
      <atom:link href="/category/sre/index.xml" rel="self" type="application/rss+xml" />
    <description>SRE</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>©2020 flycoolman.com All Rights Reserved</copyright><lastBuildDate>Thu, 01 Oct 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu42a5118afc49636e6fda7ce5d4b48056_3366_512x512_fill_lanczos_center_2.png</url>
      <title>SRE</title>
      <link>/category/sre/</link>
    </image>
    
    <item>
      <title>Kubernetes Best Practices</title>
      <link>/devops/kubernetes-best-practices/</link>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
      <guid>/devops/kubernetes-best-practices/</guid>
      <description>&lt;h2 id=&#34;kubernetes-best-practices&#34;&gt;Kubernetes Best Practices&lt;/h2&gt;
&lt;h3 id=&#34;best-practices-for-image-management&#34;&gt;Best Practices for Image Management&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Build your images you base them on only well-known and trusted image providers.&lt;/li&gt;
&lt;li&gt;Some combination of the semantic version and the SHA hash of the commit where the image was built is a good practice for naming images (e.g., v1.0.1-bfeda01f).&lt;/li&gt;
&lt;li&gt;It is a bad idea for production usage because latest is clearly being mutated every time a new image is built.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;deploying-services-best-practices&#34;&gt;Deploying Services Best Practices&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Most services should be deployed as &lt;strong&gt;Deployment resources&lt;/strong&gt;. Deployments create identical replicas for redundancy and scale.&lt;/li&gt;
&lt;li&gt;Deployments can be exposed using a Service, which is effectively a load balancer. A Service can be exposed either within a cluster (the default) or externally. If you want to expose an HTTP application, you can use an Ingress controller to add things like request routing and SSL.&lt;/li&gt;
&lt;li&gt;Eventually you will want to &lt;strong&gt;parameterize&lt;/strong&gt; your application to make its configuration more reusable in different environments. Packaging tools like 
&lt;a href=&#34;https://helm.sh/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Helm&lt;/a&gt; are the best choice for this kind of parameterization.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;setting-up-a-development-environment-best-practices&#34;&gt;Setting Up a Development Environment Best Practices&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Think about developer experience in three phases: onboarding, developing, and testing. Make sure that the development environment you build supports all three of these phases.&lt;/li&gt;
&lt;li&gt;When building a development cluster, you can choose between one large cluster and a cluster per developer. There are pros and cons to each, but generally a single large cluster is a better approach.&lt;/li&gt;
&lt;li&gt;When you add users to a cluster, add them with their own identity and access to their own namespace. Use resource limits to restrict how much of the cluster they can use.&lt;/li&gt;
&lt;li&gt;When managing namespaces, think about how you can reap old, unused resources. Developers will have bad hygiene about deleting unused things. Use automation to clean it up for them.&lt;/li&gt;
&lt;li&gt;Think about cluster-level services like logs and monitoring that you can set up for all users. Sometimes, cluster-level dependencies like databases are also useful to set up on behalf of all users using templates like Helm charts.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;best-practices-for-monitoring-logging-and-alerting&#34;&gt;Best Practices for Monitoring, Logging, and Alerting&lt;/h3&gt;
&lt;p&gt;Following are the best practices that you should adopt regarding monitoring, logging, and alerting.&lt;/p&gt;
&lt;h4 id=&#34;monitoring&#34;&gt;Monitoring&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Monitor nodes and all Kubernetes components for utilization, saturation, and error rates, and monitor applications for rate, errors, and duration.&lt;/li&gt;
&lt;li&gt;Use black-box monitoring to monitor for symptoms and not predictive health of a system.&lt;/li&gt;
&lt;li&gt;Use white-box monitoring to inspect the system and its internals with instrumentation.&lt;/li&gt;
&lt;li&gt;Implement time-series-based metrics to gain high-precision metrics that also allow you to gain insight within the behavior of your application.&lt;/li&gt;
&lt;li&gt;Utilize monitoring systems like Prometheus that provide key labeling for high dimensionality; this will give a better signal to symptoms of an impacting issue.&lt;/li&gt;
&lt;li&gt;Use average metrics to visualize subtotals and metrics based on factual data. Utilize sum metrics to visualize the distribution across a specific metric.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;logging&#34;&gt;Logging&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;You should use logging in combination with metrics monitoring to get the full picture of how your environment is operating.&lt;/li&gt;
&lt;li&gt;Be cautious of storing logs for more than 30 to 45 days and, if needed, use cheaper resources for long-term archiving.&lt;/li&gt;
&lt;li&gt;Limit usage of log forwarders in a sidecar pattern, as they will utilize a lot more resources. Opt for using a DaemonSet for the log forwarder and sending logs to STDOUT.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;alerting&#34;&gt;Alerting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Be cautious of alert fatigue because it can lead to bad behaviors in people and processes.&lt;/li&gt;
&lt;li&gt;Always look at incrementally improving upon alerting and accept that it will not always be perfect.&lt;/li&gt;
&lt;li&gt;Alert for symptoms that affect your SLO and customers and not for transient issues that don’t need immediate human attention.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;It’s a good practice to monitor your cluster from a “utility cluster” to avoid a production issue also affecting your monitoring system.&lt;/li&gt;
&lt;li&gt;Black-box monitoring gives you symptoms.&lt;/li&gt;
&lt;li&gt;White-box monitoring gives you &amp;ldquo;Why&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;USE&lt;/strong&gt; and &lt;strong&gt;RED&lt;/strong&gt; methods are complementary to each other given that the USE method focuses on the infrastructure components and the RED method focuses on monitoring the end-user experience for the application.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cAdvisor&lt;/strong&gt; and &lt;strong&gt;metrics server&lt;/strong&gt; are used to provide detailed metrics on resource usage, &lt;strong&gt;kube-state-metrics&lt;/strong&gt; is focused on identifying conditions on Kubernetes objects deployed to your cluster.&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;best-practices-for-configmaps-and-secrets&#34;&gt;Best Practices for ConfigMaps and Secrets&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;To support dynamic changes to your application without having to redeploy new versions of the pods, mount your ConfigMaps/Secrets as a volume and configure your application with a file watcher to detect the changed file data and reconfigure itself as needed.&lt;/li&gt;
&lt;li&gt;ConfigMap/Secrets must exist in the namespace for the pods that will consume them prior to the pod being deployed. The optional flag can be used to prevent the pods from not starting if the ConfigMap/Secret is not present.&lt;/li&gt;
&lt;li&gt;Use an admission controller to ensure specific configuration data or to prevent deployments that do not have specific configuration values set. An example would be if you require all production Java workloads to have certain JVM properties set in production environments. There is an alpha API called PodPresets that will allow ConfigMaps and secrets to be applied to all pods based on an annotation, without needing to write a custom admission controller.&lt;/li&gt;
&lt;li&gt;If you’re using Helm to release applications into your environment, you can use a life cycle hook to ensure the ConfigMap/Secret template is deployed before the Deployment is applied.&lt;/li&gt;
&lt;li&gt;Some applications require their configuration to be applied as a single file such as a JSON or YAML file. ConfigMap/Secrets allows an entire block of raw data by using the | symbol.&lt;/li&gt;
&lt;li&gt;If the application uses system environment variables to determine its configuration, you can use the injection of the ConfigMap data to create an environment variable mapping into the pod. There are two main ways to do this: mounting every key/value pair in the ConfigMap as a series of environment variables into the pod using envFrom and then using configMapRef or secretRef, or assigning individual keys with their respective values using the configMapKeyRef or secretKeyRef.&lt;/li&gt;
&lt;li&gt;If you’re using the configMapKeyRef or secretKeyRef method, be aware that if the actual key does not exist, this will prevent the pod from starting.&lt;/li&gt;
&lt;li&gt;If you’re loading all of the key/value pairs from the ConfigMap/Secret into the pod using envFrom, any keys that are considered invalid environment values will be skipped; however, the pod will be allowed to start. The event for the pod will have an event with reason InvalidVariableNames and the appropriate message about which key was skipped. The following code is an example of a Deployment with a ConfigMap and Secret reference as an environment variable&lt;/li&gt;
&lt;li&gt;If there is a need to pass command-line arguments to your containers, environment variable data can be sourced using $(ENV_KEY) interpolation syntax.&lt;/li&gt;
&lt;li&gt;When consuming ConfigMap/Secret data as environment variables, it is very important to understand that updates to the data in the ConfigMap/Secret will not update in the pod and will require a pod restart either through deleting the pods and letting the ReplicaSet controller create a new pod, or triggering a Deployment update, which will follow the proper application update strategy as declared in the Deployment specification.&lt;/li&gt;
&lt;li&gt;It is easier to assume that all changes to a ConfigMap/Secret require an update to the entire deployment; this ensures that even if you’re using environment variables or volumes, the code will take the new configuration data. To make this easier, you can use a CI/CD pipeline to update the name property of the ConfigMap/Secret and also update the reference in the deployment, which will then trigger an update through normal Kubernetes update strategies of your deployment. We will explore this in the following example code. If you’re using Helm to release your application code into Kubernetes, you can take advantage of an annotation in the Deployment template to check the sha256 checksum of the ConfigMap/Secret. This triggers Helm to update the Deployment using the helm upgrade command when the data within a ConfigMap/Secret is changed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;best-practices-specific-to-secrets&#34;&gt;Best Practices Specific to Secrets&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Use 3rd party solutions to allow the use of external storage systems for secret data, such as HashiCorp Vault, Aqua Security, Twistlock, AWS Secrets Manager, Google Cloud KMS, or Azure Key Vault&lt;/li&gt;
&lt;li&gt;Assign an imagePullSecrets to a serviceaccount that the pod will use to automatically mount the secret without having to declare it in the pod.spec.&lt;/li&gt;
&lt;li&gt;Use CI/CD capabilities to get secrets from a secure vault or encrypted store with a Hardware Security Module (HSM) during the release pipeline.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;rbac-best-practices&#34;&gt;RBAC Best Practices&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Applications that are developed to run in Kubernetes rarely ever need an RBAC role and role binding associated to it. Only if the application code actually interacts directly with the Kubernetes API directly does the application require RBAC configuration.&lt;/li&gt;
&lt;li&gt;If the application does need to directly access the Kubernetes API to perhaps change configuration depending on endpoints being added to a service, or if it needs to list all of the pods in a specific namespace, the best practice is to create a new service account that is then specified in the pod specification. Then, create a role that has the least amount of privileges needed to accomplish its goal.&lt;/li&gt;
&lt;li&gt;Use an OpenID Connect service that enables identity management and, if needed, two-factor authentication. This will allow for a higher level of identity authentication. Map user groups to roles that have the least amount of privileges needed to accomplish the job.&lt;/li&gt;
&lt;li&gt;Along with the aforementioned practice, you should use Just in Time (JIT) access systems to allow site reliability engineers (SREs), operators, and those who might need to have escalated privileges for a short period of time to accomplish a very specific task. Alternatively, these users should have different identities that are more heavily audited for sign-on, and those accounts should have more elevated privileges assigned by the user account or group bound to a role.&lt;/li&gt;
&lt;li&gt;Specific service accounts should be used for CI/CD tools that deploy into your Kubernetes clusters. This ensures for auditability within the cluster and an understanding of who might have deployed or deleted any objects in a cluster.&lt;/li&gt;
&lt;li&gt;Limit any applications that require watch and list on the Secrets API. This basically allows the application or the person who deployed the pod to view the secrets in that namespace. If an application needs to access the Secrets API for specific secrets, limit using get on any specific secrets that the application needs to read outside of those that it is directly assigned.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Service accounts in Kubernetes are different than user accounts in that they are namespace bound, internally stored in Kubernetes; they are meant to represent processes, not people, and are managed by native Kubernetes controllers.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;best-practices-for-cicd&#34;&gt;Best Practices for CI/CD&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;With CI, focus on automation and providing quick builds. Optimizing the build speed will provide developers quick feedback if their changes have broken the build.&lt;/li&gt;
&lt;li&gt;Focus on providing reliable tests in your pipeline. This will give developers rapid feedback on issues with their code. The faster the feedback loop to developers, the more productive they’ll become in their workflow.&lt;/li&gt;
&lt;li&gt;When deciding on CI/CD tools, ensure that the tools allow you to define the pipeline as code. This will allow you to version-control the pipeline with your application code.&lt;/li&gt;
&lt;li&gt;Ensure that you optimize your images so that you can reduce the size of the image and also reduce the attack surface when running the image in production. Multistage Docker builds allow you to remove packages not needed for the application to run. For example, you might need Maven to build the application, but you don’t need it for the actual running image.&lt;/li&gt;
&lt;li&gt;Avoid using “latest” as an image tag, and utilize a tag that can be referenced back to the buildID or Git commit.&lt;/li&gt;
&lt;li&gt;If you are new to CD, utilize Kubernetes rolling upgrades to start out. They are easy to use and will get you comfortable with deployment. As you become more comfortable and confident with CD, look at utilizing blue/green and canary deployment strategies.&lt;/li&gt;
&lt;li&gt;With CD, ensure that you test how client connections and database schema upgrades are handled in your application.&lt;/li&gt;
&lt;li&gt;Testing in production will help you build reliability into your application, and ensure that you have good monitoring in place. With testing in production, also start at a small scale and limit the blast radius of the experiment.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;build-the-smallest-image&#34;&gt;Build the smallest image&lt;/h4&gt;
&lt;p&gt;Build the smallest image possible for your application:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multistage builds&lt;/li&gt;
&lt;li&gt;Distroless base images&lt;/li&gt;
&lt;li&gt;Optimized base images&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;container-image-tagging&#34;&gt;Container Image Tagging&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;BuildID&lt;/li&gt;
&lt;li&gt;Build System-BuildID&lt;/li&gt;
&lt;li&gt;Git Hash&lt;/li&gt;
&lt;li&gt;Githsah-buildID&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;deployment-strategies&#34;&gt;Deployment Strategies&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Rolling updates&lt;/li&gt;
&lt;li&gt;Blue/green deployments&lt;/li&gt;
&lt;li&gt;Canary deployments&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;including both application code and configuration code, such as a Kubernetes manifest or Helm charts, helps promote good DevOps principles of communication and collaboration. Having both application developers and operation engineers collaborate in a single repository builds confidence in a team to deliver an application to production.&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;./cri.png&#34; alt=&#34;cri.png&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    TBD
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.amazon.com/Kubernetes-Best-Practices-Blueprints-Applications/dp/1492056472/ref=sr_1_3?crid=22K492WLGAPTP&amp;amp;dchild=1&amp;amp;keywords=kubernetes&amp;#43;best&amp;#43;practices&amp;amp;qid=1602558033&amp;amp;sprefix=Kubernetes&amp;#43;Best&amp;#43;Practices%2Caps%2C176&amp;amp;sr=8-3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Best Practices: Blueprints for Building Successful Applications on Kubernetes&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>/devops/docker/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/devops/docker/</guid>
      <description>&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;
&lt;h3 id=&#34;what-is-docker&#34;&gt;What is Docker?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; is basically a container engine which uses the Linux Kernel features like &lt;strong&gt;namespaces&lt;/strong&gt; and &lt;strong&gt;control groups&lt;/strong&gt; to create containers on top of an operating system and automates application deployment on the container. Docker uses &lt;strong&gt;Copy-on-write union file system&lt;/strong&gt; for its &lt;strong&gt;backend storage&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;what-is-the-difference-between-a-docker-container-and-a-docker-image&#34;&gt;What is the difference between a docker container and a docker image?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Docker Image&lt;/strong&gt; is a set of files which has no state, whereas &lt;strong&gt;Docker Container&lt;/strong&gt; is the instantiation of Docker Image. In other words, Docker Container is the &lt;strong&gt;run time instance&lt;/strong&gt; of images.&lt;/p&gt;
&lt;h3 id=&#34;what-is-a-container&#34;&gt;What is a container?&lt;/h3&gt;
&lt;p&gt;In 4 bullet points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Containers share the host kernel&lt;/li&gt;
&lt;li&gt;Containers use the kernel ability to group processes for resource control&lt;/li&gt;
&lt;li&gt;Containers ensure isolation through namespaces&lt;/li&gt;
&lt;li&gt;Containers feel like lightweight VMs (lower footprint, faster), but are not Virtual Machines!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;namespaces-and-cgroups----------------docker&#34;&gt;Namespaces and Cgroups  - - - - - - &amp;gt;  Docker&lt;/h3&gt;
&lt;p&gt;Docker makes use of kernel &lt;strong&gt;namespaces&lt;/strong&gt; to provide the &lt;strong&gt;isolated workspace&lt;/strong&gt; called the container.&lt;br&gt;
Docker also makes use of kernel &lt;strong&gt;control groups&lt;/strong&gt; for resource allocation and isolation.&lt;br&gt;
&lt;img src=&#34;./namespace.png&#34; alt=&#34;namespace&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;container-format&#34;&gt;Container Format&lt;/h3&gt;
&lt;p&gt;Docker Engine combines the &lt;strong&gt;namespaces&lt;/strong&gt;, &lt;strong&gt;control groups&lt;/strong&gt; and &lt;strong&gt;UnionFS&lt;/strong&gt; into a wrapper called a container format. The default container format is &lt;strong&gt;libcontainer&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;types-of-containers&#34;&gt;Types of Containers&lt;/h3&gt;
&lt;p&gt;Given the above constructs, containers may be divided into 3 types as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;System Containers&lt;/strong&gt; share rootfs, PID, network, IPC and UTS with host system but live inside a cgroup.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Application Containers&lt;/strong&gt; live inside a cgroup and use namespaces (PID, network, IPC, chroot) for isolation from host system&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pods&lt;/strong&gt; use namespaces for isolation from host system but create sub groups which share PID, network, IPC and UTS except the rootfs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;images--layers&#34;&gt;Images &amp;amp; Layers&lt;/h3&gt;
&lt;p&gt;Each Docker image references a list of &lt;strong&gt;read-only layers&lt;/strong&gt; that represent filesystem differences. Layers are stacked on top of each other to form a base for a container’s rootfs.&lt;br&gt;
One big innovation of the Docker engine was the concept of leveraging Copy-On-Write file systems to significantly speed up the preparation of the rootfs.&lt;/p&gt;
&lt;h3 id=&#34;copy-on-write&#34;&gt;Copy-On-Write&lt;/h3&gt;
&lt;p&gt;When &lt;strong&gt;Docker&lt;/strong&gt; creates a container, it &lt;strong&gt;adds a new, thin, writable layer&lt;/strong&gt; on top of the underlying stack of image layers. This layer is often called the “container layer”.&lt;br&gt;
All changes made to the running container - such as writing new files, modifying existing files, and deleting files - are written to this thin writable container layer.&lt;/p&gt;
&lt;h3 id=&#34;union-file-systems&#34;&gt;Union File Systems&lt;/h3&gt;
&lt;p&gt;Union File Systems provide the following features for storage:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Layering&lt;/li&gt;
&lt;li&gt;Copy-On-Write&lt;/li&gt;
&lt;li&gt;Caching&lt;/li&gt;
&lt;li&gt;Diffing&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dangling-images&#34;&gt;Dangling images&lt;/h3&gt;
&lt;p&gt;Docker images consist of multiple layers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dangling images&lt;/strong&gt; are layers that have no relationship to any tagged images.&lt;/li&gt;
&lt;li&gt;They no longer serve a purpose and consume disk space.&lt;/li&gt;
&lt;li&gt;They can be located by adding the filter flag, &lt;strong&gt;-f&lt;/strong&gt; with a value of &lt;strong&gt;dangling=true&lt;/strong&gt; to the docker images command.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Another description:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An unused image means that it has not been assigned or used in a container. For example, when running docker ps -a - it will list all of your exited and currently running containers. Any images shown being used inside any of containers are a &amp;ldquo;used image&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;On the other hand, a dangling image just means that you&amp;rsquo;ve created the new build of the image, but it wasn&amp;rsquo;t given a new name. So the old images you have becomes the &amp;ldquo;dangling image&amp;rdquo;. Those old images are the ones that are untagged and displays &amp;ldquo;&lt;none&gt;&amp;rdquo; on its name when you run docker images.&lt;/li&gt;
&lt;li&gt;When running &lt;strong&gt;docker system prune -a&lt;/strong&gt;, it will remove both unused and dangling images. Therefore any images being used in a container, whether they have been exited or currently running, will NOT be affected.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-difference-between-copy-and-add-in-a-dockerfile&#34;&gt;The Difference between COPY and ADD in a Dockerfile&lt;/h3&gt;
&lt;p&gt;Sometimes you see &lt;strong&gt;COPY&lt;/strong&gt; or &lt;strong&gt;ADD&lt;/strong&gt; being used in a Dockerfile, but 99% of the time you should be using &lt;strong&gt;COPY&lt;/strong&gt;, here&amp;rsquo;s why.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;COPY&lt;/strong&gt; and &lt;strong&gt;ADD&lt;/strong&gt; are both Dockerfile instructions that serve similar purposes. They let you copy files from a specific location into a Docker image.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;COPY&lt;/strong&gt; takes in a &lt;strong&gt;src&lt;/strong&gt; and &lt;strong&gt;destination&lt;/strong&gt;. It &lt;strong&gt;only&lt;/strong&gt; lets you copy in a local file or directory from your host (the machine building the Docker image) into the Docker image itself.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;ADD&lt;/strong&gt; lets you do that too, but it also supports &lt;strong&gt;2 other sources&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, you can use a &lt;strong&gt;URL&lt;/strong&gt; instead of a local file / directory.&lt;/li&gt;
&lt;li&gt;Secondly, you can extract a tar file from the source directly into the destination.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In most cases if you’re using a URL, you’re downloading a zip file and are then using the RUN command to extract it. However, you might as well just use RUN with curl instead of ADD here so you chain everything into 1 RUN command to &lt;strong&gt;make a smaller Docker image&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A valid use case for &lt;strong&gt;ADD&lt;/strong&gt; is when you want to extract a local tar file into a specific directory in your Docker image. This is exactly what the Alpine image does with ADD rootfs.tar.gz /.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you’re copying in local files to your Docker image, always use COPY because it’s more explicit.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cmd-vs-entrypoint&#34;&gt;CMD vs. ENTRYPOINT&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Run or execute something when docker starts&lt;/li&gt;
&lt;li&gt;The main purpose of a CMD is to provide defaults for an executing container&lt;/li&gt;
&lt;li&gt;An ENTRYPOINT helps you to configure a container that you can run as an executable&lt;/li&gt;
&lt;li&gt;CMD can be overridden, The ENTRYPOINT instruction works very similarly to CMD in that it is used to specify the command executed when the container is started. However, where it differs is that ENTRYPOINT doesn’t allow you to override the command.&lt;/li&gt;
&lt;li&gt;CMD will be overridden by the ‘docker run …….’ command line, ENTRYPOINT just gets the parameter from ‘docker run …….’ command line&lt;/li&gt;
&lt;li&gt;One important thing to call out about the ENTRYPOINT instruction is that syntax is critical. Technically, ENTRYPOINT supports both the ENTRYPOINT [&amp;ldquo;command&amp;rdquo;] syntax and the ENTRYPOINT command syntax. However, while both of these are supported, they have two different meanings and change how ENTRYPOINT works.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cmd-and-entrypoint-syntax&#34;&gt;CMD and ENTRYPOINT syntax&lt;/h3&gt;
&lt;p&gt;Both CMD and ENTRYPOINT are straight forward but they have a hidden, err, &amp;ldquo;feature&amp;rdquo; that can cause issues if you are not aware. Two different syntaxes are supported for these instructions.&lt;/p&gt;
&lt;p&gt;CMD /bin/echo&lt;br&gt;
or&lt;br&gt;
CMD [&amp;quot;/bin/echo&amp;rdquo;]&lt;br&gt;
This may not look like it would be an issues but the devil in the details will trip you up. If you use the second syntax where the CMD ( or ENTRYPOINT ) is an array, it acts exactly like you would expect. If you use the first syntax without the array, docker pre-pends /bin/sh -c to your command. This has always been in docker as far as I can remember.&lt;/p&gt;
&lt;p&gt;Pre-pending /bin/sh -c can cause some unexpected issues and functionality that is not easily understood if you did not know that docker modified your CMD. Therefore, you should always use the array syntax for both instructions because both will be executed exactly how you intended.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Always use the array syntax when using CMD and ENTRYPOINT.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;docker-commands&#34;&gt;Docker commands&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;docker build&lt;/li&gt;
&lt;li&gt;docker pull&lt;/li&gt;
&lt;li&gt;docker push&lt;/li&gt;
&lt;li&gt;docker images …&lt;/li&gt;
&lt;li&gt;docker commit&lt;/li&gt;
&lt;li&gt;docker exec -it&lt;/li&gt;
&lt;li&gt;docker run -it&lt;/li&gt;
&lt;li&gt;docker system
&lt;ul&gt;
&lt;li&gt;df&lt;/li&gt;
&lt;li&gt;events&lt;/li&gt;
&lt;li&gt;info&lt;/li&gt;
&lt;li&gt;prune&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;docker ps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./docker-commands.png&#34; alt=&#34;docker-commands&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;docker-instructions-in-dockerfile&#34;&gt;Docker instructions in dockerfile&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ENV&lt;/li&gt;
&lt;li&gt;RUN&lt;/li&gt;
&lt;li&gt;CMD&lt;/li&gt;
&lt;li&gt;ENTRYPOINT&lt;/li&gt;
&lt;li&gt;COPY&lt;/li&gt;
&lt;li&gt;ADD&lt;/li&gt;
&lt;li&gt;USER&lt;/li&gt;
&lt;li&gt;WORKDIR&lt;/li&gt;
&lt;li&gt;ARG&lt;/li&gt;
&lt;li&gt;EXPOSE&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dockerfile-best-practices&#34;&gt;Dockerfile Best Practices&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://docs.docker.com/develop/develop-images/dockerfile_best-practices/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Best practices for writing Dockerfiles&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.docker.com/blog/intro-guide-to-dockerfile-best-practices/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Intro Guide to Dockerfile Best Practices&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://docs.docker.com/develop/dev-best-practices/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docker development best practices&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://engineering.bitnami.com/articles/best-practices-writing-a-dockerfile.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Best practices writing a Dockerfile&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://nickjanetakis.com/blog/docker-tip-2-the-difference-between-copy-and-add-in-a-dockerile&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Difference between COPY and ADD in a Dockerfile&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Minikube</title>
      <link>/devops/minikube/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/devops/minikube/</guid>
      <description>&lt;h2 id=&#34;minikube&#34;&gt;Minikube&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Minikube&lt;/strong&gt; is a tool that makes it easy to run Kubernetes locally. Minikube runs a single-node Kubernetes cluster inside a Virtual Machine (VM) on your laptop for users looking to try out Kubernetes or develop with it day-to-day.&lt;/p&gt;
&lt;h3 id=&#34;set-up-minikube&#34;&gt;Set up Minikube&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://minikube.sigs.k8s.io/docs/start/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;minikube start&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;minikube-vm-login&#34;&gt;Minikube VM Login&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;On VM console:&lt;br&gt;
username: root
no password&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;from host terminal:&lt;br&gt;
minikube ssh&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;username+IP on host:&lt;br&gt;
username: docker&lt;br&gt;
password: tcuser&lt;br&gt;
i.e.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh docker@192.168.99.103
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./minikube-login.png&#34; alt=&#34;minikube-login&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh docker@$(minikube ip)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./minikube-login-1.png&#34; alt=&#34;minikube-login-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;Exit the login:
exit&lt;/p&gt;
&lt;h3 id=&#34;setting-a-vm-driver-by-default&#34;&gt;Setting a VM driver by default&lt;/h3&gt;
&lt;p&gt;minikube config set vm-driver virtualbox&lt;/p&gt;
&lt;h3 id=&#34;use-local-images-by-re-using-the-docker-daemon&#34;&gt;Use local images by re-using the Docker daemon&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How To Install and Use Docker on Ubuntu 18.04&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://kubernetes.io/docs/setup/learning-environment/minikube/#use-local-images-by-re-using-the-docker-daemon&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Use local images by re-using the Docker daemon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;eval $(minikube docker-env)&lt;/p&gt;
&lt;h3 id=&#34;commands-for-using-minikube&#34;&gt;Commands for using minikube&lt;/h3&gt;
&lt;p&gt;minikube start&lt;br&gt;
minikube delete&lt;br&gt;
minikube status&lt;/p&gt;
&lt;p&gt;minikube start -p test&lt;br&gt;
minikube delete -p test&lt;br&gt;
&lt;br&gt;
minikube ssh&lt;br&gt;
minikube ssh -p test&lt;br&gt;
minikube ip&lt;br&gt;
minikube dashboard&lt;br&gt;
minikube addons list&lt;br&gt;
&lt;br&gt;
kubectl get pods -A&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://blog.pilosus.org/posts/2019/05/18/minikube-cheat-sheet/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Minikube Cheat Sheet: most helpful commands and features I wish I knew from the start&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;minikube-command-auto-completion&#34;&gt;Minikube command auto completion&lt;/h3&gt;
&lt;p&gt;sudo apt install bash-completion&lt;br&gt;

&lt;a href=&#34;https://www.cyberciti.biz/faq/add-bash-auto-completion-in-ubuntu-linux/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to add bash auto completion in Ubuntu Linux&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/57891054/how-can-i-enable-tab-completion-to-minikube&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How can I enable Tab completion to minikube?&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Kubernetes Notes</title>
      <link>/devops/k8s-notes/</link>
      <pubDate>Tue, 31 Dec 2019 23:59:59 +0000</pubDate>
      <guid>/devops/k8s-notes/</guid>
      <description>&lt;h2 id=&#34;k8s-notes&#34;&gt;K8S NOTES&lt;/h2&gt;
&lt;h3 id=&#34;kubernetes-components&#34;&gt;Kubernetes Components&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cluster
&lt;ul&gt;
&lt;li&gt;A cluster is a set of machines, called nodes, that run containerized applications managed by Kubernetes.&lt;/li&gt;
&lt;li&gt;A cluster has at least one worker node and at least one master node.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Node
&lt;ul&gt;
&lt;li&gt;Master node(s)&lt;br&gt;
The master node(s) manages the worker nodes and the pods in the cluster. Multiple master nodes are used to provide a cluster with failover and high availability.&lt;/li&gt;
&lt;li&gt;Worker node(s)&lt;br&gt;
The worker node(s) host the pods that are the components of the application.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;master-node-components&#34;&gt;Master Node Components&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;kube-apiserver&lt;/li&gt;
&lt;li&gt;etcd&lt;/li&gt;
&lt;li&gt;kube-scheduler&lt;/li&gt;
&lt;li&gt;kube-controller-manager
&lt;ul&gt;
&lt;li&gt;Node Controller&lt;/li&gt;
&lt;li&gt;Replication Controller&lt;/li&gt;
&lt;li&gt;Endpoints Controller&lt;/li&gt;
&lt;li&gt;Service Account &amp;amp; Token Controllers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cloud-controller-manager&lt;br&gt;
The following controllers have cloud provider dependencies:
&lt;ul&gt;
&lt;li&gt;Node Controller&lt;/li&gt;
&lt;li&gt;Route Controller&lt;/li&gt;
&lt;li&gt;Service Controller&lt;/li&gt;
&lt;li&gt;Volume Controller&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;worker-node-components&#34;&gt;Worker Node Components&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Kubelet&lt;/li&gt;
&lt;li&gt;kube-proxy&lt;/li&gt;
&lt;li&gt;Container Runtime&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;addons&#34;&gt;Addons&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;DNS&lt;/li&gt;
&lt;li&gt;Web UI (Dashboard)&lt;/li&gt;
&lt;li&gt;Container Resource Monitoring&lt;/li&gt;
&lt;li&gt;Cluster-level Logging&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;k8s-abbreviation&#34;&gt;K8S Abbreviation&lt;/h3&gt;
&lt;h4 id=&#34;cni&#34;&gt;CNI&lt;/h4&gt;
&lt;p&gt;Kubernetes has adopted the Container Network Interface(CNI) specification for managing network resources on a cluster.&lt;/p&gt;
&lt;h4 id=&#34;cri&#34;&gt;CRI&lt;/h4&gt;
&lt;p&gt;Container Runtime Interface (CRI)&lt;br&gt;
Each container runtime has it own strengths, and many users have asked for Kubernetes to support more runtimes. CRI consists of a protocol buffers and gRPC API, and libraries, with additional specifications and tools under active development.&lt;br&gt;
Kubelet communicates with the container runtime (or a CRI shim for the runtime) over Unix sockets using the gRPC framework, where kubelet acts as a client and the CRI shim as the server.&lt;br&gt;
&lt;img src=&#34;./cri.png&#34; alt=&#34;cri.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;CRI-O&lt;/li&gt;
&lt;li&gt;Containerd&lt;/li&gt;
&lt;li&gt;Other CRI runtimes: frakti&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;csi&#34;&gt;CSI&lt;/h4&gt;
&lt;p&gt;The goal of CSI is to establish a standardized mechanism for Container Orchestration Systems (COs) to expose arbitrary storage systems to their containerized workloads.
Assuming a CSI storage plugin is already deployed on a Kubernetes cluster, users can use CSI volumes through the familiar Kubernetes storage API objects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PersistentVolumeClaims&lt;/li&gt;
&lt;li&gt;PersistentVolumes&lt;/li&gt;
&lt;li&gt;StorageClasses&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;crd&#34;&gt;CRD&lt;/h4&gt;
&lt;p&gt;CustomResourceDefinition&lt;/p&gt;
&lt;h3 id=&#34;k8s-networking&#34;&gt;K8S Networking&lt;/h3&gt;
&lt;h4 id=&#34;pod-communication&#34;&gt;POD Communication&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Inner POD&lt;br&gt;
Multi-containers in one POD&lt;br&gt;
Containers within a pod share an IP address and port space, and can find each other via localhost. They can also communicate with each other using standard inter-process communications.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shared volume&lt;/li&gt;
&lt;li&gt;IPC, i.e. queue&lt;/li&gt;
&lt;li&gt;Networking, localhost with different port&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inter PODs&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;services&#34;&gt;Services&lt;/h3&gt;
&lt;h4 id=&#34;clusterip&#34;&gt;ClusterIP&lt;/h4&gt;
&lt;p&gt;ClusterIP accesses the services through proxy.&lt;br&gt;
ClusterIP can access services only inside the cluster.&lt;br&gt;
&lt;img src=&#34;./clusterip.png&#34; alt=&#34;clusterip&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;nodeport&#34;&gt;Nodeport&lt;/h4&gt;
&lt;p&gt;NodePort opens a specific port on each node of the cluster and traffic on that node is forwarded directly to the service.&lt;br&gt;
&lt;img src=&#34;./nodeport.png&#34; alt=&#34;nodeport&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;loadbalancer&#34;&gt;Loadbalancer&lt;/h4&gt;
&lt;p&gt;All the traffic on the port is forwarded to the service, there&amp;rsquo;s no filtering, no routing.&lt;br&gt;
&lt;img src=&#34;./loadbalancer.png&#34; alt=&#34;loadbalancer&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;ingress-controller&#34;&gt;Ingress Controller&lt;/h3&gt;
&lt;p&gt;Ingress Controller but there are third party solutions like &lt;strong&gt;Traefik&lt;/strong&gt; and &lt;strong&gt;Nginx&lt;/strong&gt; available. Ingress controller also provide L7 load balancing unlike cluster services.&lt;/p&gt;
&lt;h3 id=&#34;network-policies&#34;&gt;Network policies&lt;/h3&gt;
&lt;p&gt;Isolation policies are configured on a per-namespace basis.&lt;br&gt;

&lt;a href=&#34;https://cloudnativelabs.github.io/post/2017-04-18-kubernetes-networking/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Networking&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;k8s-objects&#34;&gt;K8S Objects&lt;/h3&gt;
&lt;p&gt;To find all the objects in some specific API version:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kubectl api-resources | cut -c92-&lt;/li&gt;
&lt;li&gt;kubectl api-resources | cut -c92-150&lt;/li&gt;
&lt;li&gt;kubectl api-resources | cut -c92-150 | wc -l&lt;/li&gt;
&lt;li&gt;kubectl api-resources&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;pod&#34;&gt;Pod&lt;/h4&gt;
&lt;p&gt;A thin wrapper around one or more containers&lt;/p&gt;
&lt;h4 id=&#34;daemonset&#34;&gt;DaemonSet&lt;/h4&gt;
&lt;p&gt;Implements a single instance of a pod on a worker node&lt;/p&gt;
&lt;h4 id=&#34;deployment&#34;&gt;Deployment&lt;/h4&gt;
&lt;p&gt;Details how to roll out (or roll back) across versions of your application&lt;/p&gt;
&lt;h4 id=&#34;replicaset&#34;&gt;ReplicaSet&lt;/h4&gt;
&lt;p&gt;Ensures a defined number of pods are always running&lt;/p&gt;
&lt;h4 id=&#34;job&#34;&gt;Job&lt;/h4&gt;
&lt;p&gt;Ensures a pod properly runs to completion&lt;/p&gt;
&lt;h4 id=&#34;service&#34;&gt;Service&lt;/h4&gt;
&lt;p&gt;Maps a fixed IP address to a logical group of pods&lt;/p&gt;
&lt;h4 id=&#34;label&#34;&gt;Label&lt;/h4&gt;
&lt;p&gt;Key/Value pairs used for association and filtering&lt;br&gt;
Labels in Kubernetes are intended to be used to specify identifying attributes for objects. They are used by selector queries or with label selectors. Since they are used internally by Kubernetes, the structure of keys and values is constrained, to optimize queries.&lt;/p&gt;
&lt;h4 id=&#34;annotations&#34;&gt;Annotations&lt;/h4&gt;
&lt;p&gt;annotations are a way to attach non-identifying metadata to objects. This metadata is not used internally by Kubernetes, so they cannot be used to identify within k8s. Instead, they are used by external tools and libraries. Examples of annotations include build/release timestamps, client library information for debugging, or fields managed by a network policy like Calico in this case.&lt;/p&gt;
&lt;h4 id=&#34;label-vs-annotation&#34;&gt;Label vs. Annotation&lt;/h4&gt;
&lt;p&gt;You can use either labels or annotations to attach metadata to Kubernetes objects. Labels can be used to select objects and to find collections of objects that satisfy certain conditions. In contrast, annotations are not used to identify and select objects.&lt;/p&gt;
&lt;h4 id=&#34;taints-and-tolerations&#34;&gt;Taints and Tolerations&lt;/h4&gt;
&lt;p&gt;Node affinity, described here, is a property of pods that attracts them to a set of nodes (either as a preference or a hard requirement). Taints are the opposite – they allow a node to repel a set of pods.&lt;/p&gt;
&lt;p&gt;Taints and tolerations work together to ensure that pods are not scheduled onto inappropriate nodes. One or more taints are applied to a node; this marks that the node should not accept any pods that do not tolerate the taints. Tolerations are applied to pods, and allow (but do not require) the pods to schedule onto nodes with matching taints.&lt;/p&gt;
&lt;h4 id=&#34;node-isolationrestriction&#34;&gt;Node isolation/restriction&lt;/h4&gt;
&lt;p&gt;Adding labels to Node objects allows targeting pods to specific nodes or groups of nodes. This can be used to ensure specific pods only run on nodes with certain isolation, security, or regulatory properties.&lt;/p&gt;
&lt;h4 id=&#34;nodeselector&#34;&gt;NODESELECTOR&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Attach a label to the node&lt;/li&gt;
&lt;li&gt;Add a nodeSelector field to your pod configuration&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;affinity-and-anti-affinity&#34;&gt;Affinity and anti-affinity&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;• Node affinity
• Inter-pod affinity and anti-affinity
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;nodeSelector provides a very simple way to constrain pods to nodes with particular labels. The affinity/anti-affinity feature, currently in beta, greatly extends the types of constraints you can express. The key enhancements are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;• The language is more expressive (not just “AND of exact match”)
• You can indicate that the rule is “soft”/“preference” rather than a hard requirement, so if the scheduler can’t satisfy it, the pod will still be scheduled
• You can constrain against labels on other pods running on the node (or other topological domain), rather than against labels on the node itself, which allows rules about which pods can and cannot be co-located
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The affinity feature consists of two types of affinity, “node affinity” and “inter-pod affinity/anti-affinity”. Node affinity is like the existing nodeSelector (but with the first two benefits listed above), while inter-pod affinity/anti-affinity constrains against pod labels rather than node labels, as described in the third item listed above, in addition to having the first and second properties listed above.&lt;/p&gt;
&lt;p&gt;Node affinity is conceptually similar to nodeSelector – it allows you to constrain which nodes your pod is eligible to be scheduled on, based on labels on the node.&lt;/p&gt;
&lt;h3 id=&#34;deploy&#34;&gt;Deploy&lt;/h3&gt;
&lt;p&gt;When you wish to deploy an application in Kubernetes, you usually define three components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;strong&gt;Deployment&lt;/strong&gt; — which is a recipe for creating copies of your application called Pods&lt;/li&gt;
&lt;li&gt;a &lt;strong&gt;Service&lt;/strong&gt; — an internal load balancer that routes the traffic to Pods&lt;/li&gt;
&lt;li&gt;an &lt;strong&gt;Ingress&lt;/strong&gt; — a description of how the traffic should flow from outside the cluster to your Service&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ingress&#34;&gt;Ingress&lt;/h3&gt;
&lt;h4 id=&#34;what-is-an-ingress&#34;&gt;What is an ingress?&lt;/h4&gt;
&lt;p&gt;In Kubernetes, an Ingress is an object that allows access to your Kubernetes services from outside the Kubernetes cluster. You configure access by creating a collection of rules that define which inbound connections reach which services.&lt;br&gt;
&lt;br&gt;
Ingress, added in Kubernetes v1.1, exposes HTTP and HTTPS routes from outside the cluster to services within the cluster. Traffic routing is controlled by rules defined on the Ingress resource.&lt;br&gt;
&lt;br&gt;
Internet&amp;mdash;[ Ingress ]&amp;ndash;|&amp;ndash;|&amp;ndash;[ Services ]
&lt;br&gt;&lt;/p&gt;
&lt;p&gt;An Ingress can be configured to give services externally-reachable URLs, load balance traffic, terminate SSL, and offer name based virtual hosting. An Ingress controller is responsible for fulfilling the Ingress, usually with a loadbalancer, though it may also configure your edge router or additional frontends to help handle the traffic.&lt;/p&gt;
&lt;p&gt;An Ingress does not expose arbitrary ports or protocols. Exposing services other than HTTP and HTTPS to the internet typically uses a service of type NodePort or LoadBalancer.&lt;/p&gt;
&lt;h4 id=&#34;what-is-an-ingress-controller&#34;&gt;What is an ingress controller?&lt;/h4&gt;
&lt;p&gt;Kubernetes supports a high level abstraction called Ingress, which allows simple host or URL based HTTP routing. An ingress is a core concept (in beta) of Kubernetes, but is always implemented by a third party proxy. These implementations are known as ingress controllers.&lt;br&gt;
&lt;br&gt;
In order for the Ingress resource to work, the cluster must have an ingress controller running.&lt;br&gt;
Unlike other types of controllers which run as part of the kube-controller-manager binary, Ingress controllers are not started automatically with a cluster. Let’s see some options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ALB Ingress Controller&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ingress-vs-ingress-controller&#34;&gt;Ingress vs. Ingress controller&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Ingress should be the rules for the traffic, which indicate the destination of a request will go through in the cluster.&lt;/li&gt;
&lt;li&gt;Ingress Controller is the implementation for the Ingress. GCE and Nginx are both supported by k8s. They will take care of L4 or L7 proxy.&lt;/li&gt;
&lt;li&gt;Just like other objects in K8s, ingress is also a type of object, which is mainly referred as set of redirection rules.&lt;/li&gt;
&lt;li&gt;Where as ingress controller is like other deployment objects(could be deamon set as well) which listen and configure those ingress rules.&lt;/li&gt;
&lt;li&gt;If I talk in terms of Nginx, Ingress controller is Nginx software itself where as ingress(ingress rules) are nginx configurations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-ingress-resource&#34;&gt;The Ingress Resource&lt;/h4&gt;
&lt;p&gt;A minimal ingress resource example:&lt;br&gt;
&lt;img src=&#34;./ingress-resource-examle.png&#34; alt=&#34;ingress-resource-examle&#34;&gt;&lt;/p&gt;
&lt;p&gt;As with all other Kubernetes resources, an Ingress needs apiVersion, kind, and metadata fields. Ingress frequently uses annotations to configure some options depending on the Ingress controller, an example of which is the rewrite-target annotation. Different Ingress controller support different annotations. Review the documentation for your choice of Ingress controller to learn which annotations are supported.&lt;br&gt;
The Ingress spec has all the information needed to configure a loadbalancer or proxy server. Most importantly, it contains a list of rules matched against all incoming requests. Ingress resource only supports rules for directing HTTP traffic.&lt;/p&gt;
&lt;h4 id=&#34;ingress-rules&#34;&gt;Ingress Rules&lt;/h4&gt;
&lt;p&gt;Each http rule contains the following information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An optional host. In this example, no host is specified, so the rule applies to all inbound HTTP traffic through the IP address specified. If a host is provided (for example, foo.bar.com), the rules apply to that host.&lt;/li&gt;
&lt;li&gt;A list of paths (for example, /testpath), each of which has an associated backend defined with a serviceName and servicePort. Both the host and path must match the content of an incoming request before the loadbalancer will direct traffic to the referenced service.&lt;/li&gt;
&lt;li&gt;A backend is a combination of service and port names as described in the services doc. HTTP (and HTTPS) requests to the Ingress matching the host and path of the rule will be sent to the listed backend.&lt;/li&gt;
&lt;li&gt;A default backend is often configured in an Ingress controller that will service any requests that do not match a path in the spec.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;default-backend&#34;&gt;Default Backend&lt;/h4&gt;
&lt;p&gt;An Ingress with no rules sends all traffic to a single default backend. The default backend is typically a configuration option of the Ingress controller and is not specified in your Ingress resources.&lt;/p&gt;
&lt;p&gt;If none of the hosts or paths match the HTTP request in the Ingress objects, the traffic is routed to your default backend.&lt;/p&gt;
&lt;h3 id=&#34;configmap&#34;&gt;ConfigMap&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://matthewpalmer.net/kubernetes-app-developer/articles/ultimate-configmap-guide-kubernetes.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ultimate Guide to ConfigMaps in Kubernetes&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;secrets&#34;&gt;Secrets&lt;/h3&gt;
&lt;p&gt;Secret data should be stored and handled in a way that can be easily hidden and possibly encrypted at rest if the environment is configured as such. The Secret data is represented as base64-encoded information, and it is critical to understand that this is not encrypted. As soon as the secret is injected into the pod, the pod itself can see the secret data in plain text.&lt;/p&gt;
&lt;p&gt;Secret data is meant to be small amounts of data, limited by default in Kubernetes to 1 MB in size, for the base64-encoded data, so ensure that the actual data is approximately 750 KB because of the overhead of the encoding.&lt;/p&gt;
&lt;p&gt;There are three types of secrets in Kubernetes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;generic&lt;br&gt;
regular key/value pairs that are created from a file, a directory, or from string literals using the &amp;ndash;from-literal= parameter.&lt;/li&gt;
&lt;li&gt;docker-registry&lt;br&gt;
This is used by the kubelet when passed in a pod template if there is an imagePullsecret to provide the credentials needed to authenticate to a private Docker registry:&lt;/li&gt;
&lt;li&gt;tls&lt;br&gt;
This creates a Transport Layer Security (TLS) secret from a valid public/private key pair. As long as the cert is in a valid PEM format, the key pair will be encoded as a secret and can be passed to the pod to use for SSL/TLS needs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;configmaps-vs-secrets&#34;&gt;ConfigMaps vs Secrets&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;the ConfigMap API is meant more for string data that is not really sensitive data. If your application requires more sensitive data, the Secrets API is more appropriate.&lt;/li&gt;
&lt;li&gt;ConfigMap data can be injected as either a volume mounted into the pod or as environment variables.&lt;/li&gt;
&lt;li&gt;Secrets are also mounted into tmpfs only on the nodes that have a pod that requires the secret and are deleted when the pod that needs it is gone. This prevents any secrets from being left behind on the disk of the node.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;roles&#34;&gt;Roles&lt;/h3&gt;
&lt;p&gt;Kubernetes has two types of roles, role and clusterRole, the difference being that role is specific to a namespace, and clusterRole is a cluster-wide role across all namespaces.&lt;/p&gt;
&lt;h3 id=&#34;rolebindings&#34;&gt;RoleBindings&lt;/h3&gt;
&lt;p&gt;The RoleBinding allows a mapping of a subject like a user or group to a specific role. Bindings also have two modes: roleBinding, which is specific to a namespace, and clusterRoleBinding, which is across the entire cluster.&lt;/p&gt;
&lt;h3 id=&#34;kubernetes-operator&#34;&gt;Kubernetes Operator&lt;/h3&gt;
&lt;p&gt;An Operator is an application-specific controller that extends the Kubernetes API to create, configure, and manage instances of complex stateful applications on behalf of a Kubernetes user. It builds upon the basic Kubernetes resource and controller concepts but includes domain or application-specific knowledge to automate common tasks.&lt;br&gt;
Examples are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;elasticsearch-operator&lt;/li&gt;
&lt;li&gt;prometheus-operator&lt;/li&gt;
&lt;li&gt;cassandra-operator&lt;/li&gt;
&lt;li&gt;Flux  The GitOps Kubernetes Operator&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    TBD
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://learnk8s.io/troubleshooting-deployments&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A visual guide on troubleshooting Kubernetes deployments&lt;/a&gt; | 
&lt;a href=&#34;./A-visual-guide-on-troubleshooting-Kubernetes.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://cloudnativelabs.github.io/post/2017-04-18-kubernetes-networking/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kubernetes Networking&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://matthewpalmer.net/kubernetes-app-developer/articles/ultimate-configmap-guide-kubernetes.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ultimate Guide to ConfigMaps in Kubernetes&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://learnk8s.io/troubleshooting-deployments&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A visual guide on troubleshooting Kubernetes deployments&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
  </channel>
</rss>
