<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java | flycoolman</title>
    <link>/tag/java/</link>
      <atom:link href="/tag/java/index.xml" rel="self" type="application/rss+xml" />
    <description>Java</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â©2020 flycoolman.com All Rights Reserved</copyright><lastBuildDate>Sun, 02 Aug 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu42a5118afc49636e6fda7ce5d4b48056_3366_512x512_fill_lanczos_center_2.png</url>
      <title>Java</title>
      <link>/tag/java/</link>
    </image>
    
    <item>
      <title>Set Up Shardingsphere Development Environment</title>
      <link>/coding/java/shardingsphere-dev-env-setup/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/coding/java/shardingsphere-dev-env-setup/</guid>
      <description>&lt;h2 id=&#34;set-up-shardingsphere-development-environment&#34;&gt;Set Up Shardingsphere Development Environment&lt;/h2&gt;
&lt;p&gt;This document used the official release version to set up and verify development environment.
This way could help to rule out any unstable issues of source code and to focus the issues on environment.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Linux (Ubuntu 18.04)&lt;/li&gt;
&lt;li&gt;Source code 
&lt;a href=&#34;https://www.apache.org/dyn/closer.cgi/shardingsphere/4.1.1/apache-shardingsphere-4.1.1-src.zip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;4.1.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Eclipse&lt;/li&gt;
&lt;li&gt;IntelliJ IDEA&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Choose the proper IDE (Eclipse or IntelliJ IDEA), even No IDE
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;java-development-environment-no-ide&#34;&gt;Java Development Environment (No IDE)&lt;/h3&gt;
&lt;h4 id=&#34;install-jdk-8&#34;&gt;Install JDK 8&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install openjdk-8-jdk

$ java -version
openjdk version &amp;quot;1.8.0_252&amp;quot;
OpenJDK Runtime Environment (build 1.8.0_252-8u252-b09-1~18.04-b09)
OpenJDK 64-Bit Server VM (build 25.252-b09, mixed mode)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;install-maven-optional&#34;&gt;Install Maven (Optional)&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install maven

$ mvn -version
Apache Maven 3.6.0
Maven home: /usr/share/maven
Java version: 1.8.0_252, vendor: Private Build, runtime: /usr/lib/jvm/java-8-openjdk-amd64/jre
Default locale: en_US, platform encoding: UTF-8
OS name: &amp;quot;linux&amp;quot;, version: &amp;quot;5.4.0-42-generic&amp;quot;, arch: &amp;quot;amd64&amp;quot;, family: &amp;quot;unix&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;unzip-source-code&#34;&gt;Unzip Source Code&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Download 
&lt;a href=&#34;https://www.apache.org/dyn/closer.cgi/shardingsphere/4.1.1/apache-shardingsphere-4.1.1-src.zip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Source Code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unzip the source code&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  unzip apache-shardingsphere-4.1.1-src.zip
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change file permissions&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  chmod -R 755 apache-shardingsphere-4.1.1-src-release/
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;build-and-test&#34;&gt;Build and Test&lt;/h4&gt;
&lt;p&gt;Based the Github page 
&lt;a href=&#34;https://github.com/apache/shardingsphere&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Build Apache ShardingSphere&lt;/a&gt;, there is a script to do the build&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./mvnw clean install -Prelease
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Make sure all the tests pass
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;issues-and-tricks&#34;&gt;Issues and Tricks&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Lombok in the project not support Java 11&lt;br&gt;
If Java 11 is set as default, this may cause the error below for Lombok does not support Java 11.
&lt;img src=&#34;./java-11-not-support-error.png&#34; alt=&#34;java.lang.ExceptionInInitializerError&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;br&gt;
Use Java 8.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multiple Java version installed&lt;br&gt;
If multiple versions of Java are installed on the system, such as Java 11 and Java 8, in the mean time, Java 11 is set as default, the above error will cause the build failure.
Even the default JDK is changed to Java 8 by &lt;strong&gt;update-alternatives &amp;ndash;config java&lt;/strong&gt;, the above issue may still be there.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;br&gt;
Uninstall all the JDKs by the command&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get remove openjdk* 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and reinstall JDK 8.&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;eclipse&#34;&gt;Eclipse&lt;/h3&gt;
&lt;h4 id=&#34;import-the-project&#34;&gt;Import the Project&lt;/h4&gt;
&lt;p&gt;Follow the steps below to import the project.&lt;/p&gt;
&lt;p&gt;Import projects&amp;hellip; or File &amp;mdash;&amp;gt; Import&amp;hellip;
&lt;img src=&#34;./import-projects.png&#34; alt=&#34;import-projects&#34;&gt;&lt;br&gt;
&lt;img src=&#34;./existing-maven-projects.png&#34; alt=&#34;existing-maven-projects&#34;&gt;&lt;br&gt;
&lt;img src=&#34;./select-all-pom-files.png&#34; alt=&#34;select-all-pom-files&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The import is done by m2e plugin.&lt;br&gt;
The &lt;strong&gt;warning&lt;/strong&gt; shown below can be ignored.&lt;br&gt;
maven-remote-resources-plugin (goal &amp;ldquo;process&amp;rdquo;) is ignored by m2e.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;build-and-test-1&#34;&gt;Build and Test&lt;/h4&gt;
&lt;p&gt;Build and test as separate steps, i.e.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run As &amp;mdash;&amp;gt; Maven clean&lt;/li&gt;
&lt;li&gt;Run As &amp;mdash;&amp;gt; Maven build&lt;/li&gt;
&lt;li&gt;Run As &amp;mdash;&amp;gt; Maven test&lt;/li&gt;
&lt;li&gt;Run As &amp;mdash;&amp;gt; Maven install&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./maven-run-as-options.png&#34; alt=&#34;maven-run-as-options&#34;&gt;&lt;/p&gt;
&lt;p&gt;Or define the goals at one time, i.e.
Run As &amp;mdash;&amp;gt; Maven build&amp;hellip;  &amp;mdash;&amp;gt; Goals: (clean install)
&lt;img src=&#34;./maven-custom-build.png&#34; alt=&#34;maven-custom-build&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Specific module can be chosen and do the same build.&lt;br&gt;
Maven will build the dependencies automatically.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;issues-and-tricks-1&#34;&gt;Issues and Tricks&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Too many files with unapproved license&lt;br&gt;
When doing &amp;lsquo;install&amp;rsquo;, the below error occurs. No issue with &amp;lsquo;build&amp;rsquo; and &amp;lsquo;test&amp;rsquo;, but with &amp;lsquo;install&amp;rsquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;[INFO] BUILD FAILURE
Too many files with unapproved license&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;br&gt;
Use or check out clean source code, then do &amp;lsquo;install&amp;rsquo;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build failed with 8 threads&lt;br&gt;
When setting 8 threads for build, the build failed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;&lt;br&gt;
Set build threads as 1.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./1-thread.png&#34; alt=&#34;1-thread&#34;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;intellij-idea&#34;&gt;IntelliJ IDEA&lt;/h3&gt;
&lt;h4 id=&#34;import-the-project-1&#34;&gt;Import the Project&lt;/h4&gt;
&lt;p&gt;Follow the steps below to import the project.&lt;/p&gt;
&lt;p&gt;On the Welcome window, select &lt;strong&gt;Import Project&lt;/strong&gt;, then select the project POM file in the next window.
&lt;img src=&#34;./intellij-idea-import.png&#34; alt=&#34;intellij-idea-import&#34;&gt;&lt;br&gt;
&lt;img src=&#34;./select-project-pom-file.png&#34; alt=&#34;select-project-pom-file&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The &lt;strong&gt;errors&lt;/strong&gt; and &lt;strong&gt;warnings&lt;/strong&gt; of the POM file analysis can be ignored.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;build-and-test-2&#34;&gt;Build and Test&lt;/h4&gt;
&lt;p&gt;As there are errors in the POM file, the tool window of Maven lifecyle may not show up automatically.&lt;br&gt;
To add Maven support, right click on the project name in the project view, then select &lt;strong&gt;Add Framework Support&amp;hellip;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In the &lt;strong&gt;Maven&lt;/strong&gt; window, different phase of lifecyle of project or module can be chosen to build.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./intellij-idea-maven-build.png&#34; alt=&#34;intellij-idea-maven-build&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Specific module can be chosen and do the build.&lt;br&gt;
Maven will build the dependencies automatically.
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.tutorialspoint.com/maven/maven_build_life_cycle.htm#:~:text=When%20Maven%20starts%20building%20a,are%20registered%20with%20each%20phase.&amp;amp;text=A%20goal%20represents%20a%20specific,and%20managing%20of%20a%20project.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Maven - Build Life Cycle&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Introduction to the Build Lifecycle&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it ð&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Inversion of Control and Dependency Injection</title>
      <link>/coding/java/ioc-di/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/coding/java/ioc-di/</guid>
      <description>&lt;h3 id=&#34;inversion-of-control-ioc&#34;&gt;Inversion of Control (IoC)&lt;/h3&gt;
&lt;p&gt;A real system might have dozens of services and components. To make a loosely coupled application, the way is to plug in the plugins (components and services) at some point.
So the core problem is how to assemble the plugins into an application. Then frameworks aim to resolve the problem. Usually &lt;strong&gt;Inversion of Control&lt;/strong&gt; is used in frameworks, so does Spring Framework. That&amp;rsquo;s why Inversion of Control (IoC) is the core technology of Spring Framework.&lt;/p&gt;
&lt;h4 id=&#34;inversion-of-control-ioc-vs-traditional-control&#34;&gt;Inversion of Control (IoC) vs. Traditional Control&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Traditional Control&lt;br&gt;
In traditional programming, the custom code that expresses the purpose of the program calls into reusable libraries to take care of generic tasks.&lt;br&gt;
I.e.&lt;br&gt;
the custom object instantiates its dependent objects, then uses the objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inversion of Control (IoC)&lt;br&gt;
IoC inverts the flow of control as compared to traditional control flow. In IoC, custom-written portions of a computer program receive the flow of control from a generic framework.
Usually it is the framework that calls into the custom, or task-specific, code.&lt;br&gt;
I.e.&lt;br&gt;
the custom object receives the instantiated dependent objects from framework.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;what-can-ioc-serve&#34;&gt;What Can IoC Serve&lt;/h4&gt;
&lt;p&gt;IoC as a design guideline, is used to increase modularity of the program and make it extensible. It serves the following purposes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To decouple the execution of a task from implementation.&lt;/li&gt;
&lt;li&gt;To make every module focus on what it is designed for.&lt;/li&gt;
&lt;li&gt;To free modules from assumptions about how and what other systems do, and instead rely on contracts.&lt;/li&gt;
&lt;li&gt;To prevent side effects on other modules when replacing a module.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;spring-implementation-of-ioc-principle&#34;&gt;Spring Implementation of IoC Principle&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;IoC&lt;/strong&gt; is also known as &lt;strong&gt;dependency injection (DI)&lt;/strong&gt;. It is a process whereby objects define their dependencies (that is, the other objects they work with) only through constructor arguments, arguments to a factory method, or properties that are set on the object instance after it is constructed or returned from a factory method. The container then injects those dependencies when it creates the bean. This process is fundamentally the inverse (hence the name, Inversion of Control) of the bean itself controlling the instantiation or location of its dependencies by using direct construction of classes or a mechanism such as the Service Locator pattern.&lt;/p&gt;
&lt;p&gt;This is common characteristic of frameworks, IoC manages java objects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;from instantiation to destruction through its BeanFactory.&lt;/li&gt;
&lt;li&gt;Java components that are instantiated by the IoC container are called beans, and the IoC container manages a bean&amp;rsquo;s scope, lifecycle events, and any AOP features for which it has been configured and coded.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    In Spring framework, the IoC Container does that job of injecting dependancies (DI) and not us, The flow of control is reversed, (Framework to Application) it is IoC with DI.
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&#34;spring-ioc-container&#34;&gt;Spring IoC Container&lt;/h3&gt;
&lt;p&gt;Central to the Spring Framework is its inversion of control (IoC) container, which provides a consistent means of configuring and managing Java objects using reflection. The container is responsible for managing object lifecycles of specific objects: creating these objects, calling their initialization methods, and configuring these objects by wiring them together.&lt;/p&gt;
&lt;p&gt;The interface &lt;strong&gt;org.springframework.context.ApplicationContext&lt;/strong&gt; represents the Spring IoC container and is responsible for &lt;strong&gt;instantiating&lt;/strong&gt;, &lt;strong&gt;configuring&lt;/strong&gt;, and &lt;strong&gt;assembling&lt;/strong&gt; the aforementioned beans. The container gets its instructions on what objects to instantiate, configure, and assemble by reading &lt;strong&gt;configuration metadata&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;Representation - org.springframework.context.ApplicationContext&lt;/li&gt;
&lt;li&gt;Responsibilities - instantiating, configuring, and assembling Beans&lt;/li&gt;
&lt;li&gt;Tool: configuration metadata&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;types-of-ioc-containers&#34;&gt;Types of IoC Containers&lt;/h4&gt;
&lt;p&gt;The &lt;strong&gt;org.springframework.beans&lt;/strong&gt; and &lt;strong&gt;org.springframework.context&lt;/strong&gt; packages provide the basis for the Spring Frameworkâs IoC container.&lt;br&gt;
The &lt;strong&gt;BeanFactory interface&lt;/strong&gt; provides an advanced configuration mechanism capable of managing objects of any nature.&lt;br&gt;
The &lt;strong&gt;ApplicationContext interface&lt;/strong&gt; builds on top of the BeanFactory (it is a sub-interface) and adds other functionality such as easier integration with Springâs AOP features, message resource handling (for use in internationalization), event propagation, and application-layer specific contexts such as the WebApplicationContext for use in web applications.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BeanFactory container&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The BeanFactory is the actual representation of the Spring IoC container that is responsible for containing and otherwise managing the aforementioned beans.&lt;/li&gt;
&lt;li&gt;The BeanFactory interface is the central IoC container interface in Spring. The BeanFactory API provides the underlying basis for Springâs IoC functionality.&lt;/li&gt;
&lt;li&gt;Its specific contracts are mostly used in integration with other parts of Spring and related third-party frameworks.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ApplicationContext container&lt;br&gt;
Because an ApplicationContext includes all the functionality of a BeanFactory, it is generally recommended over a plain BeanFactory, except for scenarios where full control over bean processing is needed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;In short, the BeanFactory provides the configuration framework and basic functionality, and the ApplicationContext adds more enterprise-specific functionality. The ApplicationContext is a complete superset of the BeanFactory.&lt;/li&gt;
&lt;li&gt;You should use an ApplicationContext unless you have a good reason for not doing so, with GenericApplicationContext and its subclass AnnotationConfigApplicationContext as the common implementations for custom bootstrapping.&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&#34;dependency-injection-di&#34;&gt;Dependency Injection (DI)&lt;/h3&gt;
&lt;p&gt;Inversion of Control is too generic a term, and thus people find it confusing. As a result with a lot of discussion with various IoC advocates, the name was settled on &lt;strong&gt;Dependency Injection&lt;/strong&gt;.&lt;br&gt;
Dependency injection generally means passing a dependent object as a parameter to a method, rather than having the method create the dependent object.
What it means in practice is that the method does not have a direct dependency on a particular implementation; any implementation that meets the requirements can be passed as a parameter.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The Spring IoC Container is the leading dependency injection framework.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;dependency-lookup-vs-dependency-injection&#34;&gt;Dependency Lookup vs. Dependency Injection&lt;/h4&gt;
&lt;p&gt;Objects can be obtained by means of either dependency lookup or dependency injection.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dependency lookup is a pattern where a caller asks the container object for an object with a specific name or of a specific type.&lt;/li&gt;
&lt;li&gt;Dependency injection is a pattern where the container passes objects by name to other objects, via either constructors, properties, or factory methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-styles-of-di&#34;&gt;The Styles of DI&lt;/h4&gt;
&lt;p&gt;Dependency Injection can be done by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Constructor-based dependency injection&lt;br&gt;
Constructor-based DI is accomplished by the container invoking a constructor with a number of arguments, each representing a dependency.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public class SimpleMovieLister {

      // the SimpleMovieLister has a dependency on a MovieFinder
      private MovieFinder movieFinder;

      // a constructor so that the Spring container can inject a MovieFinder
      public SimpleMovieLister(MovieFinder movieFinder) {
          this.movieFinder = movieFinder;
      }

      // business logic that actually uses the injected MovieFinder is omitted...
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setter-based dependency injection&lt;br&gt;
Setter-based DI is accomplished by the container calling setter methods on your beans after invoking a no-argument constructor or a no-argument static factory method to instantiate your bean.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public class SimpleMovieLister {

      // the SimpleMovieLister has a dependency on the MovieFinder
      private MovieFinder movieFinder;

      // a setter method so that the Spring container can inject a MovieFinder
      public void setMovieFinder(MovieFinder movieFinder) {
          this.movieFinder = movieFinder;
      }

      // business logic that actually uses the injected MovieFinder is omitted...
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;constructor-based-or-setter-based-di&#34;&gt;Constructor-based or Setter-based DI&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Constructor-based and setter-based DI can be mixed&lt;/li&gt;
&lt;li&gt;Constructors for mandatory dependencies and setter methods or configuration methods for optional dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Why&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Constructor injection lets you implement application components as immutable objects and ensures that required dependencies are not null. Furthermore, constructor-injected components are always returned to the client (calling) code in a fully initialized state.&lt;/li&gt;
&lt;li&gt;Setter injection should primarily only be used for optional dependencies that can be assigned reasonable default values within the class. Otherwise, not-null checks must be performed everywhere the code uses the dependency. One benefit of setter injection is that setter methods make objects of that class amenable to reconfiguration or re-injection later.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Use the DI style that makes the most sense for a particular class.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;ioc-vs-di&#34;&gt;IoC vs. DI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Interchangable&lt;br&gt;
IoC and DI are used interchangeably.&lt;/li&gt;
&lt;li&gt;Process and Result&lt;br&gt;
IoC is achieved through DI. DI is the process of providing the dependencies and IoC is the end result of DI.&lt;/li&gt;
&lt;li&gt;One to Many&lt;br&gt;
DI is a specific type of IoC and is not the only way to achieve IoC. There are other ways as well, such as:
&lt;ul&gt;
&lt;li&gt;Service Locator pattern&lt;/li&gt;
&lt;li&gt;Template method design pattern&lt;/li&gt;
&lt;li&gt;Strategy design pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;IoC basically facilitates having different components designed and coded separately and later used together by defining their relation with DI.&lt;/li&gt;
&lt;li&gt;By DI, the responsibility of creating objects is shifted from our application code to the Spring container; this phenomenon is called IoC.&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-introduction&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The IoC Container&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://martinfowler.com/articles/injection.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Inversion of Control Containers and the Dependency Injection pattern&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://en.wikipedia.org/wiki/Spring_Framework#Inversion_of_control_container_.28dependency_injection.29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Framework&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/9403155/what-is-dependency-injection-and-inversion-of-control-in-spring-framework&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What is Dependency Injection and Inversion of Control in Spring Framework?&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://howtodoinjava.com/spring-core/spring-ioc-vs-di/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring â Inversion of Control vs Dependency Injection&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://howtodoinjava.com/spring-core/different-spring-ioc-containers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring â IoC Containers&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://en.wikipedia.org/wiki/Inversion_of_control#Implementation_techniques&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Inversion of control&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/9403155/what-is-dependency-injection-and-inversion-of-control-in-spring-framework&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What is Dependency Injection and Inversion of Control in Spring Framework?&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/BeanFactory.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Interface BeanFactory&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/ApplicationContext.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Interface ApplicationContext&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-beanfactory&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The BeanFactory&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it ð&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Spring Beans</title>
      <link>/coding/java/spring-beans/</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/coding/java/spring-beans/</guid>
      <description>&lt;h3 id=&#34;spring-beans&#34;&gt;Spring Beans&lt;/h3&gt;
&lt;br&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;The objects that are managed by Spring IoC container&lt;/strong&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;The objects that form the backbone of your application and that are managed by the &lt;strong&gt;Spring IoC container&lt;/strong&gt; are called beans. A bean is an object that is instantiated, assembled, and otherwise managed by a Spring IoC container. These beans are created with the &lt;strong&gt;configuration metadata&lt;/strong&gt; that you supply to the container, for example, in the form of XML &lt;bean/&gt; definitions.&lt;/p&gt;
&lt;p&gt;In Spring, the objects that form the backbone of your application and that are managed by the Spring IoC container are called beans. A bean is an object that is instantiated, assembled, and otherwise managed by a Spring IoC container. Otherwise, a bean is simply one of many objects in your application. Beans, and the dependencies among them, are reflected in the configuration metadata used by a container.&lt;/p&gt;
&lt;p&gt;Spring Bean is nothing special, any object in the Spring framework that we initialize through Spring container is called Spring Bean. Any normal Java POJO class can be a Spring Bean if itâs configured to be initialized via container by providing configuration metadata information.&lt;/p&gt;
&lt;h3 id=&#34;spring-ioc-container&#34;&gt;Spring IoC Container&lt;/h3&gt;
&lt;br&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;Representation - org.springframework.context.ApplicationContext&lt;/li&gt;
&lt;li&gt;Responsibilities - instantiating, configuring, and assembling Beans&lt;/li&gt;
&lt;li&gt;Tool: configuration metadata&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;The interface org.springframework.context.ApplicationContext represents the Spring IoC container and is responsible for instantiating, configuring, and assembling the aforementioned beans. The container gets its instructions on what objects to instantiate, configure, and assemble by reading configuration metadata.&lt;/p&gt;
&lt;h3 id=&#34;configuration-metadata&#34;&gt;Configuration Metadata&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This configuration metadata represents how you as an application developer tell the Spring container to instantiate, configure, and assemble the objects in your application.&lt;/li&gt;
&lt;li&gt;The configuration metadata is represented in &lt;strong&gt;XML&lt;/strong&gt;, &lt;strong&gt;Java annotations&lt;/strong&gt;, or &lt;strong&gt;Java code&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;It allows you to express the objects that compose your application and the rich interdependencies between such objects.&lt;/li&gt;
&lt;li&gt;Spring configuration consists of at least one and typically more than one bean definition that the container must manage.&lt;/li&gt;
&lt;li&gt;Consumed by Spring IoC container&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;spring-bean-scopes&#34;&gt;Spring Bean Scopes&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;7 scopes (Spring 4.2.x) are supported out of the box. You can also create a custom scope.&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Singleton&lt;/strong&gt; â Only one instance of the bean will be created for each container. This is the default scope for the spring beans. While using this scope, make sure bean doesnât have shared instance variables otherwise it might lead to data inconsistency issues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prototype&lt;/strong&gt; â A new instance will be created every time the bean is requested.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Request&lt;/strong&gt; â This is same as prototype scope, however itâs meant to be used for web applications. A new instance of the bean will be created for each HTTP request.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Session&lt;/strong&gt; â A new bean will be created for each HTTP session by the container.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Global-session&lt;/strong&gt; â This is used to create global session beans for Portlet applications.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Application&lt;/strong&gt; - Scopes a single bean definition to the lifecycle of a ServletContext. Only valid in the context of a web-aware Spring ApplicationContext.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Websocket&lt;/strong&gt; - Scopes a single bean definition to the lifecycle of a WebSocket. Only valid in the context of a web-aware Spring ApplicationContext.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    As of Spring 3.0, a thread scope is available, but is not registered by default.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;As a rule, use the prototype scope for all stateful beans and the singleton scope for stateless beans.&lt;/li&gt;
&lt;li&gt;The client code must clean up prototype-scoped objects and release expensive resources that the prototype bean(s) are holding.&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;5 of the above are available only if you use a &lt;strong&gt;web-aware ApplicationContext&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;request&lt;/li&gt;
&lt;li&gt;session&lt;/li&gt;
&lt;li&gt;globalSession&lt;/li&gt;
&lt;li&gt;application&lt;/li&gt;
&lt;li&gt;websocket&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;spring-singleton-vs-singleton-pattern&#34;&gt;Spring Singleton vs Singleton Pattern&lt;/h4&gt;
&lt;p&gt;Springâs concept of a singleton bean differs from the &lt;strong&gt;Singleton pattern&lt;/strong&gt; as defined in the Gang of Four (GoF) patterns book. The GoF Singleton hard-codes the scope of an object such that one and only one instance of a particular class is created per ClassLoader.&lt;/p&gt;
&lt;p&gt;The scope of the &lt;strong&gt;Spring singleton&lt;/strong&gt; is best described as per container and per bean. This means that if you define one bean for a particular class in a single Spring container, then the Spring container creates one and only one instance of the class defined by that bean definition.&lt;/p&gt;
&lt;h3 id=&#34;spring-bean-lifecycle&#34;&gt;Spring Bean Lifecycle&lt;/h3&gt;
&lt;h4 id=&#34;lifecycle-overview&#34;&gt;Lifecycle Overview&lt;/h4&gt;
&lt;p&gt;The lifecycle of any object means when &amp;amp; how it is born, how it behaves throughout its life, and when &amp;amp; how it dies.
The lifecycle of Spring Beans is not different from normal beans or objects. The below picture shows the overview of the lifecycle of objects, or Spring Beans.&lt;br&gt;
&lt;img src=&#34;./lifecycle-overview.png&#34; alt=&#34;lifecycle-overview&#34;&gt;&lt;/p&gt;
&lt;p&gt;As the Spring Beans are managed by Spring IoC containers. This makes the application developers not able to control the full lifecycle of Spring Beans. But Spring provides ways to add customizations into the lifecycle of Spring Beans, such as aware interfaces and callback methods, which are added in the below picture to show the lifecycle.
&lt;img src=&#34;./lifecycle-detailed-1.png&#34; alt=&#34;lifecycle-detailed-1&#34;&gt;
&lt;img src=&#34;./lifecycle-detailed-2.png&#34; alt=&#34;lifecycle-detailed-2&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;aware-interfaces&#34;&gt;Aware Interfaces&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BeanNameAware&lt;br&gt;
The BeanNameAware interface is implemented by beans that need access to its name defined in the Spring container.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  import org.springframework.beans.factory.BeanNameAware;

  public class BeanNameAwareImpl implements BeanNameAware {
      @Override
      public void setBeanName(String s) {
          System.out.println(&amp;quot;Bean Name: &amp;quot; + s);
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;BeanFactoryAware&lt;br&gt;
Beans might need access to the bean factory that created it, say to call any service from the bean factory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  import org.springframework.beans.BeansException;
  import org.springframework.beans.factory.BeanFactory;
  import org.springframework.beans.factory.BeanFactoryAware;

  public class BeanFactoryAwareImpl implements BeanFactoryAware {

      @Override
      public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
          System.out.println(beanFactory.getBean(&amp;quot;fooBean&amp;quot;));
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ApplicationContextAware&lt;br&gt;
In Spring beans, you might require access to the ApplicationContext. For example, if your bean needs to look up some other beans. Similarly, if your bean needs access to some application file resource in your bean or even publish some application events, you need access to the ApplicationContext.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  import org.springframework.beans.BeansException;
  import org.springframework.context.ApplicationContext;
  import org.springframework.context.ApplicationContextAware;

  public class ApplicationContextAwareImpl implements ApplicationContextAware {

      @Override
      public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
          FooBean userBean = (FooBean) applicationContext.getBean(&amp;quot;fooBean&amp;quot;);
          System.out.println(&amp;quot;User Id: &amp;quot; + fooBean.getFooBeanId() + &amp;quot;  Bean Name :&amp;quot; + fooBean.getName());
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more aware interfaces and details, go to the link  
&lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/Aware.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Interface Aware&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;lifecycle-callbacks&#34;&gt;Lifecycle Callbacks&lt;/h4&gt;
&lt;h5 id=&#34;callback-methods&#34;&gt;Callback Methods&lt;/h5&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;strong&gt;InitializingBean&lt;/strong&gt; and &lt;strong&gt;DisposableBean&lt;/strong&gt; callback interfaces are not recommended.
  &lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Initialization callbacks&lt;/strong&gt;&lt;br&gt;
3 options:
&lt;ul&gt;
&lt;li&gt;Annotation-based&lt;br&gt;
&lt;strong&gt;@PostConstruct&lt;/strong&gt; annotation or specify a POJO initialization method&lt;/li&gt;
&lt;li&gt;XML-based&lt;br&gt;
&lt;strong&gt;init-method&lt;/strong&gt; attribute to specify the name of the method that has a void no-argument signature&lt;/li&gt;
&lt;li&gt;Java Config&lt;br&gt;
initMethod attribute of &lt;strong&gt;@Bean&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Destruction callbacks&lt;/strong&gt;&lt;br&gt;
3 options:
&lt;ul&gt;
&lt;li&gt;Annotation-based&lt;br&gt;
&lt;strong&gt;@PreDestroy&lt;/strong&gt; annotation or specify a generic method that is supported by bean definitions&lt;/li&gt;
&lt;li&gt;XML-Based&lt;br&gt;
&lt;strong&gt;destroy-method&lt;/strong&gt; attribute on the &lt;strong&gt;&amp;lt;bean/&amp;gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Java Config&lt;br&gt;
&lt;strong&gt;destroyMethod&lt;/strong&gt; attribute of &lt;strong&gt;@Bean&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Startup and shutdown callbacks&lt;/strong&gt;&lt;br&gt;
The Lifecycle interface defines the essential methods for any object that has its own lifecycle requirements (e.g. starts and stops some background process)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;callback-examples&#34;&gt;Callback Examples&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;XML-based: Custom init() and destroy() methods&lt;br&gt;
The default init and destroy methods in bean configuration file can be defined in two ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bean local definition&lt;/strong&gt; applicable to a single bean&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Global definition&lt;/strong&gt; applicable to all beans defined in beans context&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;beans.xml&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Local definition&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;beans&amp;gt;
     
      &amp;lt;bean id=&amp;quot;demoBean&amp;quot; class=&amp;quot;com.flycoolman.callbackdemo.DemoBean&amp;quot;
                      init-method=&amp;quot;customInit&amp;quot;
                      destroy-method=&amp;quot;customDestroy&amp;quot;&amp;gt;&amp;lt;/bean&amp;gt;
     
  &amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Global definition&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;beans default-init-method=&amp;quot;customInit&amp;quot; default-destroy-method=&amp;quot;customDestroy&amp;quot;&amp;gt;   
     
          &amp;lt;bean id=&amp;quot;demoBean&amp;quot; class=&amp;quot;com.flycoolman.callbackdemo.DemoBean&amp;quot;&amp;gt;&amp;lt;/bean&amp;gt;
     
  &amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;DemoBean.java&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  package com.flycoolman.callbackdemo;
     
  public class DemoBean 
  {
      public void customInit() 
      {
          System.out.println(&amp;quot;Method customInit() invoked...&amp;quot;);
      }
     
      public void customDestroy() 
      {
          System.out.println(&amp;quot;Method customDestroy() invoked...&amp;quot;);
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Annotation-based: @PostConstruct and @PreDestroy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;@PostConstruct annotated method will be invoked after the bean has been constructed using default constructor and just before itâs instance is returned to requesting object.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@PreDestroy annotated method is called just before the bean is about be destroyed inside bean container.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  package com.flycoolman.callbackdemo;  
         
  import javax.annotation.PostConstruct;  
  import javax.annotation.PreDestroy;  
         
  public class DemoBean  
  {
      @PostConstruct
      public void customInit() 
      {
          System.out.println(&amp;quot;Method customInit() invoked...&amp;quot;);
      }
             
      @PreDestroy
      public void customDestroy() 
      {
          System.out.println(&amp;quot;Method customDestroy() invoked...&amp;quot;);
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java Config&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public class Foo {
      public void init() {
          // initialization logic
      }
      public void cleanup() {
              // destruction logic
          }
  }

  @Configuration
  public class AppConfig {
      @Bean(initMethod = &amp;quot;init&amp;quot;, destroyMethod = &amp;quot;cleanup&amp;quot;)
      public Foo foo() {
          return new Foo();
      }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;multiple-lifecycle-mechanismsexecution-orders&#34;&gt;Multiple Lifecycle Mechanisms/Execution Orders&lt;/h4&gt;
&lt;p&gt;Multiple lifecycle mechanisms configured for the same bean, with different initialization methods, are called as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Methods annotated with @PostConstruct&lt;/li&gt;
&lt;li&gt;afterPropertiesSet() as defined by the InitializingBean callback interface&lt;/li&gt;
&lt;li&gt;A custom configured init() method&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;p&gt;Destroy methods are called in the same order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Methods annotated with &lt;strong&gt;@PreDestroy&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;destroy()&lt;/strong&gt; as defined by the DisposableBean callback interface&lt;/li&gt;
&lt;li&gt;A custom configured &lt;strong&gt;destroy()&lt;/strong&gt; method&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;what-is-callback&#34;&gt;What is Callback&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;From Wikipedia&lt;/strong&gt;&lt;br&gt;
In computer programming, a &lt;strong&gt;callback&lt;/strong&gt;, also known as a &amp;ldquo;&lt;strong&gt;call-after&lt;/strong&gt;&amp;rdquo; function, is &lt;strong&gt;any executable code that is passed as an argument to other code&lt;/strong&gt;; that other code is expected to call back (execute) the argument at a given time. This execution may be immediate as in a &lt;strong&gt;synchronous callback&lt;/strong&gt;, or it might happen at a later time as in an &lt;strong&gt;asynchronous callback&lt;/strong&gt;. Programming languages support callbacks in different ways, often implementing them with&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;subroutines,&lt;/li&gt;
&lt;li&gt;lambda expressions,&lt;/li&gt;
&lt;li&gt;blocks,&lt;/li&gt;
&lt;li&gt;or function pointers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;For Java&lt;/strong&gt;&lt;br&gt;
In object-oriented programming languages without function-valued arguments, such as in Java before its 1.7 version, callbacks can be simulated by passing an instance of an abstract class or interface, of which the receiver will call one or more methods, while the calling end provides a concrete implementation. Something like below (from Stackoverflow)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class Test {
    public static void main(String[] args) throws  Exception {
        new Test().doWork(new Callback() { // implementing class            
            @Override
            public void call() {
                System.out.println(&amp;quot;callback called&amp;quot;);
            }
        });
    }

    public void doWork(Callback callback) {
        System.out.println(&amp;quot;doing work&amp;quot;);
        callback.call();
    }

    public interface Callback {
        void call();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;spring-bean-instantiation&#34;&gt;Spring Bean Instantiation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Instantiation with a constructor&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;bean id=&amp;quot;exampleBean&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instantiation with a static factory method&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;bean id=&amp;quot;exampleBean&amp;quot; factory-method=&amp;quot;createInstance&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Instantiation using an instance factory method&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;bean id=&amp;quot;myFactoryBean&amp;quot;  class=&amp;quot;...&amp;quot;&amp;gt;
     
  &amp;lt;bean id=&amp;quot;exampleBean&amp;quot;  factory-bean=&amp;quot;myFactoryBean&amp;quot; factory-method=&amp;quot;createInstance&amp;quot;&amp;gt;&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more details, go to the link 
&lt;a href=&#34;https://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/beans.html#beans-factory-class&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Instantiating beans&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;spring-bean-configurationcontainer-configuration&#34;&gt;Spring Bean Configuration/Container Configuration&lt;/h3&gt;
&lt;h4 id=&#34;xml-based&#34;&gt;XML-based&lt;/h4&gt;
&lt;p&gt;XML-based configuration metadata shows these beans configured as &lt;bean/&gt; elements inside a top-level &lt;beans/&gt; element.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Bean Configuration with Property&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
  &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
      xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
      xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans.xsd&amp;quot;&amp;gt;

      &amp;lt;!-- services --&amp;gt;

      &amp;lt;bean id=&amp;quot;petStore&amp;quot; class=&amp;quot;org.springframework.samples.jpetstore.services.PetStoreServiceImpl&amp;quot;&amp;gt;
          &amp;lt;property name=&amp;quot;accountDao&amp;quot; ref=&amp;quot;accountDao&amp;quot;/&amp;gt;
          &amp;lt;property name=&amp;quot;itemDao&amp;quot; ref=&amp;quot;itemDao&amp;quot;/&amp;gt;
          &amp;lt;!-- additional collaborators and configuration for this bean go here --&amp;gt;
      &amp;lt;/bean&amp;gt;

      &amp;lt;!-- more bean definitions for services go here --&amp;gt;

  &amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multiple Bean Configuration&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
  &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
      xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
      xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans.xsd&amp;quot;&amp;gt;

      &amp;lt;bean id=&amp;quot;accountDao&amp;quot;
          class=&amp;quot;org.springframework.samples.jpetstore.dao.jpa.JpaAccountDao&amp;quot;&amp;gt;
          &amp;lt;!-- additional collaborators and configuration for this bean go here --&amp;gt;
      &amp;lt;/bean&amp;gt;

      &amp;lt;bean id=&amp;quot;itemDao&amp;quot; class=&amp;quot;org.springframework.samples.jpetstore.dao.jpa.JpaItemDao&amp;quot;&amp;gt;
          &amp;lt;!-- additional collaborators and configuration for this bean go here --&amp;gt;
      &amp;lt;/bean&amp;gt;

      &amp;lt;!-- more bean definitions for data access objects go here --&amp;gt;

  &amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Multiple XML Files&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;beans&amp;gt;
      &amp;lt;import resource=&amp;quot;services.xml&amp;quot;/&amp;gt;
      &amp;lt;import resource=&amp;quot;resources/messageSource.xml&amp;quot;/&amp;gt;
      &amp;lt;import resource=&amp;quot;/resources/themeSource.xml&amp;quot;/&amp;gt;

      &amp;lt;bean id=&amp;quot;bean1&amp;quot; class=&amp;quot;...&amp;quot;/&amp;gt;
      &amp;lt;bean id=&amp;quot;bean2&amp;quot; class=&amp;quot;...&amp;quot;/&amp;gt;
  &amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;annotation-based&#34;&gt;Annotation-based&lt;/h4&gt;
&lt;p&gt;Spring 2.5 introduced support for annotation-based configuration metadata.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Annotation injection is performed before XML injection, thus the latter configuration will override the former for properties wired through both approaches.
  &lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Implicit Registeration&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
  &amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
      xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
      xmlns:context=&amp;quot;http://www.springframework.org/schema/context&amp;quot;
      xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context.xsd&amp;quot;&amp;gt;

      &amp;lt;context:annotation-config/&amp;gt;

  &amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;a href=&#34;context:annotation-config/&#34;&gt;context:annotation-config/&lt;/a&gt; only looks for annotations on beans in the same application context in which it is defined.&lt;br&gt;
This means that, if you put &lt;a href=&#34;context:annotation-config/&#34;&gt;context:annotation-config/&lt;/a&gt; in a WebApplicationContext for a DispatcherServlet, it only checks for @Autowired beans in your controllers, and not your services.
  &lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Annotate the Method&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public class SimpleMovieLister {

      private MovieFinder movieFinder;

      @Autowired
      public void setMovieFinder(MovieFinder movieFinder) {
          this.movieFinder = movieFinder;
      }

      // ...

  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    @Autowired annotation can be applied to setter methods, constructors, methods with arbitrary names and/or multiple arguments, fields, etc.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For more details, go to the link

&lt;a href=&#34;https://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/beans.html#beans-annotation-config&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Annotation-based container configuration&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;java-based-javaconfig&#34;&gt;Java-based (JavaConfig)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;JavaConfig Overview&lt;/p&gt;
&lt;p&gt;Starting with Spring 3.0, many features provided by the Spring JavaConfig project became part of the core Spring Framework. Thus you can define beans external to your application  classes by using Java rather than XML files. To use these new features, see the @Configuration, @Bean, @Import and @DependsOn annotations.&lt;/p&gt;
&lt;p&gt;Java configuration typically uses @Bean annotated methods within a @Configuration class.&lt;/p&gt;
&lt;p&gt;Spring JavaConfig is a product of the Spring community that provides a pure-Java approach to configuring the Spring IoC Container. While JavaConfig aims to be a feature-complete     option for configuration, it can be (and often is) used in conjunction with the more well-known XML-based configuration approach.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@Bean Annotation&lt;/p&gt;
&lt;p&gt;The @Bean annotation is used to indicate that a method instantiates, configures and initializes a new object to be managed by the Spring IoC container. For those familiar with Springâs &lt;beans/&gt; XML configuration the @Bean annotation plays the same role as the &lt;bean/&gt; element. You can use @Bean annotated methods with any Spring @Component, however, they are most often used with @Configuration beans.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;@Configuration Annotation&lt;/p&gt;
&lt;p&gt;Annotating a class with @Configuration indicates that its primary purpose is as a source of bean definitions. Furthermore, @Configuration classes allow inter-bean dependencies to be defined by simply calling other @Bean methods in the same class. The simplest possible @Configuration class would read as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  @Configuration
  public class AppConfig {

      @Bean
      public MyService myService() {
          return new MyServiceImpl();
      }

  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more details, go to the link

&lt;a href=&#34;https://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/beans.html#beans-java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java-based container configuration&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://docs.spring.io/spring/docs/4.2.x/spring-framework-reference/html/beans.html#beans-definition&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Core Technologies - beans definition&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://juejin.im/post/6844903618567471112&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;åè¯Spring ââ Beançè£éï¼ä¸ï¼&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://juejin.im/post/6844903619834150919&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;åè¯Spring ââ Beançè£éï¼äºï¼&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/17193365/what-in-the-world-are-spring-beans&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What in the world are Spring beans?&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://juejin.im/post/6844903813753602056&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Springæ³¨å¥Beançå ç§æ¹å¼&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://docs.huihoo.com/spring/zh-cn/beans.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Beans, BeanFactoryåApplicationContext&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.journaldev.com/2461/spring-ioc-bean-example-tutorial&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring IoC and Bean&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/21163355/spring-context-and-bean-lifecycle-callbacks-practical-examples-of-usage&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Context and Bean Lifecycle callbacks: practical examples of usage&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/25469369/what-do-you-mean-by-callbacks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;what do you mean by callbacks?&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://dzone.com/articles/spring-bean-lifecycle-using-spring-aware-interface&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Bean Lifecycle: Using Spring Aware Interfaces&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.geeksforgeeks.org/bean-life-cycle-in-java-spring/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bean life cycle in Java Spring&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://en.wikipedia.org/wiki/Callback_%28computer_programming%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Callback (computer programming)&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://howtodoinjava.com/spring-core/spring-bean-life-cycle/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring â Bean Life Cycle&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://dzone.com/articles/spring-bean-lifecycle&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Bean Lifecycle&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it ð&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Java Beans</title>
      <link>/coding/java/javabeans/</link>
      <pubDate>Fri, 17 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/coding/java/javabeans/</guid>
      <description>&lt;h2 id=&#34;java-beans&#34;&gt;Java Beans&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Software Components&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JavaBeans are classes that encapsulate many objects into a single object. They are serializable, have a zero-argument constructor, and allow access to properties using getter and setter methods.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;a Java classs&lt;/li&gt;
&lt;li&gt;serializable&lt;/li&gt;
&lt;li&gt;zero-argument constructor&lt;/li&gt;
&lt;li&gt;getter and setter&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A bean is a Java class with method names that follow the JavaBeans guidelines. A bean builder tool uses introspection to examine the bean class. Based on this inspection, the bean builder tool can figure out the bean&amp;rsquo;s properties, methods, and events.&lt;br&gt;
Almost any code can be packaged as a bean.&lt;br&gt;
The power of JavaBeans is that you can use software components without having to write them or understand their implementation.&lt;/p&gt;
&lt;h3 id=&#34;java-beans-example&#34;&gt;Java Beans Example&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;import java.io.Serializable;

public class Car implements Serializable {
    //Private Properties
    private String color;
    private Boolean isCar;

    //Zero-argument Constructor
    public Car(){}

    //Getter and Setter
    public void setColor(String color) { this.color = color; }
    
    public String getColor() { return color; }
    
    public void setCar(Boolean car) { isCar = car; }

    //&#39;is&#39; for Boolean getter
    public Boolean isCar() { return isCar; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;bean-properties&#34;&gt;Bean Properties&lt;/h3&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;Read and write property has getter and setter&lt;/li&gt;
&lt;li&gt;A read-only property has a getter method but no setter&lt;/li&gt;
&lt;li&gt;A write-only property has a setter method only&lt;/li&gt;
&lt;li&gt;Boolean property using is instead of get&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Indexed Properties&lt;br&gt;
an array instead of a single value&lt;/li&gt;
&lt;li&gt;Bound Properties&lt;br&gt;
PropertyChangeListeners&lt;/li&gt;
&lt;li&gt;Constrained Properties&lt;br&gt;
VetoableChangeListeners&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bean-methods&#34;&gt;Bean Methods&lt;/h3&gt;
&lt;p&gt;Any public method that is not part of a property definition is a bean method.&lt;/p&gt;
&lt;h3 id=&#34;bean-events&#34;&gt;Bean Events&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;A bean class can fire off any type of event&lt;/li&gt;
&lt;li&gt;Method names with a specific pattern&lt;/li&gt;
&lt;li&gt;Can be used in wiring components together&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;beaninfo&#34;&gt;BeanInfo&lt;/h3&gt;
&lt;p&gt;A BeanInfo is a class that changes how your bean appears in a builder tool.&lt;/p&gt;
&lt;h3 id=&#34;bean-persistence&#34;&gt;Bean Persistence&lt;/h3&gt;
&lt;h4 id=&#34;serialization&#34;&gt;Serialization&lt;/h4&gt;
&lt;p&gt;A bean has the property of persistence when its properties, fields, and state information are saved to and retrieved from storage.&lt;br&gt;
All beans must persist. To persist, must implement either of below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;java.io.Serializable&lt;/li&gt;
&lt;li&gt;java.io.Externalizable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any class is serializable as long as that class or a parent class implements the java.io.Serializable interface.&lt;br&gt;
Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Component&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Date&lt;/li&gt;
&lt;li&gt;Vector&lt;/li&gt;
&lt;li&gt;Hashtable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not serializable:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Image&lt;/li&gt;
&lt;li&gt;Thread&lt;/li&gt;
&lt;li&gt;Socket&lt;/li&gt;
&lt;li&gt;InputStream&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Controlling Serialization:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automatic serialization&lt;/li&gt;
&lt;li&gt;Customized serialization&lt;/li&gt;
&lt;li&gt;Customized file format&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;long-term-persistence&#34;&gt;Long Term Persistence&lt;/h4&gt;
&lt;p&gt;Long-term persistence is a model that enables beans to be saved in XML format.&lt;/p&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/JavaBeans&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaBeans&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://download.oracle.com/javase/tutorial/javabeans/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Oracle&amp;rsquo;s JavaBeans tutorials&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaBeans specification&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://juejin.im/post/6844903618567471112&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;åè¯Spring ââ Beançè£éï¼ä¸ï¼&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it ð&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Java Notes</title>
      <link>/coding/java/java-notes/</link>
      <pubDate>Tue, 31 Dec 2019 23:59:59 +0000</pubDate>
      <guid>/coding/java/java-notes/</guid>
      <description>&lt;h2 id=&#34;java-notes&#34;&gt;Java Notes&lt;/h2&gt;
&lt;p&gt;A free style notes of Java.&lt;/p&gt;
&lt;h3 id=&#34;top-10-mistakes-java-developers-make&#34;&gt;Top 10 Mistakes Java Developers Make&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.programcreek.com/2014/05/top-10-mistakes-java-developers-make/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Top 10 Mistakes Java Developers Make&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;differentiate-jvm-jre-jdk-jit&#34;&gt;Differentiate JVM JRE JDK JIT&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Java Virtual Machine (JVM) is an abstract computing machine.&lt;/li&gt;
&lt;li&gt;Java Runtime Environment (JRE) is an implementation of the JVM.&lt;/li&gt;
&lt;li&gt;Java Development Kit (JDK) contains JRE along with various development tools like Java libraries, Java source compilers, Java debuggers, bundling and deployment tools.&lt;/li&gt;
&lt;li&gt;Just In Time compiler (JIT) is runs after the program has started executing, on the fly. It has access to runtime information and makes optimizations of the code for better performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://javapapers.com/core-java/differentiate-jvm-jre-jdk-jit/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Differentiate JVM JRE JDK JIT&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;pass-by-value-and-pass-by-reference-and-pass-reference-by-value&#34;&gt;Pass By Value and Pass By Reference and Pass Reference by Value&lt;/h3&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Java uses pass by value. There is no pass by reference in Java.
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Pass By Value and Pass By Reference and Pass Reference by Value

&lt;a href=&#34;https://javapapers.com/core-java/java-pass-by-value-and-pass-by-reference/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Pass By Value and Pass By Reference&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java always passes parameter variables by value.&lt;/li&gt;
&lt;li&gt;Object variables in Java always point to the real object in the memory heap.&lt;/li&gt;
&lt;li&gt;A mutable objectâs value can be changed when it is passed to a method.&lt;/li&gt;
&lt;li&gt;An immutable objectâs value cannot be changed, even if it is passed a new value.&lt;/li&gt;
&lt;li&gt;âPassing by valueâ refers to passing a copy of the value.&lt;/li&gt;
&lt;li&gt;âPassing by referenceâ refers to passing the real reference of the variable in memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.infoworld.com/article/3512039/does-java-pass-by-reference-or-pass-by-value.html#:~:text=Java%20always%20passes%20parameter%20variables,is%20passed%20to%20a%20method.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Does Java pass by reference or pass by value?&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;java-jvm-memory-types&#34;&gt;Java (JVM) Memory Types&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Shared/Common Area&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Heap Memory&lt;br&gt;
Class instances and arrays are stored in heap memory. Heap memory is also called as shared memory. As this is the place where multiple threads will share the same data.&lt;br&gt;
Heap data area is created at VM startup. Claiming the memory back is done automatically by the garbage collector (GC).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Non-heap Memory&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Method area
Method area is created at JVM startup and shared among all the threads.
&lt;ol&gt;
&lt;li&gt;per-class structures (runtime constants and static fields)&lt;/li&gt;
&lt;li&gt;code for methods&lt;/li&gt;
&lt;li&gt;constructors&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Run-time Constant Pool&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Per-Thread Area&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Program Counter (PC) Register
PC keeps a pointer to the current statement that is being executed in its thread. If the current executing method is ânativeâ, then the value of program counter register will be undefined.&lt;/li&gt;
&lt;li&gt;JVM Stacks or Frames
Java JVM frames are created when a method is invoked, it performs the dynamic linking. JVM stacks are created and managed for each thread.&lt;/li&gt;
&lt;li&gt;Native Method Stacks
It is used for native methods, and created per thread.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Memory Generations&lt;/strong&gt;
HotSpot VMâs garbage collector uses generational garbage collection. It separates the JVMâs memory into and they are called young generation and old generation.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Young Generation&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Eden space&lt;/li&gt;
&lt;li&gt;Survivor space&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Old Generation&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Tenured Generation
GC moves live objects from survivor space to tenured generation.&lt;/li&gt;
&lt;li&gt;PermGen (Permanent Generation)
The permanent generation contains meta data of the virtual machine, class and method objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Java JVM Run-time Data Areas)[https://javapapers.com/core-java/java-jvm-run-time-data-areas/#Java_Virtual_Machine_Stacks]&lt;br&gt;
(Java (JVM) Memory Types)[https://javapapers.com/core-java/java-jvm-memory-types/]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key Takeaways&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Local Variables are stored in Frames during runtime.&lt;/li&gt;
&lt;li&gt;Static Variables are stored in Method Area.&lt;/li&gt;
&lt;li&gt;Arrays are stored in heap memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java-static&#34;&gt;Java Static&lt;/h3&gt;
&lt;h4 id=&#34;java-static-variables&#34;&gt;Java Static Variables&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Java instance variables are given separate memory for storage. If there is a need for a variable to be common to all the objects of a single java class, then the static modifier should be used in the variable declaration.&lt;/li&gt;
&lt;li&gt;Any java object that belongs to that class can modify its static variables.&lt;/li&gt;
&lt;li&gt;Also, an instance is not a must to modify the static variable and it can be accessed using the java class directly.&lt;/li&gt;
&lt;li&gt;Static variables can be accessed by java instance methods also.&lt;/li&gt;
&lt;li&gt;When the value of a constant is known at compile time it is declared âfinalâ using the âstaticâ keyword.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;java-static-methods&#34;&gt;Java Static Methods&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Similar to static variables, java static methods are also common to classes and not tied to a java instance.&lt;/li&gt;
&lt;li&gt;Good practice in java is that, static methods should be invoked with using the class name though it can be invoked using an object. ClassName.methodName(arguments) or objectName.methodName(arguments)&lt;/li&gt;
&lt;li&gt;General use for java static methods is to access static fields.&lt;/li&gt;
&lt;li&gt;Static methods can be accessed by java instance methods.&lt;/li&gt;
&lt;li&gt;Java static methods cannot access instance variables or instance methods directly.&lt;/li&gt;
&lt;li&gt;Java static methods cannot use the âthisâ keyword.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;java-static-classes&#34;&gt;Java Static Classes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;For java classes, only an inner class can be declared using the static modifier.&lt;/li&gt;
&lt;li&gt;For java a static inner class it does not mean that, all their members are static. These are called nested static classes in java.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://javapapers.com/core-java/explain-the-java-static-modifier/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Static&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;static-block&#34;&gt;Static Block&lt;/h3&gt;
&lt;p&gt;It&amp;rsquo;s a static initializer. It&amp;rsquo;s executed when the class is loaded (or initialized, to be precise, but you usually don&amp;rsquo;t notice the difference).&lt;br&gt;
It can be thought of as a &amp;ldquo;class constructor&amp;rdquo;.&lt;br&gt;
Note that there are also instance initializers, which look the same, except that they don&amp;rsquo;t have the static keyword. Those are run in addition to the code in the constructor when a new instance of the object is created.&lt;br&gt;
A static block in Java is a block of code that is executed at the time of loading a class for use in a Java application. It starts with a &amp;lsquo;static {&amp;rsquo; and it is used for initializing static Class members in general â and is also known as a &amp;lsquo;Static Initializer&amp;rsquo;. The most powerful use of a static block can be realized while performing operations that are required to be executed only once for a Class in an application lifecycle.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/2943556/static-block-in-java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Static Block in Java&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://dzone.com/articles/the-hidden-synchronized-keyword-with-a-static-bloc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Hidden Synchronized Keyword With a Static Block&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;builder-patter&#34;&gt;Builder Patter&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Builder&lt;/strong&gt; is a creational design pattern that lets you construct complex objects step by step. The pattern allows you to produce different types and representations of an object using the same construction code.&lt;/p&gt;
&lt;p&gt;Builder pattern builds a complex object using simple objects and using a step by step approach. This type of design pattern comes under creational pattern as this pattern provides one of the best ways to create an object.&lt;/p&gt;
&lt;p&gt;A Builder class builds the final object step by step. This builder is independent of other objects.&lt;/p&gt;
&lt;h4 id=&#34;pros-and-cons&#34;&gt;Pros and Cons&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can construct objects step-by-step, defer construction steps or run steps recursively.&lt;/li&gt;
&lt;li&gt;You can reuse the same construction code when building various representations of products.&lt;/li&gt;
&lt;li&gt;Single Responsibility Principle. You can isolate complex construction code from the business logic of the product.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The overall complexity of the code increases since the pattern requires creating multiple new classes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;relations-with-other-patterns&#34;&gt;Relations with Other Patterns&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Many designs start by using &lt;strong&gt;Factory Method&lt;/strong&gt; (less complicated and more customizable via subclasses) and evolve toward &lt;strong&gt;Abstract Factory&lt;/strong&gt;, &lt;strong&gt;Prototype&lt;/strong&gt;, or &lt;strong&gt;Builder&lt;/strong&gt; (more flexible, but more complicated).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Builder&lt;/strong&gt; focuses on constructing complex objects step by step. &lt;strong&gt;Abstract Factory&lt;/strong&gt; specializes in creating families of related objects. Abstract Factory returns the product immediately, whereas Builder lets you run some additional construction steps before fetching the product.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can use &lt;strong&gt;Builder&lt;/strong&gt; when creating complex &lt;strong&gt;Composite&lt;/strong&gt; trees because you can program its construction steps to work recursively.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can combine &lt;strong&gt;Builder&lt;/strong&gt; with &lt;strong&gt;Bridge&lt;/strong&gt;: the director class plays the role of the abstraction, while different builders act as implementations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Abstract Factories&lt;/strong&gt;, &lt;strong&gt;Builders&lt;/strong&gt; and &lt;strong&gt;Prototypes&lt;/strong&gt; can all be implemented as &lt;strong&gt;Singletons&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Builder_pattern&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Builder pattern&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://refactoring.guru/design-patterns/builder&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Builder&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.tutorialspoint.com/design_pattern/builder_pattern.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Design Patterns - Builder Pattern&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;transient-keyword-in-java&#34;&gt;transient keyword in Java&lt;/h3&gt;
&lt;p&gt;The transient keyword in Java is used to indicate that a field should not be part of the serialization (which means saved, like to a file) process.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/910374/why-does-java-have-transient-fields&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Why does Java have transient fields?&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;array-vs-arraylist&#34;&gt;Array vs. ArrayList&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Array&lt;/strong&gt; is a fixed length data structure whereas &lt;strong&gt;ArrayList&lt;/strong&gt; is a variable length Collection class.&lt;/li&gt;
&lt;li&gt;We cannot change length of array once created in Java but ArrayList can be changed.&lt;/li&gt;
&lt;li&gt;We cannot store primitives in ArrayList, it can only store objects. But array can contain both primitives and objects in Java.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.javatpoint.com/array-vs-arraylist-in-java#:~:text=Array%20is%20a%20fixed%20length,primitives%20and%20objects%20in%20Java.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Array vs ArrayList in Java&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.geeksforgeeks.org/array-vs-arraylist-in-java/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Array vs ArrayList in Java&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;arraysaslist-vs-new-arraylist&#34;&gt;Arrays.asList() vs new ArrayList()&lt;/h3&gt;
&lt;p&gt;When you call Arrays.asList it does not return a java.util.ArrayList. It returns a java.util.Arrays$ArrayList which is a fixed size list backed by the original source array. In other words, it is a view for the array exposed with Java&amp;rsquo;s collection-based APIs.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/16748030/difference-between-arrays-aslistarray-and-new-arraylistintegerarrays-aslist/16748184#:~:text=asList%28ia%29%20returns%20a%20List,from%20new%20ArrayList%20.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Difference between Arrays.asList(array) and new ArrayList&lt;Integer&gt;(Arrays.asList(array))&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/4658867/why-does-arrays-aslist-return-its-own-arraylist-implementation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Why does Arrays.asList() return its own ArrayList implementation&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;access-level&#34;&gt;Access Level&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./access-level.png&#34; alt=&#34;access-level&#34;&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.programcreek.com/2011/11/java-access-level-public-protected-private/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Access Level for Members: public, protected, private&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;set-vs-set&#34;&gt;Set vs. Set&amp;lt;?&amp;gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;an unbounded wildcard Set&amp;lt;?&amp;gt; can hold elements of any type, and a raw type Set can also hold elements of any type.&lt;/li&gt;
&lt;li&gt;wildcard type is safe and the raw type is not. We can not put any element into a Set&amp;lt;?&amp;gt;&lt;/li&gt;
&lt;li&gt;When you want to use a generic type, but you don&amp;rsquo;t know or care what the actual type the parameter is, you can use &amp;lt;?&amp;gt;[1]. It can only be used as parameters for a method.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.programcreek.com/2013/12/raw-type-set-vs-unbounded-wildcard-set/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Raw type vs. Unbounded wildcard&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;arraylist-vs-linkedlist-vs-vector&#34;&gt;ArrayList vs. LinkedList vs. Vector&lt;/h3&gt;
&lt;h4 id=&#34;implementation&#34;&gt;Implementation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ArrayList&lt;/strong&gt; is implemented as a resizable array. As more elements are added to ArrayList, its size is increased dynamically. It&amp;rsquo;s elements can be accessed directly by using the get and set methods, since ArrayList is essentially an array.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LinkedList&lt;/strong&gt; is implemented as a double linked list. Its performance on add and remove is better than Arraylist, but worse on get and set methods.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vector&lt;/strong&gt; is similar with ArrayList, but it is synchronized.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;some-details&#34;&gt;Some details&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;ArrayList is a better choice if your program is thread-safe.&lt;/li&gt;
&lt;li&gt;Vector and ArrayList require more space as more elements are added.&lt;/li&gt;
&lt;li&gt;Vector each time doubles its array size, while ArrayList grow 50% of its size each time.&lt;/li&gt;
&lt;li&gt;LinkedList, however, also implements Queue interface which adds more methods than ArrayList and Vector, such as offer(), peek(), poll(), etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The default initial capacity of an ArrayList is pretty small. It is a good habit to construct the ArrayList with a higher initial capacity. This can avoid the resizing cost.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;how-to-use&#34;&gt;How to use&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;LinkedList should be preferred if there are a large number of add/remove operations&lt;/li&gt;
&lt;li&gt;LinkedList should be preferred if there are not a lot of random access operations.&lt;/li&gt;
&lt;li&gt;Vector is almost identical to ArrayList, and the difference is that Vector is synchronized. Because of this, it has an overhead than ArrayList. Normally, most Java programmers use ArrayList instead of Vector because they can synchronize explicitly by themselves.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;./time-complexity-arraylist-linkedlist.png&#34; alt=&#34;time-complexity-arraylist-linkedlist&#34;&gt;&lt;br&gt;
add() in the table refers to add(E e), and remove() refers to remove(int index)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ArrayList has O(n) time complexity for arbitrary indices of add/remove, but O(1) for the operation at the end of the list.&lt;/li&gt;
&lt;li&gt;LinkedList has O(n) time complexity for arbitrary indices of add/remove, but O(1) for operations at end/beginning of the List.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java-collection-hierarchy&#34;&gt;Java Collection Hierarchy&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;./java-collection-hierarchy.png&#34; alt=&#34;java-collection-hierarchy&#34;&gt;&lt;br&gt;
&lt;img src=&#34;./java-vollections-hierarchy-1.png&#34; alt=&#34;java-vollections-hierarchy-1&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;mutable-vs-immutable&#34;&gt;Mutable vs. Immutable&lt;/h3&gt;
&lt;h3 id=&#34;java-generics&#34;&gt;Java Generics&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;http://tutorials.jenkov.com/java-generics/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Generics Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;javautilproperties&#34;&gt;Java.util.Properties&lt;/h3&gt;
&lt;p&gt;The java.util.Properties class is a class which represents a persistent set of properties.The Properties can be saved to a stream or loaded from a stream.Following are the important points about Properties&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each key and its corresponding value in the property list is a string.&lt;/li&gt;
&lt;li&gt;A property list can contain another property list as its &amp;lsquo;defaults&amp;rsquo;, this second property list is searched if the property key is not found in the original property list.&lt;/li&gt;
&lt;li&gt;This class is thread-safe; multiple threads can share a single Properties object without the need for external synchronization.&lt;/li&gt;
&lt;li&gt;Properties is a subclass of Hashtable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.tutorialspoint.com/java/util/java_util_properties.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java.util.Properties Class&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.geeksforgeeks.org/java-util-properties-class-java/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java.util.Properties class in Java&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it ð&lt;/h4&gt;
</description>
    </item>
    
  </channel>
</rss>
