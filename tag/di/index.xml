<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DI | flycoolman</title>
    <link>/tag/di/</link>
      <atom:link href="/tag/di/index.xml" rel="self" type="application/rss+xml" />
    <description>DI</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>©2023 flycoolman.com All Rights Reserved</copyright><lastBuildDate>Sat, 01 Aug 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu42a5118afc49636e6fda7ce5d4b48056_3366_512x512_fill_lanczos_center_2.png</url>
      <title>DI</title>
      <link>/tag/di/</link>
    </image>
    
    <item>
      <title>Inversion of Control and Dependency Injection</title>
      <link>/coding/java/ioc-di/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      <guid>/coding/java/ioc-di/</guid>
      <description>&lt;h3 id=&#34;inversion-of-control-ioc&#34;&gt;Inversion of Control (IoC)&lt;/h3&gt;
&lt;p&gt;A real system might have dozens of services and components. To make a loosely coupled application, the way is to plug in the plugins (components and services) at some point.
So the core problem is how to assemble the plugins into an application. Then frameworks aim to resolve the problem. Usually &lt;strong&gt;Inversion of Control&lt;/strong&gt; is used in frameworks, so does Spring Framework. That&amp;rsquo;s why Inversion of Control (IoC) is the core technology of Spring Framework.&lt;/p&gt;
&lt;h4 id=&#34;inversion-of-control-ioc-vs-traditional-control&#34;&gt;Inversion of Control (IoC) vs. Traditional Control&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Traditional Control&lt;br&gt;
In traditional programming, the custom code that expresses the purpose of the program calls into reusable libraries to take care of generic tasks.&lt;br&gt;
I.e.&lt;br&gt;
the custom object instantiates its dependent objects, then uses the objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inversion of Control (IoC)&lt;br&gt;
IoC inverts the flow of control as compared to traditional control flow. In IoC, custom-written portions of a computer program receive the flow of control from a generic framework.
Usually it is the framework that calls into the custom, or task-specific, code.&lt;br&gt;
I.e.&lt;br&gt;
the custom object receives the instantiated dependent objects from framework.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;what-can-ioc-serve&#34;&gt;What Can IoC Serve&lt;/h4&gt;
&lt;p&gt;IoC as a design guideline, is used to increase modularity of the program and make it extensible. It serves the following purposes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To decouple the execution of a task from implementation.&lt;/li&gt;
&lt;li&gt;To make every module focus on what it is designed for.&lt;/li&gt;
&lt;li&gt;To free modules from assumptions about how and what other systems do, and instead rely on contracts.&lt;/li&gt;
&lt;li&gt;To prevent side effects on other modules when replacing a module.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;spring-implementation-of-ioc-principle&#34;&gt;Spring Implementation of IoC Principle&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;IoC&lt;/strong&gt; is also known as &lt;strong&gt;dependency injection (DI)&lt;/strong&gt;. It is a process whereby objects define their dependencies (that is, the other objects they work with) only through constructor arguments, arguments to a factory method, or properties that are set on the object instance after it is constructed or returned from a factory method. The container then injects those dependencies when it creates the bean. This process is fundamentally the inverse (hence the name, Inversion of Control) of the bean itself controlling the instantiation or location of its dependencies by using direct construction of classes or a mechanism such as the Service Locator pattern.&lt;/p&gt;
&lt;p&gt;This is common characteristic of frameworks, IoC manages java objects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;from instantiation to destruction through its BeanFactory.&lt;/li&gt;
&lt;li&gt;Java components that are instantiated by the IoC container are called beans, and the IoC container manages a bean&amp;rsquo;s scope, lifecycle events, and any AOP features for which it has been configured and coded.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    In Spring framework, the IoC Container does that job of injecting dependancies (DI) and not us, The flow of control is reversed, (Framework to Application) it is IoC with DI.
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&#34;spring-ioc-container&#34;&gt;Spring IoC Container&lt;/h3&gt;
&lt;p&gt;Central to the Spring Framework is its inversion of control (IoC) container, which provides a consistent means of configuring and managing Java objects using reflection. The container is responsible for managing object lifecycles of specific objects: creating these objects, calling their initialization methods, and configuring these objects by wiring them together.&lt;/p&gt;
&lt;p&gt;The interface &lt;strong&gt;org.springframework.context.ApplicationContext&lt;/strong&gt; represents the Spring IoC container and is responsible for &lt;strong&gt;instantiating&lt;/strong&gt;, &lt;strong&gt;configuring&lt;/strong&gt;, and &lt;strong&gt;assembling&lt;/strong&gt; the aforementioned beans. The container gets its instructions on what objects to instantiate, configure, and assemble by reading &lt;strong&gt;configuration metadata&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;Representation - org.springframework.context.ApplicationContext&lt;/li&gt;
&lt;li&gt;Responsibilities - instantiating, configuring, and assembling Beans&lt;/li&gt;
&lt;li&gt;Tool: configuration metadata&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;types-of-ioc-containers&#34;&gt;Types of IoC Containers&lt;/h4&gt;
&lt;p&gt;The &lt;strong&gt;org.springframework.beans&lt;/strong&gt; and &lt;strong&gt;org.springframework.context&lt;/strong&gt; packages provide the basis for the Spring Framework’s IoC container.&lt;br&gt;
The &lt;strong&gt;BeanFactory interface&lt;/strong&gt; provides an advanced configuration mechanism capable of managing objects of any nature.&lt;br&gt;
The &lt;strong&gt;ApplicationContext interface&lt;/strong&gt; builds on top of the BeanFactory (it is a sub-interface) and adds other functionality such as easier integration with Spring’s AOP features, message resource handling (for use in internationalization), event propagation, and application-layer specific contexts such as the WebApplicationContext for use in web applications.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BeanFactory container&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The BeanFactory is the actual representation of the Spring IoC container that is responsible for containing and otherwise managing the aforementioned beans.&lt;/li&gt;
&lt;li&gt;The BeanFactory interface is the central IoC container interface in Spring. The BeanFactory API provides the underlying basis for Spring’s IoC functionality.&lt;/li&gt;
&lt;li&gt;Its specific contracts are mostly used in integration with other parts of Spring and related third-party frameworks.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ApplicationContext container&lt;br&gt;
Because an ApplicationContext includes all the functionality of a BeanFactory, it is generally recommended over a plain BeanFactory, except for scenarios where full control over bean processing is needed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;In short, the BeanFactory provides the configuration framework and basic functionality, and the ApplicationContext adds more enterprise-specific functionality. The ApplicationContext is a complete superset of the BeanFactory.&lt;/li&gt;
&lt;li&gt;You should use an ApplicationContext unless you have a good reason for not doing so, with GenericApplicationContext and its subclass AnnotationConfigApplicationContext as the common implementations for custom bootstrapping.&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&#34;dependency-injection-di&#34;&gt;Dependency Injection (DI)&lt;/h3&gt;
&lt;p&gt;Inversion of Control is too generic a term, and thus people find it confusing. As a result with a lot of discussion with various IoC advocates, the name was settled on &lt;strong&gt;Dependency Injection&lt;/strong&gt;.&lt;br&gt;
Dependency injection generally means passing a dependent object as a parameter to a method, rather than having the method create the dependent object.
What it means in practice is that the method does not have a direct dependency on a particular implementation; any implementation that meets the requirements can be passed as a parameter.&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The Spring IoC Container is the leading dependency injection framework.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;dependency-lookup-vs-dependency-injection&#34;&gt;Dependency Lookup vs. Dependency Injection&lt;/h4&gt;
&lt;p&gt;Objects can be obtained by means of either dependency lookup or dependency injection.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dependency lookup is a pattern where a caller asks the container object for an object with a specific name or of a specific type.&lt;/li&gt;
&lt;li&gt;Dependency injection is a pattern where the container passes objects by name to other objects, via either constructors, properties, or factory methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-styles-of-di&#34;&gt;The Styles of DI&lt;/h4&gt;
&lt;p&gt;Dependency Injection can be done by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Constructor-based dependency injection&lt;br&gt;
Constructor-based DI is accomplished by the container invoking a constructor with a number of arguments, each representing a dependency.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public class SimpleMovieLister {

      // the SimpleMovieLister has a dependency on a MovieFinder
      private MovieFinder movieFinder;

      // a constructor so that the Spring container can inject a MovieFinder
      public SimpleMovieLister(MovieFinder movieFinder) {
          this.movieFinder = movieFinder;
      }

      // business logic that actually uses the injected MovieFinder is omitted...
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setter-based dependency injection&lt;br&gt;
Setter-based DI is accomplished by the container calling setter methods on your beans after invoking a no-argument constructor or a no-argument static factory method to instantiate your bean.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public class SimpleMovieLister {

      // the SimpleMovieLister has a dependency on the MovieFinder
      private MovieFinder movieFinder;

      // a setter method so that the Spring container can inject a MovieFinder
      public void setMovieFinder(MovieFinder movieFinder) {
          this.movieFinder = movieFinder;
      }

      // business logic that actually uses the injected MovieFinder is omitted...
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;constructor-based-or-setter-based-di&#34;&gt;Constructor-based or Setter-based DI&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Constructor-based and setter-based DI can be mixed&lt;/li&gt;
&lt;li&gt;Constructors for mandatory dependencies and setter methods or configuration methods for optional dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Why&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Constructor injection lets you implement application components as immutable objects and ensures that required dependencies are not null. Furthermore, constructor-injected components are always returned to the client (calling) code in a fully initialized state.&lt;/li&gt;
&lt;li&gt;Setter injection should primarily only be used for optional dependencies that can be assigned reasonable default values within the class. Otherwise, not-null checks must be performed everywhere the code uses the dependency. One benefit of setter injection is that setter methods make objects of that class amenable to reconfiguration or re-injection later.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Use the DI style that makes the most sense for a particular class.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;ioc-vs-di&#34;&gt;IoC vs. DI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Interchangable&lt;br&gt;
IoC and DI are used interchangeably.&lt;/li&gt;
&lt;li&gt;Process and Result&lt;br&gt;
IoC is achieved through DI. DI is the process of providing the dependencies and IoC is the end result of DI.&lt;/li&gt;
&lt;li&gt;One to Many&lt;br&gt;
DI is a specific type of IoC and is not the only way to achieve IoC. There are other ways as well, such as:
&lt;ul&gt;
&lt;li&gt;Service Locator pattern&lt;/li&gt;
&lt;li&gt;Template method design pattern&lt;/li&gt;
&lt;li&gt;Strategy design pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;ul&gt;
&lt;li&gt;IoC basically facilitates having different components designed and coded separately and later used together by defining their relation with DI.&lt;/li&gt;
&lt;li&gt;By DI, the responsibility of creating objects is shifted from our application code to the Spring container; this phenomenon is called IoC.&lt;/li&gt;
&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-introduction&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The IoC Container&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://martinfowler.com/articles/injection.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Inversion of Control Containers and the Dependency Injection pattern&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://en.wikipedia.org/wiki/Spring_Framework#Inversion_of_control_container_.28dependency_injection.29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Framework&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/9403155/what-is-dependency-injection-and-inversion-of-control-in-spring-framework&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What is Dependency Injection and Inversion of Control in Spring Framework?&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://howtodoinjava.com/spring-core/spring-ioc-vs-di/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring – Inversion of Control vs Dependency Injection&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://howtodoinjava.com/spring-core/different-spring-ioc-containers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring – IoC Containers&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://en.wikipedia.org/wiki/Inversion_of_control#Implementation_techniques&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Inversion of control&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/9403155/what-is-dependency-injection-and-inversion-of-control-in-spring-framework&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What is Dependency Injection and Inversion of Control in Spring Framework?&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/BeanFactory.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Interface BeanFactory&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/ApplicationContext.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Interface ApplicationContext&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-beanfactory&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The BeanFactory&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h4&gt;
</description>
    </item>
    
  </channel>
</rss>
