<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python | flycoolman</title>
    <link>/tag/python/</link>
      <atom:link href="/tag/python/index.xml" rel="self" type="application/rss+xml" />
    <description>Python</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â©2020 flycoolman.com All Rights Reserved</copyright><lastBuildDate>Fri, 11 Sep 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu42a5118afc49636e6fda7ce5d4b48056_3366_512x512_fill_lanczos_center_2.png</url>
      <title>Python</title>
      <link>/tag/python/</link>
    </image>
    
    <item>
      <title>Python x-ables</title>
      <link>/coding/python/python-x-ables/</link>
      <pubDate>Fri, 11 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/coding/python/python-x-ables/</guid>
      <description>&lt;h2 id=&#34;python-x-ables&#34;&gt;Python x-ables&lt;/h2&gt;
&lt;p&gt;iterable, hashable, subscriptable, callable&lt;/p&gt;
&lt;p&gt;&amp;lsquo;builtin_function_or_method&amp;rsquo; object is not subscriptable

&lt;a href=&#34;https://stackoverflow.com/questions/19989606/builtin-function-or-method-object-is-not-subscriptable&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&amp;lsquo;builtin_function_or_method&amp;rsquo; object is not subscriptable&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    TBD
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it ðŸ™Œ&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>list, tuple, dict vs List, Tuple, Dict</title>
      <link>/coding/python/list-tuple-dict-vs-list-tuple-dict/</link>
      <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
      <guid>/coding/python/list-tuple-dict-vs-list-tuple-dict/</guid>
      <description>&lt;h3 id=&#34;type-hints&#34;&gt;Type Hints&lt;/h3&gt;
&lt;h4 id=&#34;what-is-the-challenge&#34;&gt;What is the challenge&lt;/h4&gt;
&lt;p&gt;Due to the dynamic nature of Python, inferring or checking the type of an object being used is especially hard. This fact makes it hard for developers to understand what exactly is going on in code they haven&amp;rsquo;t written and, most importantly, for type checking tools found in many IDEs [PyCharm, PyDev come to mind] that are limited due to the fact that they don&amp;rsquo;t have any indicator of what type the objects are. As a result they resort to trying to infer the type with (as mentioned in the presentation) around 50% success rate.&lt;/p&gt;
&lt;h4 id=&#34;type-hinting&#34;&gt;Type hinting&lt;/h4&gt;
&lt;p&gt;Type hinting is a formal solution to statically indicate the type of a value within your Python code. It was specified in 
&lt;a href=&#34;https://www.python.org/dev/peps/pep-0484/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PEP 484&lt;/a&gt;
and introduced in Python 3.5.&lt;/p&gt;
&lt;p&gt;Hereâ€™s an example of adding type information to a function. You annotate the arguments and the return value:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def greet(name: str) -&amp;gt; str:
    return &amp;quot;Hello, &amp;quot; + name
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;name: str&lt;/strong&gt; syntax indicates the name argument should be of type str. The &lt;strong&gt;-&amp;gt;&lt;/strong&gt; syntax indicates the greet() function will return a string.&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;&lt;strong&gt;The below two statements can be found in the 
&lt;a href=&#34;https://www.youtube.com/watch?v=2wDvzy6Hgxg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Type Hinting&lt;/a&gt; presentation:&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;why-type-hints&#34;&gt;Why Type Hints&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Helps Type Checkers&lt;/strong&gt;: By hinting at what type you want the object to be the type checker can easily detect if, for instance, you&amp;rsquo;re passing an object with a type that isn&amp;rsquo;t expected.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Helps with documentation&lt;/strong&gt;: A third person viewing your code will know what is expected where, ergo, how to use it without getting them TypeErrors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Helps IDEs develop more accurate and robust tools&lt;/strong&gt;: Development Environments will be better suited at suggesting appropriate methods when know what type your object is. You have probably experienced this with some IDE at some point, hitting the . and having methods/attributes pop up which aren&amp;rsquo;t defined for an object.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;why-use-static-type-checkers&#34;&gt;Why use Static Type Checkers?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Find bugs sooner&lt;/strong&gt;: This is self evident, I believe.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The larger your project the more you need it&lt;/strong&gt;: Again, makes sense. Static languages offer a robustness and control that dynamic languages lack. The bigger and more complex
your application becomes the more control and predictability (from a behavioral aspect) you require.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Large teams are already running static analysis&lt;/strong&gt;: I&amp;rsquo;m guessing this verifies the first two points.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;type-hinting-with-mypy&#34;&gt;Type Hinting with Mypy&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;http://mypy-lang.org/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mypy&lt;/a&gt; is an optional static type checker for Python that aims to combine the benefits of dynamic (or &amp;ldquo;duck&amp;rdquo;) typing and static typing. Mypy combines the expressive power and convenience of Python with a powerful type system and compile-time type checking. Mypy type checks standard Python programs; run them using any Python VM with basically no runtime overhead.&lt;/p&gt;
&lt;p&gt;PEP 484 doesn&amp;rsquo;t enforce anything; it is simply setting a direction for function annotations and proposing guidelines for how type checking can/should be performed. You can annotate your functions and hint as many things as you want; your scripts will still run regardless of the presence of annotations because Python itself doesn&amp;rsquo;t use them.&lt;/p&gt;
&lt;p&gt;As noted in the PEP, hinting types should generally take three forms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Function annotations&lt;/strong&gt;. 
&lt;a href=&#34;https://www.python.org/dev/peps/pep-3107/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PEP 3107&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stub files&lt;/strong&gt; for built-in/user modules.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Special # type&lt;/strong&gt;: type comments that complement the first two forms. (See: 
&lt;a href=&#34;https://stackoverflow.com/questions/39971929/what-are-variable-annotations-in-python-3-6/39973133#39973133&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What are variable annotations in Python 3.6?&lt;/a&gt; for a Python 3.6 update for &lt;strong&gt;# type: type&lt;/strong&gt; comments)
Additionally, you&amp;rsquo;ll want to use type hints in conjunction with the new typing module introduced in Py3.5.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Additionally, you&amp;rsquo;ll want to use type hints in conjunction with the new &lt;strong&gt;typing module&lt;/strong&gt; introduced in Py3.5.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;the-typing-module&#34;&gt;The Typing Module&lt;/h3&gt;
&lt;p&gt;The Typing Module supports type hints as specified by 
&lt;a href=&#34;https://www.python.org/dev/peps/pep-0484/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PEP 484&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The typing module also supports:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&#34;https://docs.python.org/3/library/typing.html#type-aliases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Type aliasing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Type hinting for callback functions: 
&lt;a href=&#34;https://docs.python.org/3/library/typing.html#callable&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Callable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://docs.python.org/3/library/typing.html#generics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Generics&lt;/a&gt; - Abstract base classes have been extended to support subscription to denote expected types for container elements&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://docs.python.org/3/library/typing.html#user-defined-generic-types&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;User-defined generic types&lt;/a&gt; - A user-defined class can be defined as a generic class&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://docs.python.org/3/library/typing.html#typing.Any&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Any type&lt;/a&gt; - Every type is a subtype of Any&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;type-hinting-generics&#34;&gt;Type Hinting Generics&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;from typing import List
class Solution:
    def twoSum(self, numbers: List[int], target: int) -&amp;gt; List[int]:
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;list-tupleetc-vs-listtupleetc&#34;&gt;List, Tuple/etc vs list/tuple/etc&lt;/h3&gt;
&lt;p&gt;typing.Tuple and typing.List are 
&lt;a href=&#34;https://docs.python.org/3/library/typing.html#generics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Generic types&lt;/a&gt;; this means you can specify what type their contents must be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def f(points: Tuple[float, float]):
    return map(do_stuff, points)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This specifies that the tuple passed in must contain two float values.&lt;br&gt;
&lt;strong&gt;You can&amp;rsquo;t do this with the built-in tuple type before Python 3.9.&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Python 3.9 has the change that built-in types support hints&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    You should always pick the typing generics even when you are not currently restricting the contents. It is easier to add that constraint later with a generic type as the resulting change will be smaller.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    From Python 3.9 (PEP 585) onwards tuple, list and various other classes are now generic types. Using these rather than their typing counterpart is now preferred.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    You should always pick then &lt;strong&gt;non-typing generics&lt;/strong&gt; whenever possible as the old &lt;strong&gt;typing.Tuple&lt;/strong&gt;, &lt;strong&gt;typing.List&lt;/strong&gt; and &lt;strong&gt;other generics&lt;/strong&gt; are &lt;strong&gt;deprecated&lt;/strong&gt; and will be removed in a later version of Python.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/32557920/what-are-type-hints-in-python-3-5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What are type hints in Python 3.5?&lt;/a&gt;

&lt;a href=&#34;https://www.python.org/dev/peps/pep-0585/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PEP 585 &amp;ndash; Type Hinting Generics In Standard Collections&lt;/a&gt;

&lt;a href=&#34;https://docs.python.org/3.9/library/typing.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;typing â€” Support for type hints&lt;/a&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/39458193/using-list-tuple-etc-from-typing-vs-directly-referring-type-as-list-tuple-etc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Using List/Tuple/etc. from typing vs directly referring type as list/tuple/etc&lt;/a&gt;

&lt;a href=&#34;https://stackoverflow.com/questions/52629265/static-typing-in-python3-list-vs-list&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Static typing in python3: list vs List&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.python.org/dev/peps/pep-0483/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PEP 483 &amp;ndash; The Theory of Type Hints&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.python.org/dev/peps/pep-0484/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PEP 484 &amp;ndash; Type Hints&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.youtube.com/watch?v=2wDvzy6Hgxg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Type Hints - Guido van Rossum - PyCon 2015&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://realpython.com/lessons/type-hinting/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Type Hinting&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://realpython.com/lessons/type-checking-mypy/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Type Checking With Mypy&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;http://mypy-lang.org/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mypy&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it ðŸ™Œ&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>IETF Datatracker Environment Setup</title>
      <link>/coding/python/ietf-datatracker-environment-setup/</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/coding/python/ietf-datatracker-environment-setup/</guid>
      <description>&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Linux host machine (i.e. Ubuntu 18.04)&lt;/li&gt;
&lt;li&gt;Vagrant (i.e. 2.9.9)&lt;/li&gt;
&lt;li&gt;VirtualBox (i.e. 6.1.12)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    The version numbers are just for my environment.&lt;br&gt;
Find the original log of my setup &lt;a href=&#34;./ietf_datatracker_env_setup.txt&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;The steps are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use Vagrant to boot up a VM&lt;/li&gt;
&lt;li&gt;Install GUI on the VM&lt;/li&gt;
&lt;li&gt;Install Docker on the VM&lt;/li&gt;
&lt;li&gt;Install SVN&lt;/li&gt;
&lt;li&gt;Check out the branch&lt;/li&gt;
&lt;li&gt;Set up database&lt;/li&gt;
&lt;li&gt;Set up virtual environment&lt;/li&gt;
&lt;li&gt;Run the tests&lt;/li&gt;
&lt;li&gt;Start the Development Server&lt;/li&gt;
&lt;li&gt;Mailserver and Rsync Data&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;step-1-use-vagrant-to-boot-up-a-vm&#34;&gt;Step 1: Use Vagrant to boot up a VM&lt;/h3&gt;
&lt;p&gt;Put the below Vagrantfile into working directory and execute &amp;lsquo;Vagrant up&amp;rsquo;.

&lt;a href=&#34;./Vagrantfile&#34;&gt;Vagrantfile&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;step-2-install-gui-on-the-vm&#34;&gt;Step 2: Install GUI on the VM&lt;/h3&gt;
&lt;p&gt;Ssh to the VM,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vagrant ssh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then use the below commands to intall GUI on the VM.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo yum -y groupinstall &amp;quot;GNOME Desktop&amp;quot;
echo &amp;quot;exec gnome-session&amp;quot; &amp;gt;&amp;gt; ~/.xinitrc
systemctl set-default graphical.target
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use command&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;startx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;in VirtualBox console to start the GUI.&lt;/p&gt;
&lt;h3 id=&#34;step-3-install-docker-on-the-vm&#34;&gt;Step 3: Install Docker on the VM&lt;/h3&gt;
&lt;p&gt;Install docker and start the service.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo yum -y install docker
sudo systemctl status docker
sudo systemctl start docker
sudo systemctl enable docker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create user group &amp;lsquo;docker&amp;rsquo; and add you into the group.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo groupadd docker
sudo usermod -aG docker $(whoami)
sudo usermod -aG docker vagrant
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reevaluate the group and restart the docker service.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;logout
sudo systemctl restart docker
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check if you can run docker commands without sudo.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker info
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-4-install-svn&#34;&gt;Step 4: Install SVN&lt;/h3&gt;
&lt;p&gt;Add the repository and install SVN.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vim /etc/yum.repos.d/wandisco-svn.repo
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;[WandiscoSVN]
name=Wandisco SVN Repo
baseurl=http://opensource.wandisco.com/centos/$releasever/svn-1.8/RPMS/$basearch/
enabled=1
gpgcheck=0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;sudo yum remove subversion*
sudo yum clean all
sudo yum install subversion

svn --version
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-5-check-out-the-branch&#34;&gt;Step 5: Check out the branch&lt;/h3&gt;
&lt;p&gt;UTF-8 settings:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export LC_ALL=C
sudo vi .bashrc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add below to the file ~/.bashrc&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;LANG=en_US.UTF-8
export LANG&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Change SELinux settings, so that docker image can access your home directory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chcon -Rt svirt_sandbox_file_t /home/vagrant/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Checkout the branch&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir -p ietf
cd ietf
svn co https://svn.tools.ietf.org/svn/tools/ietfdb/personal/flycoolman/7.10.1.dev0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-6-set-up-database&#34;&gt;Step 6: Set up database&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;cd 7.10.1.dev0/
./docker/setupdb
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-7-set-up-virtual-environment&#34;&gt;Step 7: Set up virtual environment&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;./docker/run
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    rsyslog error can be ignored!&lt;br&gt;
[FAIL] rsyslogd is not running &amp;hellip; failed!
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;In virtual environment of the container&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install --upgrade -r requirements.txt

./ietf/manage.py migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    &lt;p&gt;The below operation might be needed if the migration fails.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo cp docker/settings_local.py ietf/  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then run the migrate command again.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;step-8-run-the-tests&#34;&gt;Step 8: Run the tests&lt;/h3&gt;
&lt;p&gt;In the virtual environment to run the tests:&lt;/p&gt;
&lt;p&gt;./ietf/manage.py test &amp;ndash;settings=settings_sqlitetest&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    Make sure that one of the following commands runs to completion without errors.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;step-9-start-the-development-server&#34;&gt;Step 9: Start the Development Server&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;./ietf/manage.py runserver 0.0.0.0:8000 &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Test the access to datatracker.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;./featured.png&#34; alt=&#34;ietf-datatracker&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;step-10-mailserver-and-rsync-data&#34;&gt;Step 10: Mailserver and Rsync Data&lt;/h3&gt;
&lt;p&gt;Go to 
&lt;a href=&#34;https://trac.tools.ietf.org/tools/ietfdb/wiki/SprintCoderSetup&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the original page&lt;/a&gt; for details about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://trac.tools.ietf.org/tools/ietfdb/wiki/SprintCoderSetup&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;(Optional) Run the mailserver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://trac.tools.ietf.org/tools/ietfdb/wiki/SprintCoderSetup&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Manually Edit or rsync Datatracker Data Directories&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;setup-complete&#34;&gt;Setup Complete&lt;/h3&gt;
&lt;p&gt;For other workflow things, please refer to 
&lt;a href=&#34;https://trac.tools.ietf.org/tools/ietfdb/wiki/SprintCoderSetup&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the original setup guide.&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;links&#34;&gt;Links&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-centos-7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How To Install and Use Docker on CentOS 7&lt;/a&gt;

&lt;a href=&#34;https://www.digitalocean.com/community/questions/how-to-fix-docker-got-permission-denied-while-trying-to-connect-to-the-docker-daemon-socket&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to fix docker: Got permission denied while trying to connect to the Docker daemon socket&lt;/a&gt;

&lt;a href=&#34;https://tecadmin.net/install-subversion-1-8-on-centos-rhel/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to Install Subversion (SVN) 1.8.19 on CentOS/RHEL 7/6/5&lt;/a&gt;

&lt;a href=&#34;https://trac.tools.ietf.org/tools/ietfdb/wiki/SprintCoderSetup&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sprint Coder Setup&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://www.techrepublic.com/article/how-to-install-a-gui-on-top-of-centos-7/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to install a GUI on top of CentOS 7&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://trac.tools.ietf.org/tools/ietfdb/wiki/SprintCoderSetupTroubleshooting&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SprintCoderSetupTroubleshooting&lt;/a&gt;&lt;br&gt;

&lt;a href=&#34;https://flycoolman.com/linux/ubuntu-18.04-upgrade-virtualbox-vagrant/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Upgrade to VirtualBox 6.1 and Vagrant 2.9.9 on Ubuntu 18.04&lt;/a&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it ðŸ™Œ&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Frequent Mistakes</title>
      <link>/coding/python/frequent-mistakes/</link>
      <pubDate>Tue, 31 Dec 2019 23:59:59 +0000</pubDate>
      <guid>/coding/python/frequent-mistakes/</guid>
      <description>&lt;h2 id=&#34;frequent-mistakes&#34;&gt;Frequent Mistakes&lt;/h2&gt;
&lt;p&gt;A VS. notes between Python and Java.&lt;/p&gt;
&lt;h3 id=&#34;type-casting&#34;&gt;Type casting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python: &lt;strong&gt;int(1.9)&lt;/strong&gt;, &lt;strong&gt;float(1)&lt;/strong&gt;, &lt;strong&gt;str(1.9)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Java:
&lt;ul&gt;
&lt;li&gt;Narrowing casting: (manually) - converting a larger type to a smaller size type
&lt;strong&gt;(int)1.9&lt;/strong&gt;, &lt;strong&gt;(float)9.78&lt;/strong&gt; &lt;br&gt;
double -&amp;gt; float -&amp;gt; long -&amp;gt; int -&amp;gt; char -&amp;gt; short -&amp;gt; byte&lt;/li&gt;
&lt;li&gt;Widening casting: automatically - converting a smaller type to a larger type size&lt;br&gt;
byte -&amp;gt; short -&amp;gt; char -&amp;gt; int -&amp;gt; long -&amp;gt; float -&amp;gt; double&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;true-or-false&#34;&gt;True or False&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Python: True/False&lt;/li&gt;
&lt;li&gt;Java: true/false&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    TBD
  &lt;/div&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it ðŸ™Œ&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Python Notes</title>
      <link>/coding/python/python-notes/</link>
      <pubDate>Tue, 31 Dec 2019 23:59:59 +0000</pubDate>
      <guid>/coding/python/python-notes/</guid>
      <description>&lt;h2 id=&#34;python-notes&#34;&gt;Python Notes&lt;/h2&gt;
&lt;p&gt;A free style notes of Python.&lt;/p&gt;
&lt;h3 id=&#34;class-or-static-variables-in-python&#34;&gt;Class or Static Variables in Python&lt;/h3&gt;
&lt;p&gt;In C++ and Java, we can use static keyword to make a variable as class variable. The variables which donâ€™t have preceding static keyword are instance variables.&lt;/p&gt;
&lt;p&gt;The Python approach is simple, it &lt;strong&gt;doesnâ€™t&lt;/strong&gt; require a static keyword. All variables which are assigned a value in class declaration are class variables. And variables which are assigned values inside methods are instance variables.&lt;/p&gt;
&lt;h3 id=&#34;true-or-false&#34;&gt;True or False&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Most Values are True:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Almost any value is evaluated to True if it has some sort of content.&lt;/li&gt;
&lt;li&gt;Any string is True, except empty strings.&lt;/li&gt;
&lt;li&gt;Any number is True, except 0.&lt;/li&gt;
&lt;li&gt;Any list, tuple, set, and dictionary are True, except empty ones.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Some Values are False:&lt;/strong&gt;&lt;br&gt;
In fact, there are not many values that evaluates to False,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;except empty values, such as (), [], {}, &amp;ldquo;&amp;rdquo;,&lt;/li&gt;
&lt;li&gt;the number 0, and the value None.&lt;/li&gt;
&lt;li&gt;And of course the value False evaluates to False.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;casting&#34;&gt;Casting&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;int()&lt;/strong&gt; - constructs an integer number from an integer literal, a float literal (by rounding down to the previous whole number), or a string literal (providing the string represents a whole number)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;float()&lt;/strong&gt; - constructs a float number from an integer literal, a float literal or a string literal (providing the string represents a float or an integer)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tr()&lt;/strong&gt; - constructs a string from a wide variety of data types, including strings, integer literals and float literals&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dictionary--vs-update&#34;&gt;Dictionary: [] vs. update&lt;/h3&gt;
&lt;p&gt;
&lt;a href=&#34;https://stackoverflow.com/questions/1024847/how-can-i-add-new-keys-to-a-dictionary&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How can I add new keys to a dictionary?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;[]&lt;/strong&gt;&lt;br&gt;
you create a new key\value pair on a dictionary by assigning a value to that key. If the key doesn&amp;rsquo;t exist, it&amp;rsquo;s added and points to that value. If it exists, the current value it points to is overwritten.&lt;br&gt;
the d[key]=val syntax as it is shorter and can handle any object as key (as long it is hashable), and only sets one value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;update&lt;/strong&gt;&lt;br&gt;
Whereas the .update(key1=val1, key2=val2) is nicer if you want to set multiple values at the same time, as long as the keys are strings (since kwargs are converted to strings).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    dict.update can also take another dictionary, but I personally prefer not to explicitly create a new dictionary in order to update another one.
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    TBD
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;a href=&#34;https://flycoolman.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Just a Placeholder&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h4 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it ðŸ™Œ&lt;/h4&gt;
</description>
    </item>
    
  </channel>
</rss>
